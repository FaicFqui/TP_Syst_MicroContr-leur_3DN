
TP_microC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08008400  08008400  00009400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080084f8  080084f8  0000a068  2**0
                  CONTENTS
  4 .ARM          00000008  080084f8  080084f8  000094f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008500  08008500  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008500  08008500  00009500  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008504  08008504  00009504  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008508  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e4  20000068  08008570  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000064c  08008570  0000a64c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014626  00000000  00000000  0000a098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d73  00000000  00000000  0001e6be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00021438  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dcd  00000000  00000000  000225f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000110c8  00000000  00000000  000233c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000051d0  00000000  00000000  0003448d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  0003965d  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00005160  00000000  00000000  000396a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  0003e800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083e8 	.word	0x080083e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080083e8 	.word	0x080083e8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MCP23S17_WriteRegister>:

// Déclaration externe du SPI
extern SPI_HandleTypeDef hspi3;

// --- Fonction interne ---
static void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
	// Adresse + bit d'écriture
	uint8_t data[3];
    data[0] = MCP23S17_ADDRESS;
 8000570:	2340      	movs	r3, #64	@ 0x40
 8000572:	733b      	strb	r3, [r7, #12]
    data[1] = reg;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	737b      	strb	r3, [r7, #13]
    data[2] = value;
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS LOW
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	@ 0x80
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <MCP23S17_WriteRegister+0x48>)
 8000582:	f001 fce1 	bl	8001f48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8000586:	f107 010c 	add.w	r1, r7, #12
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2203      	movs	r2, #3
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <MCP23S17_WriteRegister+0x4c>)
 8000592:	f005 fba5 	bl	8005ce0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS HIGH
 8000596:	2201      	movs	r2, #1
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <MCP23S17_WriteRegister+0x48>)
 800059c:	f001 fcd4 	bl	8001f48 <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	48000400 	.word	0x48000400
 80005ac:	20000270 	.word	0x20000270

080005b0 <LED_Driver_Init>:

// --- Fonctions publiques ---

void LED_Driver_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    // RESET via GPIO
    HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f001 fcc4 	bl	8001f48 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 ff6b 	bl	800149c <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 fcbb 	bl	8001f48 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 ff62 	bl	800149c <HAL_Delay>

    // Init MCP23S17
    MCP23S17_WriteRegister(MCP23S17_IOCON, 0x08);  // Mode SPI hardware
 80005d8:	2108      	movs	r1, #8
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff ffc0 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRA, 0x00); // PORTA en sortie
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffbc 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRB, 0x00); // PORTB en sortie
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff ffb8 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_GPIOA, 0xFF);  // Éteindre LEDs
 80005f0:	21ff      	movs	r1, #255	@ 0xff
 80005f2:	2012      	movs	r0, #18
 80005f4:	f7ff ffb4 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_GPIOB, 0xFF);
 80005f8:	21ff      	movs	r1, #255	@ 0xff
 80005fa:	2013      	movs	r0, #19
 80005fc:	f7ff ffb0 	bl	8000560 <MCP23S17_WriteRegister>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <Generate_TriangleWave>:
    for (int i = 0; i < TRIANGLE_RESOLUTION; i++) {
        txBuffer[2*i] = (uint16_t)triangleWave[i];      // Canal gauche
        txBuffer[2*i + 1] = (uint16_t)triangleWave[i];  // Canal droit
    }
}*/
void Generate_TriangleWave(void) {
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
    for (int i = 0; i < TRIANGLE_RESOLUTION; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
 800060e:	e033      	b.n	8000678 <Generate_TriangleWave+0x74>
        int16_t value;

        if (i < TRIANGLE_RESOLUTION / 2)
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b31      	cmp	r3, #49	@ 0x31
 8000614:	dc0f      	bgt.n	8000636 <Generate_TriangleWave+0x32>
            value = (2 * TRIANGLE_AMPLITUDE * i) / (TRIANGLE_RESOLUTION / 2) - TRIANGLE_AMPLITUDE;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	b29b      	uxth	r3, r3
 800061a:	461a      	mov	r2, r3
 800061c:	0092      	lsls	r2, r2, #2
 800061e:	4413      	add	r3, r2
 8000620:	461a      	mov	r2, r3
 8000622:	0112      	lsls	r2, r2, #4
 8000624:	1ad3      	subs	r3, r2, r3
 8000626:	011b      	lsls	r3, r3, #4
 8000628:	b29b      	uxth	r3, r3
 800062a:	f5a3 43ea 	sub.w	r3, r3, #29952	@ 0x7500
 800062e:	3b30      	subs	r3, #48	@ 0x30
 8000630:	b29b      	uxth	r3, r3
 8000632:	807b      	strh	r3, [r7, #2]
 8000634:	e010      	b.n	8000658 <Generate_TriangleWave+0x54>
        else
            value = (-2 * TRIANGLE_AMPLITUDE * (i - TRIANGLE_RESOLUTION / 2)) / (TRIANGLE_RESOLUTION / 2) + TRIANGLE_AMPLITUDE;
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	3b32      	subs	r3, #50	@ 0x32
 800063a:	b29b      	uxth	r3, r3
 800063c:	461a      	mov	r2, r3
 800063e:	0092      	lsls	r2, r2, #2
 8000640:	4413      	add	r3, r2
 8000642:	461a      	mov	r2, r3
 8000644:	0112      	lsls	r2, r2, #4
 8000646:	1ad3      	subs	r3, r2, r3
 8000648:	011b      	lsls	r3, r3, #4
 800064a:	425b      	negs	r3, r3
 800064c:	b29b      	uxth	r3, r3
 800064e:	f503 43ea 	add.w	r3, r3, #29952	@ 0x7500
 8000652:	3330      	adds	r3, #48	@ 0x30
 8000654:	b29b      	uxth	r3, r3
 8000656:	807b      	strh	r3, [r7, #2]

        // Stéréo : Gauche = Droite
        txBuffer[2*i]     = (uint16_t)value;
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	005b      	lsls	r3, r3, #1
 800065c:	490b      	ldr	r1, [pc, #44]	@ (800068c <Generate_TriangleWave+0x88>)
 800065e:	887a      	ldrh	r2, [r7, #2]
 8000660:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
        txBuffer[2*i + 1] = (uint16_t)value;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	005b      	lsls	r3, r3, #1
 8000668:	3301      	adds	r3, #1
 800066a:	4908      	ldr	r1, [pc, #32]	@ (800068c <Generate_TriangleWave+0x88>)
 800066c:	887a      	ldrh	r2, [r7, #2]
 800066e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
    for (int i = 0; i < TRIANGLE_RESOLUTION; i++) {
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	3301      	adds	r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	2b63      	cmp	r3, #99	@ 0x63
 800067c:	ddc8      	ble.n	8000610 <Generate_TriangleWave+0xc>
    }
}
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000035c 	.word	0x2000035c

08000690 <__io_putchar>:



int __io_putchar(int chr) // redirection de printf de flux sortant stdout vers usart
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b082      	sub	sp, #8
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000698:	1d39      	adds	r1, r7, #4
 800069a:	f04f 33ff 	mov.w	r3, #4294967295
 800069e:	2201      	movs	r2, #1
 80006a0:	4803      	ldr	r0, [pc, #12]	@ (80006b0 <__io_putchar+0x20>)
 80006a2:	f005 fe45 	bl	8006330 <HAL_UART_Transmit>
	return chr;
 80006a6:	687b      	ldr	r3, [r7, #4]
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	200002d4 	.word	0x200002d4

080006b4 <Read_Chip_ID>:

extern I2C_HandleTypeDef hi2c2; // Assurez-vous que votre handle I2C est défini

uint8_t chip_id[2]; // Tableau pour stocker la valeur lue

HAL_StatusTypeDef Read_Chip_ID(void) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b086      	sub	sp, #24
 80006b8:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Lecture de 2 octets depuis le registre CHIP_ID
	status = HAL_I2C_Mem_Read(&hi2c2, (I2C_ADDR_CODEC), REG_CHIP_ID, I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY);
 80006ba:	f04f 33ff 	mov.w	r3, #4294967295
 80006be:	9302      	str	r3, [sp, #8]
 80006c0:	2302      	movs	r3, #2
 80006c2:	9301      	str	r3, [sp, #4]
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <Read_Chip_ID+0x30>)
 80006c6:	9300      	str	r3, [sp, #0]
 80006c8:	2302      	movs	r3, #2
 80006ca:	2200      	movs	r2, #0
 80006cc:	2114      	movs	r1, #20
 80006ce:	4806      	ldr	r0, [pc, #24]	@ (80006e8 <Read_Chip_ID+0x34>)
 80006d0:	f001 fe06 	bl	80022e0 <HAL_I2C_Mem_Read>
 80006d4:	4603      	mov	r3, r0
 80006d6:	71fb      	strb	r3, [r7, #7]

	return status;
 80006d8:	79fb      	ldrb	r3, [r7, #7]
}
 80006da:	4618      	mov	r0, r3
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	200004ec 	.word	0x200004ec
 80006e8:	20000084 	.word	0x20000084

080006ec <main>:



int main(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006f0:	f000 fe58 	bl	80013a4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006f4:	f000 f854 	bl	80007a0 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006f8:	f000 f8a3 	bl	8000842 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006fc:	f000 fa00 	bl	8000b00 <MX_GPIO_Init>
	MX_DMA_Init();
 8000700:	f000 f9d8 	bl	8000ab4 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000704:	f000 f9a6 	bl	8000a54 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 8000708:	f000 f966 	bl	80009d8 <MX_SPI3_Init>
	MX_I2C2_Init();
 800070c:	f000 f8c4 	bl	8000898 <MX_I2C2_Init>
	MX_SAI2_Init();
 8000710:	f000 f902 	bl	8000918 <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 1 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 8000714:	4b19      	ldr	r3, [pc, #100]	@ (800077c <main+0x90>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	4b18      	ldr	r3, [pc, #96]	@ (800077c <main+0x90>)
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8000722:	601a      	str	r2, [r3, #0]

	LED_Driver_Init();
 8000724:	f7ff ff44 	bl	80005b0 <LED_Driver_Init>

	//Test printf avec usart
	printf("\r\n==== Systeme microcontroleur ====\r\n");
 8000728:	4815      	ldr	r0, [pc, #84]	@ (8000780 <main+0x94>)
 800072a:	f006 fff9 	bl	8007720 <puts>
	printf("Bonjour via USART!\n"); // Envoi d'un message via l'USART
 800072e:	4815      	ldr	r0, [pc, #84]	@ (8000784 <main+0x98>)
 8000730:	f006 fff6 	bl	8007720 <puts>


	/* USER CODE END 2 */

	if(Read_Chip_ID() == HAL_OK){
 8000734:	f7ff ffbe 	bl	80006b4 <Read_Chip_ID>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d109      	bne.n	8000752 <main+0x66>
		printf("CHIP_ID: 0x%02X%02X\n", chip_id[0], chip_id[1]);
 800073e:	4b12      	ldr	r3, [pc, #72]	@ (8000788 <main+0x9c>)
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	4b10      	ldr	r3, [pc, #64]	@ (8000788 <main+0x9c>)
 8000746:	785b      	ldrb	r3, [r3, #1]
 8000748:	461a      	mov	r2, r3
 800074a:	4810      	ldr	r0, [pc, #64]	@ (800078c <main+0xa0>)
 800074c:	f006 ff80 	bl	8007650 <iprintf>
 8000750:	e002      	b.n	8000758 <main+0x6c>
	} else {
		printf("Erreur lors de la lecture du CHIP_ID\n");
 8000752:	480f      	ldr	r0, [pc, #60]	@ (8000790 <main+0xa4>)
 8000754:	f006 ffe4 	bl	8007720 <puts>
	// Allumer la LED A0
	//LED_SetPin(15, GPIO_PIN_RESET);

	// Éteindre la LED B3
	//LED_SetPin(11, GPIO_PIN_SET);
	sgtl5000_i2c = &hi2c2;
 8000758:	4b0e      	ldr	r3, [pc, #56]	@ (8000794 <main+0xa8>)
 800075a:	4a0f      	ldr	r2, [pc, #60]	@ (8000798 <main+0xac>)
 800075c:	601a      	str	r2, [r3, #0]

	SGTL5000_Init();
 800075e:	f000 fa7b 	bl	8000c58 <SGTL5000_Init>

	Generate_TriangleWave();  // Génère le signal une fois
 8000762:	f7ff ff4f 	bl	8000604 <Generate_TriangleWave>



	// Lancer émission via DMA (SAI A → SGTL5000)
	HAL_Delay(10);
 8000766:	200a      	movs	r0, #10
 8000768:	f000 fe98 	bl	800149c <HAL_Delay>
	HAL_SAI_Transmit_DMA(&hsai_BlockA2, (uint8_t*)txBuffer, TRIANGLE_RESOLUTION * 2 * sizeof(int16_t));
 800076c:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8000770:	490a      	ldr	r1, [pc, #40]	@ (800079c <main+0xb0>)
 8000772:	4802      	ldr	r0, [pc, #8]	@ (800077c <main+0x90>)
 8000774:	f004 fd5c 	bl	8005230 <HAL_SAI_Transmit_DMA>


	while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <main+0x8c>
 800077c:	200000d8 	.word	0x200000d8
 8000780:	08008400 	.word	0x08008400
 8000784:	08008428 	.word	0x08008428
 8000788:	200004ec 	.word	0x200004ec
 800078c:	0800843c 	.word	0x0800843c
 8000790:	08008454 	.word	0x08008454
 8000794:	200004f0 	.word	0x200004f0
 8000798:	20000084 	.word	0x20000084
 800079c:	2000035c 	.word	0x2000035c

080007a0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b096      	sub	sp, #88	@ 0x58
 80007a4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0314 	add.w	r3, r7, #20
 80007aa:	2244      	movs	r2, #68	@ 0x44
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f007 f896 	bl	80078e0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	463b      	mov	r3, r7
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c2:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007c6:	f002 f9b9 	bl	8002b3c <HAL_PWREx_ControlVoltageScaling>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x34>
	{
		Error_Handler();
 80007d0:	f000 fa12 	bl	8000bf8 <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007d4:	2302      	movs	r3, #2
 80007d6:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007d8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007dc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007de:	2310      	movs	r3, #16
 80007e0:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007e2:	2302      	movs	r3, #2
 80007e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007e6:	2302      	movs	r3, #2
 80007e8:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 80007ea:	2301      	movs	r3, #1
 80007ec:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 80007ee:	230a      	movs	r3, #10
 80007f0:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80007f2:	2307      	movs	r3, #7
 80007f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007f6:	2302      	movs	r3, #2
 80007f8:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007fa:	2302      	movs	r3, #2
 80007fc:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007fe:	f107 0314 	add.w	r3, r7, #20
 8000802:	4618      	mov	r0, r3
 8000804:	f002 f9f0 	bl	8002be8 <HAL_RCC_OscConfig>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <SystemClock_Config+0x72>
	{
		Error_Handler();
 800080e:	f000 f9f3 	bl	8000bf8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000812:	230f      	movs	r3, #15
 8000814:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000816:	2303      	movs	r3, #3
 8000818:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081a:	2300      	movs	r3, #0
 800081c:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800081e:	2300      	movs	r3, #0
 8000820:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000822:	2300      	movs	r3, #0
 8000824:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000826:	463b      	mov	r3, r7
 8000828:	2104      	movs	r1, #4
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fdb8 	bl	80033a0 <HAL_RCC_ClockConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x9a>
	{
		Error_Handler();
 8000836:	f000 f9df 	bl	8000bf8 <Error_Handler>
	}
}
 800083a:	bf00      	nop
 800083c:	3758      	adds	r7, #88	@ 0x58
 800083e:	46bd      	mov	sp, r7
 8000840:	bd80      	pop	{r7, pc}

08000842 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	b0a2      	sub	sp, #136	@ 0x88
 8000846:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000848:	463b      	mov	r3, r7
 800084a:	2288      	movs	r2, #136	@ 0x88
 800084c:	2100      	movs	r1, #0
 800084e:	4618      	mov	r0, r3
 8000850:	f007 f846 	bl	80078e0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 8000854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000858:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 800085a:	2300      	movs	r3, #0
 800085c:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 800085e:	2302      	movs	r3, #2
 8000860:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000862:	2301      	movs	r3, #1
 8000864:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 8000866:	230d      	movs	r3, #13
 8000868:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 800086a:	2311      	movs	r3, #17
 800086c:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800086e:	2302      	movs	r3, #2
 8000870:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000872:	2302      	movs	r3, #2
 8000874:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 8000876:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800087a:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800087c:	463b      	mov	r3, r7
 800087e:	4618      	mov	r0, r3
 8000880:	f002 ffb2 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 800088a:	f000 f9b5 	bl	8000bf8 <Error_Handler>
	}
}
 800088e:	bf00      	nop
 8000890:	3788      	adds	r7, #136	@ 0x88
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 800089c:	4b1b      	ldr	r3, [pc, #108]	@ (800090c <MX_I2C2_Init+0x74>)
 800089e:	4a1c      	ldr	r2, [pc, #112]	@ (8000910 <MX_I2C2_Init+0x78>)
 80008a0:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10D19CE4;
 80008a2:	4b1a      	ldr	r3, [pc, #104]	@ (800090c <MX_I2C2_Init+0x74>)
 80008a4:	4a1b      	ldr	r2, [pc, #108]	@ (8000914 <MX_I2C2_Init+0x7c>)
 80008a6:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 80008a8:	4b18      	ldr	r3, [pc, #96]	@ (800090c <MX_I2C2_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008ae:	4b17      	ldr	r3, [pc, #92]	@ (800090c <MX_I2C2_Init+0x74>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008b4:	4b15      	ldr	r3, [pc, #84]	@ (800090c <MX_I2C2_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 80008ba:	4b14      	ldr	r3, [pc, #80]	@ (800090c <MX_I2C2_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008c0:	4b12      	ldr	r3, [pc, #72]	@ (800090c <MX_I2C2_Init+0x74>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	@ (800090c <MX_I2C2_Init+0x74>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008cc:	4b0f      	ldr	r3, [pc, #60]	@ (800090c <MX_I2C2_Init+0x74>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80008d2:	480e      	ldr	r0, [pc, #56]	@ (800090c <MX_I2C2_Init+0x74>)
 80008d4:	f001 fb50 	bl	8001f78 <HAL_I2C_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 80008de:	f000 f98b 	bl	8000bf8 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4809      	ldr	r0, [pc, #36]	@ (800090c <MX_I2C2_Init+0x74>)
 80008e6:	f002 f883 	bl	80029f0 <HAL_I2CEx_ConfigAnalogFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 80008f0:	f000 f982 	bl	8000bf8 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80008f4:	2100      	movs	r1, #0
 80008f6:	4805      	ldr	r0, [pc, #20]	@ (800090c <MX_I2C2_Init+0x74>)
 80008f8:	f002 f8c5 	bl	8002a86 <HAL_I2CEx_ConfigDigitalFilter>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 8000902:	f000 f979 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8000906:	bf00      	nop
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	20000084 	.word	0x20000084
 8000910:	40005800 	.word	0x40005800
 8000914:	10d19ce4 	.word	0x10d19ce4

08000918 <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 800091c:	4b2a      	ldr	r3, [pc, #168]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 800091e:	4a2b      	ldr	r2, [pc, #172]	@ (80009cc <MX_SAI2_Init+0xb4>)
 8000920:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 8000922:	4b29      	ldr	r3, [pc, #164]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000924:	2200      	movs	r2, #0
 8000926:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 8000928:	4b27      	ldr	r3, [pc, #156]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800092e:	4b26      	ldr	r3, [pc, #152]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000934:	4b24      	ldr	r3, [pc, #144]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800093a:	4b23      	ldr	r3, [pc, #140]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8000940:	4b21      	ldr	r3, [pc, #132]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000942:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8000946:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000948:	4b1f      	ldr	r3, [pc, #124]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 800094e:	4b1e      	ldr	r3, [pc, #120]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000954:	4b1c      	ldr	r3, [pc, #112]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800095a:	4b1b      	ldr	r3, [pc, #108]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 800095c:	2200      	movs	r2, #0
 800095e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000960:	2302      	movs	r3, #2
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	4818      	ldr	r0, [pc, #96]	@ (80009c8 <MX_SAI2_Init+0xb0>)
 8000968:	f004 fa58 	bl	8004e1c <HAL_SAI_InitProtocol>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_SAI2_Init+0x5e>
	{
		Error_Handler();
 8000972:	f000 f941 	bl	8000bf8 <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 8000976:	4b16      	ldr	r3, [pc, #88]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 8000978:	4a16      	ldr	r2, [pc, #88]	@ (80009d4 <MX_SAI2_Init+0xbc>)
 800097a:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 800097c:	4b14      	ldr	r3, [pc, #80]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 800097e:	2203      	movs	r2, #3
 8000980:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000982:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 8000984:	2201      	movs	r2, #1
 8000986:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000988:	4b11      	ldr	r3, [pc, #68]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800098e:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000994:	4b0e      	ldr	r3, [pc, #56]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 8000996:	2200      	movs	r2, #0
 8000998:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800099a:	4b0d      	ldr	r3, [pc, #52]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 800099c:	2200      	movs	r2, #0
 800099e:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 80009a0:	4b0b      	ldr	r3, [pc, #44]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80009a6:	4b0a      	ldr	r3, [pc, #40]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 80009ac:	2302      	movs	r3, #2
 80009ae:	2200      	movs	r2, #0
 80009b0:	2100      	movs	r1, #0
 80009b2:	4807      	ldr	r0, [pc, #28]	@ (80009d0 <MX_SAI2_Init+0xb8>)
 80009b4:	f004 fa32 	bl	8004e1c <HAL_SAI_InitProtocol>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d001      	beq.n	80009c2 <MX_SAI2_Init+0xaa>
	{
		Error_Handler();
 80009be:	f000 f91b 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	200000d8 	.word	0x200000d8
 80009cc:	40015804 	.word	0x40015804
 80009d0:	2000015c 	.word	0x2000015c
 80009d4:	40015824 	.word	0x40015824

080009d8 <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 80009dc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a4c <MX_SPI3_Init+0x74>)
 80009de:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <MX_SPI3_Init+0x78>)
 80009e0:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 80009e2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a4c <MX_SPI3_Init+0x74>)
 80009e4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80009e8:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80009ea:	4b18      	ldr	r3, [pc, #96]	@ (8000a4c <MX_SPI3_Init+0x74>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80009f0:	4b16      	ldr	r3, [pc, #88]	@ (8000a4c <MX_SPI3_Init+0x74>)
 80009f2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80009f6:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f8:	4b14      	ldr	r3, [pc, #80]	@ (8000a4c <MX_SPI3_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009fe:	4b13      	ldr	r3, [pc, #76]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 8000a04:	4b11      	ldr	r3, [pc, #68]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a06:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a0a:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a12:	4b0e      	ldr	r3, [pc, #56]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a18:	4b0c      	ldr	r3, [pc, #48]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 8000a24:	4b09      	ldr	r3, [pc, #36]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a26:	2207      	movs	r2, #7
 8000a28:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a2a:	4b08      	ldr	r3, [pc, #32]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a30:	4b06      	ldr	r3, [pc, #24]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a32:	2208      	movs	r2, #8
 8000a34:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000a36:	4805      	ldr	r0, [pc, #20]	@ (8000a4c <MX_SPI3_Init+0x74>)
 8000a38:	f005 f8af 	bl	8005b9a <HAL_SPI_Init>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d001      	beq.n	8000a46 <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 8000a42:	f000 f8d9 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	20000270 	.word	0x20000270
 8000a50:	40003c00 	.word	0x40003c00

08000a54 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000a58:	4b14      	ldr	r3, [pc, #80]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a5a:	4a15      	ldr	r2, [pc, #84]	@ (8000ab0 <MX_USART2_UART_Init+0x5c>)
 8000a5c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a5e:	4b13      	ldr	r3, [pc, #76]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a64:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a6c:	4b0f      	ldr	r3, [pc, #60]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a72:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a74:	2200      	movs	r2, #0
 8000a76:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a78:	4b0c      	ldr	r3, [pc, #48]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a7a:	220c      	movs	r2, #12
 8000a7c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a7e:	4b0b      	ldr	r3, [pc, #44]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a80:	2200      	movs	r2, #0
 8000a82:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a84:	4b09      	ldr	r3, [pc, #36]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a86:	2200      	movs	r2, #0
 8000a88:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a8a:	4b08      	ldr	r3, [pc, #32]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a90:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a96:	4805      	ldr	r0, [pc, #20]	@ (8000aac <MX_USART2_UART_Init+0x58>)
 8000a98:	f005 fbfc 	bl	8006294 <HAL_UART_Init>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000aa2:	f000 f8a9 	bl	8000bf8 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000aa6:	bf00      	nop
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	200002d4 	.word	0x200002d4
 8000ab0:	40004400 	.word	0x40004400

08000ab4 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <MX_DMA_Init+0x48>)
 8000abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <MX_DMA_Init+0x48>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6493      	str	r3, [r2, #72]	@ 0x48
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <MX_DMA_Init+0x48>)
 8000ac8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	2010      	movs	r0, #16
 8000ad8:	f000 fddf 	bl	800169a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000adc:	2010      	movs	r0, #16
 8000ade:	f000 fdf8 	bl	80016d2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2011      	movs	r0, #17
 8000ae8:	f000 fdd7 	bl	800169a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000aec:	2011      	movs	r0, #17
 8000aee:	f000 fdf0 	bl	80016d2 <HAL_NVIC_EnableIRQ>

}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40021000 	.word	0x40021000

08000b00 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 0314 	add.w	r3, r7, #20
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000b16:	4b35      	ldr	r3, [pc, #212]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b1a:	4a34      	ldr	r2, [pc, #208]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b1c:	f043 0304 	orr.w	r3, r3, #4
 8000b20:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b22:	4b32      	ldr	r3, [pc, #200]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b24:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b26:	f003 0304 	and.w	r3, r3, #4
 8000b2a:	613b      	str	r3, [r7, #16]
 8000b2c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000b2e:	4b2f      	ldr	r3, [pc, #188]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b32:	4a2e      	ldr	r2, [pc, #184]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b38:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b42:	60fb      	str	r3, [r7, #12]
 8000b44:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000b46:	4b29      	ldr	r3, [pc, #164]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b4a:	4a28      	ldr	r2, [pc, #160]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b4c:	f043 0301 	orr.w	r3, r3, #1
 8000b50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b52:	4b26      	ldr	r3, [pc, #152]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b56:	f003 0301 	and.w	r3, r3, #1
 8000b5a:	60bb      	str	r3, [r7, #8]
 8000b5c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5e:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b62:	4a22      	ldr	r2, [pc, #136]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b6a:	4b20      	ldr	r3, [pc, #128]	@ (8000bec <MX_GPIO_Init+0xec>)
 8000b6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	607b      	str	r3, [r7, #4]
 8000b74:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2121      	movs	r1, #33	@ 0x21
 8000b7a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b7e:	f001 f9e3 	bl	8001f48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000b82:	2200      	movs	r2, #0
 8000b84:	2180      	movs	r1, #128	@ 0x80
 8000b86:	481a      	ldr	r0, [pc, #104]	@ (8000bf0 <MX_GPIO_Init+0xf0>)
 8000b88:	f001 f9de 	bl	8001f48 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b90:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b92:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4814      	ldr	r0, [pc, #80]	@ (8000bf4 <MX_GPIO_Init+0xf4>)
 8000ba4:	f001 f826 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pins : VU_nReset_Pin LD2_Pin */
	GPIO_InitStruct.Pin = VU_nReset_Pin|LD2_Pin;
 8000ba8:	2321      	movs	r3, #33	@ 0x21
 8000baa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bac:	2301      	movs	r3, #1
 8000bae:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb8:	f107 0314 	add.w	r3, r7, #20
 8000bbc:	4619      	mov	r1, r3
 8000bbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000bc2:	f001 f817 	bl	8001bf4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI3_nCS_Pin */
	GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 8000bd6:	f107 0314 	add.w	r3, r7, #20
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4804      	ldr	r0, [pc, #16]	@ (8000bf0 <MX_GPIO_Init+0xf0>)
 8000bde:	f001 f809 	bl	8001bf4 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	@ 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	48000400 	.word	0x48000400
 8000bf4:	48000800 	.word	0x48000800

08000bf8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfc:	b672      	cpsid	i
}
 8000bfe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <Error_Handler+0x8>

08000c04 <SGTL5000_WriteRegister>:
#include "sgtl5000.h"

I2C_HandleTypeDef *sgtl5000_i2c = NULL;

void SGTL5000_WriteRegister(uint16_t reg, uint16_t val)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	460a      	mov	r2, r1
 8000c0e:	80fb      	strh	r3, [r7, #6]
 8000c10:	4613      	mov	r3, r2
 8000c12:	80bb      	strh	r3, [r7, #4]
    uint8_t data[4];
    data[0] = (reg >> 8) & 0xFF;
 8000c14:	88fb      	ldrh	r3, [r7, #6]
 8000c16:	0a1b      	lsrs	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	b2db      	uxtb	r3, r3
 8000c1c:	733b      	strb	r3, [r7, #12]
    data[1] = reg & 0xFF;
 8000c1e:	88fb      	ldrh	r3, [r7, #6]
 8000c20:	b2db      	uxtb	r3, r3
 8000c22:	737b      	strb	r3, [r7, #13]
    data[2] = (val >> 8) & 0xFF;
 8000c24:	88bb      	ldrh	r3, [r7, #4]
 8000c26:	0a1b      	lsrs	r3, r3, #8
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73bb      	strb	r3, [r7, #14]
    data[3] = val & 0xFF;
 8000c2e:	88bb      	ldrh	r3, [r7, #4]
 8000c30:	b2db      	uxtb	r3, r3
 8000c32:	73fb      	strb	r3, [r7, #15]

    HAL_I2C_Master_Transmit(sgtl5000_i2c, SGTL5000_I2C_ADDR, data, 4, HAL_MAX_DELAY);
 8000c34:	4b07      	ldr	r3, [pc, #28]	@ (8000c54 <SGTL5000_WriteRegister+0x50>)
 8000c36:	6818      	ldr	r0, [r3, #0]
 8000c38:	f107 020c 	add.w	r2, r7, #12
 8000c3c:	f04f 33ff 	mov.w	r3, #4294967295
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	2304      	movs	r3, #4
 8000c44:	2114      	movs	r1, #20
 8000c46:	f001 fa33 	bl	80020b0 <HAL_I2C_Master_Transmit>
}
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	200004f0 	.word	0x200004f0

08000c58 <SGTL5000_Init>:

    return ((uint16_t)rx[0] << 8) | rx[1];
}

void SGTL5000_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	af00      	add	r7, sp, #0
    HAL_Delay(50); // Delay for power-up stabilization /*0x7260*/
 8000c5c:	2032      	movs	r0, #50	@ 0x32
 8000c5e:	f000 fc1d 	bl	800149c <HAL_Delay>

    // Configuration SGTL5000
    SGTL5000_WriteRegister(CHIP_ANA_POWER, 0x7260);
 8000c62:	f247 2160 	movw	r1, #29280	@ 0x7260
 8000c66:	2034      	movs	r0, #52	@ 0x34
 8000c68:	f7ff ffcc 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINREG_CTRL, 0x006C);
 8000c6c:	216c      	movs	r1, #108	@ 0x6c
 8000c6e:	2022      	movs	r0, #34	@ 0x22
 8000c70:	f7ff ffc8 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_REF_CTRL, 0x01F2);
 8000c74:	f44f 71f9 	mov.w	r1, #498	@ 0x1f2
 8000c78:	2026      	movs	r0, #38	@ 0x26
 8000c7a:	f7ff ffc3 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_CTRL, 0x032F);
 8000c7e:	f240 312f 	movw	r1, #815	@ 0x32f
 8000c82:	2028      	movs	r0, #40	@ 0x28
 8000c84:	f7ff ffbe 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_LINE_OUT_VOL, 0x1F1F);
 8000c88:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8000c8c:	202c      	movs	r0, #44	@ 0x2c
 8000c8e:	f7ff ffb9 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_ANA_CTRL, 0x0100);  // DAC seulement
 8000c92:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000c96:	2030      	movs	r0, #48	@ 0x30
 8000c98:	f7ff ffb4 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_DIG_POWER, 0x0073);
 8000c9c:	2173      	movs	r1, #115	@ 0x73
 8000c9e:	2002      	movs	r0, #2
 8000ca0:	f7ff ffb0 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_CLK_CTRL, 0x0004);  // MCLK / 256 = 48 kHz
 8000ca4:	2104      	movs	r1, #4
 8000ca6:	2004      	movs	r0, #4
 8000ca8:	f7ff ffac 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_I2S_CTRL, 0x0130);  // I2S 16 bits, maître
 8000cac:	f44f 7198 	mov.w	r1, #304	@ 0x130
 8000cb0:	2006      	movs	r0, #6
 8000cb2:	f7ff ffa7 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_SSS_CTRL, 0x0002); // I2S_IN → DAC uniquement
 8000cb6:	2102      	movs	r1, #2
 8000cb8:	200a      	movs	r0, #10
 8000cba:	f7ff ffa3 	bl	8000c04 <SGTL5000_WriteRegister>
    SGTL5000_WriteRegister(CHIP_DAC_VOL, 0x7F7F);   // Volume DAC
 8000cbe:	f647 717f 	movw	r1, #32639	@ 0x7f7f
 8000cc2:	2010      	movs	r0, #16
 8000cc4:	f7ff ff9e 	bl	8000c04 <SGTL5000_WriteRegister>


    HAL_Delay(10); // Wait for everything to stabilize
 8000cc8:	200a      	movs	r0, #10
 8000cca:	f000 fbe7 	bl	800149c <HAL_Delay>
}
 8000cce:	bf00      	nop
 8000cd0:	bd80      	pop	{r7, pc}
	...

08000cd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cda:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cdc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cde:	4a0e      	ldr	r2, [pc, #56]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce0:	f043 0301 	orr.w	r3, r3, #1
 8000ce4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cea:	f003 0301 	and.w	r3, r3, #1
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cf2:	4b09      	ldr	r3, [pc, #36]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cf6:	4a08      	ldr	r2, [pc, #32]	@ (8000d18 <HAL_MspInit+0x44>)
 8000cf8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cfc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cfe:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	603b      	str	r3, [r7, #0]
 8000d08:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d0a:	bf00      	nop
 8000d0c:	370c      	adds	r7, #12
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	40021000 	.word	0x40021000

08000d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b0ac      	sub	sp, #176	@ 0xb0
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2288      	movs	r2, #136	@ 0x88
 8000d3a:	2100      	movs	r1, #0
 8000d3c:	4618      	mov	r0, r3
 8000d3e:	f006 fdcf 	bl	80078e0 <memset>
  if(hi2c->Instance==I2C2)
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a21      	ldr	r2, [pc, #132]	@ (8000dcc <HAL_I2C_MspInit+0xb0>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d13b      	bne.n	8000dc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000d4c:	2380      	movs	r3, #128	@ 0x80
 8000d4e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000d50:	2300      	movs	r3, #0
 8000d52:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d54:	f107 0314 	add.w	r3, r7, #20
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 fd45 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000d64:	f7ff ff48 	bl	8000bf8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d68:	4b19      	ldr	r3, [pc, #100]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d6c:	4a18      	ldr	r2, [pc, #96]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000d6e:	f043 0302 	orr.w	r3, r3, #2
 8000d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d74:	4b16      	ldr	r3, [pc, #88]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d78:	f003 0302 	and.w	r3, r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d80:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d88:	2312      	movs	r3, #18
 8000d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da0:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000da4:	4619      	mov	r1, r3
 8000da6:	480b      	ldr	r0, [pc, #44]	@ (8000dd4 <HAL_I2C_MspInit+0xb8>)
 8000da8:	f000 ff24 	bl	8001bf4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000dac:	4b08      	ldr	r3, [pc, #32]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000db0:	4a07      	ldr	r2, [pc, #28]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000db2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <HAL_I2C_MspInit+0xb4>)
 8000dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dbc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000dc4:	bf00      	nop
 8000dc6:	37b0      	adds	r7, #176	@ 0xb0
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40005800 	.word	0x40005800
 8000dd0:	40021000 	.word	0x40021000
 8000dd4:	48000400 	.word	0x48000400

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	@ 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a25      	ldr	r2, [pc, #148]	@ (8000e8c <HAL_SPI_MspInit+0xb4>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d144      	bne.n	8000e84 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dfa:	4b25      	ldr	r3, [pc, #148]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000dfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dfe:	4a24      	ldr	r2, [pc, #144]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e00:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000e04:	6593      	str	r3, [r2, #88]	@ 0x58
 8000e06:	4b22      	ldr	r3, [pc, #136]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000e0a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e12:	4b1f      	ldr	r3, [pc, #124]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e16:	4a1e      	ldr	r2, [pc, #120]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e18:	f043 0304 	orr.w	r3, r3, #4
 8000e1c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e22:	f003 0304 	and.w	r3, r3, #4
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e2a:	4b19      	ldr	r3, [pc, #100]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e2e:	4a18      	ldr	r2, [pc, #96]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e30:	f043 0302 	orr.w	r3, r3, #2
 8000e34:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000e36:	4b16      	ldr	r3, [pc, #88]	@ (8000e90 <HAL_SPI_MspInit+0xb8>)
 8000e38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000e3a:	f003 0302 	and.w	r3, r3, #2
 8000e3e:	60bb      	str	r3, [r7, #8]
 8000e40:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e42:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000e46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e54:	2306      	movs	r3, #6
 8000e56:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	f107 0314 	add.w	r3, r7, #20
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	480d      	ldr	r0, [pc, #52]	@ (8000e94 <HAL_SPI_MspInit+0xbc>)
 8000e60:	f000 fec8 	bl	8001bf4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e64:	2320      	movs	r3, #32
 8000e66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e70:	2303      	movs	r3, #3
 8000e72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e74:	2306      	movs	r3, #6
 8000e76:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e78:	f107 0314 	add.w	r3, r7, #20
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	4806      	ldr	r0, [pc, #24]	@ (8000e98 <HAL_SPI_MspInit+0xc0>)
 8000e80:	f000 feb8 	bl	8001bf4 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e84:	bf00      	nop
 8000e86:	3728      	adds	r7, #40	@ 0x28
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	40003c00 	.word	0x40003c00
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000800 	.word	0x48000800
 8000e98:	48000400 	.word	0x48000400

08000e9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b0ac      	sub	sp, #176	@ 0xb0
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ea4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	601a      	str	r2, [r3, #0]
 8000eac:	605a      	str	r2, [r3, #4]
 8000eae:	609a      	str	r2, [r3, #8]
 8000eb0:	60da      	str	r2, [r3, #12]
 8000eb2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000eb4:	f107 0314 	add.w	r3, r7, #20
 8000eb8:	2288      	movs	r2, #136	@ 0x88
 8000eba:	2100      	movs	r1, #0
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f006 fd0f 	bl	80078e0 <memset>
  if(huart->Instance==USART2)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a25      	ldr	r2, [pc, #148]	@ (8000f5c <HAL_UART_MspInit+0xc0>)
 8000ec8:	4293      	cmp	r3, r2
 8000eca:	d143      	bne.n	8000f54 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ecc:	2302      	movs	r3, #2
 8000ece:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f002 fc85 	bl	80037e8 <HAL_RCCEx_PeriphCLKConfig>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d001      	beq.n	8000ee8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ee4:	f7ff fe88 	bl	8000bf8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ee8:	4b1d      	ldr	r3, [pc, #116]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000eea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000eec:	4a1c      	ldr	r2, [pc, #112]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000eee:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ef2:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ef4:	4b1a      	ldr	r3, [pc, #104]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000ef6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000efc:	613b      	str	r3, [r7, #16]
 8000efe:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f00:	4b17      	ldr	r3, [pc, #92]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f02:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f04:	4a16      	ldr	r2, [pc, #88]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f06:	f043 0301 	orr.w	r3, r3, #1
 8000f0a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f0c:	4b14      	ldr	r3, [pc, #80]	@ (8000f60 <HAL_UART_MspInit+0xc4>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000f18:	230c      	movs	r3, #12
 8000f1a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1e:	2302      	movs	r3, #2
 8000f20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f2a:	2303      	movs	r3, #3
 8000f2c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000f30:	2307      	movs	r3, #7
 8000f32:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f36:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f40:	f000 fe58 	bl	8001bf4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000f44:	2200      	movs	r2, #0
 8000f46:	2100      	movs	r1, #0
 8000f48:	2026      	movs	r0, #38	@ 0x26
 8000f4a:	f000 fba6 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f4e:	2026      	movs	r0, #38	@ 0x26
 8000f50:	f000 fbbf 	bl	80016d2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f54:	bf00      	nop
 8000f56:	37b0      	adds	r7, #176	@ 0xb0
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}
 8000f5c:	40004400 	.word	0x40004400
 8000f60:	40021000 	.word	0x40021000

08000f64 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a64      	ldr	r2, [pc, #400]	@ (8001104 <HAL_SAI_MspInit+0x1a0>)
 8000f72:	4293      	cmp	r3, r2
 8000f74:	d15e      	bne.n	8001034 <HAL_SAI_MspInit+0xd0>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000f76:	4b64      	ldr	r3, [pc, #400]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d113      	bne.n	8000fa6 <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f7e:	4b63      	ldr	r3, [pc, #396]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 8000f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f82:	4a62      	ldr	r2, [pc, #392]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 8000f84:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f8a:	4b60      	ldr	r3, [pc, #384]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 8000f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f8e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000f96:	2200      	movs	r2, #0
 8000f98:	2100      	movs	r1, #0
 8000f9a:	204b      	movs	r0, #75	@ 0x4b
 8000f9c:	f000 fb7d 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000fa0:	204b      	movs	r0, #75	@ 0x4b
 8000fa2:	f000 fb96 	bl	80016d2 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000fa6:	4b58      	ldr	r3, [pc, #352]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	3301      	adds	r3, #1
 8000fac:	4a56      	ldr	r2, [pc, #344]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8000fae:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000fb0:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000fb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000fc2:	230d      	movs	r3, #13
 8000fc4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0314 	add.w	r3, r7, #20
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4850      	ldr	r0, [pc, #320]	@ (8001110 <HAL_SAI_MspInit+0x1ac>)
 8000fce:	f000 fe11 	bl	8001bf4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000fd2:	4b50      	ldr	r3, [pc, #320]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000fd4:	4a50      	ldr	r2, [pc, #320]	@ (8001118 <HAL_SAI_MspInit+0x1b4>)
 8000fd6:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000fd8:	4b4e      	ldr	r3, [pc, #312]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000fda:	2201      	movs	r2, #1
 8000fdc:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000fde:	4b4d      	ldr	r3, [pc, #308]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000fe0:	2210      	movs	r2, #16
 8000fe2:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000fe4:	4b4b      	ldr	r3, [pc, #300]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000fea:	4b4a      	ldr	r3, [pc, #296]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ff0:	4b48      	ldr	r3, [pc, #288]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ff6:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ff8:	4b46      	ldr	r3, [pc, #280]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8000ffa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ffe:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8001000:	4b44      	ldr	r3, [pc, #272]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8001002:	2220      	movs	r2, #32
 8001004:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8001006:	4b43      	ldr	r3, [pc, #268]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 800100c:	4841      	ldr	r0, [pc, #260]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 800100e:	f000 fb7b 	bl	8001708 <HAL_DMA_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8001018:	f7ff fdee 	bl	8000bf8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a3d      	ldr	r2, [pc, #244]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8001020:	671a      	str	r2, [r3, #112]	@ 0x70
 8001022:	4a3c      	ldr	r2, [pc, #240]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	4a3a      	ldr	r2, [pc, #232]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 800102c:	66da      	str	r2, [r3, #108]	@ 0x6c
 800102e:	4a39      	ldr	r2, [pc, #228]	@ (8001114 <HAL_SAI_MspInit+0x1b0>)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6293      	str	r3, [r2, #40]	@ 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a38      	ldr	r2, [pc, #224]	@ (800111c <HAL_SAI_MspInit+0x1b8>)
 800103a:	4293      	cmp	r3, r2
 800103c:	d15e      	bne.n	80010fc <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 800103e:	4b32      	ldr	r3, [pc, #200]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d113      	bne.n	800106e <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8001046:	4b31      	ldr	r3, [pc, #196]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104a:	4a30      	ldr	r2, [pc, #192]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 800104c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001050:	6613      	str	r3, [r2, #96]	@ 0x60
 8001052:	4b2e      	ldr	r3, [pc, #184]	@ (800110c <HAL_SAI_MspInit+0x1a8>)
 8001054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001056:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800105a:	60fb      	str	r3, [r7, #12]
 800105c:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 800105e:	2200      	movs	r2, #0
 8001060:	2100      	movs	r1, #0
 8001062:	204b      	movs	r0, #75	@ 0x4b
 8001064:	f000 fb19 	bl	800169a <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8001068:	204b      	movs	r0, #75	@ 0x4b
 800106a:	f000 fb32 	bl	80016d2 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 800106e:	4b26      	ldr	r3, [pc, #152]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a24      	ldr	r2, [pc, #144]	@ (8001108 <HAL_SAI_MspInit+0x1a4>)
 8001076:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001078:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800107c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107e:	2302      	movs	r3, #2
 8001080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	2300      	movs	r3, #0
 8001088:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800108a:	230d      	movs	r3, #13
 800108c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800108e:	f107 0314 	add.w	r3, r7, #20
 8001092:	4619      	mov	r1, r3
 8001094:	4822      	ldr	r0, [pc, #136]	@ (8001120 <HAL_SAI_MspInit+0x1bc>)
 8001096:	f000 fdad 	bl	8001bf4 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 800109a:	4b22      	ldr	r3, [pc, #136]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 800109c:	4a22      	ldr	r2, [pc, #136]	@ (8001128 <HAL_SAI_MspInit+0x1c4>)
 800109e:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80010a6:	4b1f      	ldr	r3, [pc, #124]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 80010ac:	4b1d      	ldr	r3, [pc, #116]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 80010b2:	4b1c      	ldr	r3, [pc, #112]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010b4:	2280      	movs	r2, #128	@ 0x80
 80010b6:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80010b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010ba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010be:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80010c6:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 80010c8:	4b16      	ldr	r3, [pc, #88]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010ca:	2220      	movs	r2, #32
 80010cc:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 80010ce:	4b15      	ldr	r3, [pc, #84]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 80010d4:	4813      	ldr	r0, [pc, #76]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010d6:	f000 fb17 	bl	8001708 <HAL_DMA_Init>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 80010e0:	f7ff fd8a 	bl	8000bf8 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a0f      	ldr	r2, [pc, #60]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010e8:	671a      	str	r2, [r3, #112]	@ 0x70
 80010ea:	4a0e      	ldr	r2, [pc, #56]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	4a0c      	ldr	r2, [pc, #48]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010f4:	66da      	str	r2, [r3, #108]	@ 0x6c
 80010f6:	4a0b      	ldr	r2, [pc, #44]	@ (8001124 <HAL_SAI_MspInit+0x1c0>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 80010fc:	bf00      	nop
 80010fe:	3728      	adds	r7, #40	@ 0x28
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40015804 	.word	0x40015804
 8001108:	200004f4 	.word	0x200004f4
 800110c:	40021000 	.word	0x40021000
 8001110:	48000400 	.word	0x48000400
 8001114:	200001e0 	.word	0x200001e0
 8001118:	4002006c 	.word	0x4002006c
 800111c:	40015824 	.word	0x40015824
 8001120:	48000800 	.word	0x48000800
 8001124:	20000228 	.word	0x20000228
 8001128:	40020080 	.word	0x40020080

0800112c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001130:	bf00      	nop
 8001132:	e7fd      	b.n	8001130 <NMI_Handler+0x4>

08001134 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001134:	b480      	push	{r7}
 8001136:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001138:	bf00      	nop
 800113a:	e7fd      	b.n	8001138 <HardFault_Handler+0x4>

0800113c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001140:	bf00      	nop
 8001142:	e7fd      	b.n	8001140 <MemManage_Handler+0x4>

08001144 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001148:	bf00      	nop
 800114a:	e7fd      	b.n	8001148 <BusFault_Handler+0x4>

0800114c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <UsageFault_Handler+0x4>

08001154 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800117e:	b580      	push	{r7, lr}
 8001180:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001182:	f000 f96b 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <DMA1_Channel6_IRQHandler+0x10>)
 8001192:	f000 fc50 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001e0 	.word	0x200001e0

080011a0 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 80011a4:	4802      	ldr	r0, [pc, #8]	@ (80011b0 <DMA1_Channel7_IRQHandler+0x10>)
 80011a6:	f000 fc46 	bl	8001a36 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000228 	.word	0x20000228

080011b4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011b8:	4802      	ldr	r0, [pc, #8]	@ (80011c4 <USART2_IRQHandler+0x10>)
 80011ba:	f005 f943 	bl	8006444 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011be:	bf00      	nop
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200002d4 	.word	0x200002d4

080011c8 <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80011cc:	4803      	ldr	r0, [pc, #12]	@ (80011dc <SAI2_IRQHandler+0x14>)
 80011ce:	f004 f8df 	bl	8005390 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80011d2:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <SAI2_IRQHandler+0x18>)
 80011d4:	f004 f8dc 	bl	8005390 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	200000d8 	.word	0x200000d8
 80011e0:	2000015c 	.word	0x2000015c

080011e4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b086      	sub	sp, #24
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	60f8      	str	r0, [r7, #12]
 80011ec:	60b9      	str	r1, [r7, #8]
 80011ee:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
 80011f4:	e00a      	b.n	800120c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80011f6:	f3af 8000 	nop.w
 80011fa:	4601      	mov	r1, r0
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	b2ca      	uxtb	r2, r1
 8001204:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001206:	697b      	ldr	r3, [r7, #20]
 8001208:	3301      	adds	r3, #1
 800120a:	617b      	str	r3, [r7, #20]
 800120c:	697a      	ldr	r2, [r7, #20]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	429a      	cmp	r2, r3
 8001212:	dbf0      	blt.n	80011f6 <_read+0x12>
  }

  return len;
 8001214:	687b      	ldr	r3, [r7, #4]
}
 8001216:	4618      	mov	r0, r3
 8001218:	3718      	adds	r7, #24
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	b086      	sub	sp, #24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800122a:	2300      	movs	r3, #0
 800122c:	617b      	str	r3, [r7, #20]
 800122e:	e009      	b.n	8001244 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	1c5a      	adds	r2, r3, #1
 8001234:	60ba      	str	r2, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff fa29 	bl	8000690 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800123e:	697b      	ldr	r3, [r7, #20]
 8001240:	3301      	adds	r3, #1
 8001242:	617b      	str	r3, [r7, #20]
 8001244:	697a      	ldr	r2, [r7, #20]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	429a      	cmp	r2, r3
 800124a:	dbf1      	blt.n	8001230 <_write+0x12>
  }
  return len;
 800124c:	687b      	ldr	r3, [r7, #4]
}
 800124e:	4618      	mov	r0, r3
 8001250:	3718      	adds	r7, #24
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}

08001256 <_close>:

int _close(int file)
{
 8001256:	b480      	push	{r7}
 8001258:	b083      	sub	sp, #12
 800125a:	af00      	add	r7, sp, #0
 800125c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001262:	4618      	mov	r0, r3
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr

0800126e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800126e:	b480      	push	{r7}
 8001270:	b083      	sub	sp, #12
 8001272:	af00      	add	r7, sp, #0
 8001274:	6078      	str	r0, [r7, #4]
 8001276:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800127e:	605a      	str	r2, [r3, #4]
  return 0;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	370c      	adds	r7, #12
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr

0800128e <_isatty>:

int _isatty(int file)
{
 800128e:	b480      	push	{r7}
 8001290:	b083      	sub	sp, #12
 8001292:	af00      	add	r7, sp, #0
 8001294:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001296:	2301      	movs	r3, #1
}
 8001298:	4618      	mov	r0, r3
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b085      	sub	sp, #20
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	60f8      	str	r0, [r7, #12]
 80012ac:	60b9      	str	r1, [r7, #8]
 80012ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
	...

080012c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b086      	sub	sp, #24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012c8:	4a14      	ldr	r2, [pc, #80]	@ (800131c <_sbrk+0x5c>)
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <_sbrk+0x60>)
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012d4:	4b13      	ldr	r3, [pc, #76]	@ (8001324 <_sbrk+0x64>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d102      	bne.n	80012e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012dc:	4b11      	ldr	r3, [pc, #68]	@ (8001324 <_sbrk+0x64>)
 80012de:	4a12      	ldr	r2, [pc, #72]	@ (8001328 <_sbrk+0x68>)
 80012e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012e2:	4b10      	ldr	r3, [pc, #64]	@ (8001324 <_sbrk+0x64>)
 80012e4:	681a      	ldr	r2, [r3, #0]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4413      	add	r3, r2
 80012ea:	693a      	ldr	r2, [r7, #16]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d207      	bcs.n	8001300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80012f0:	f006 fb44 	bl	800797c <__errno>
 80012f4:	4603      	mov	r3, r0
 80012f6:	220c      	movs	r2, #12
 80012f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295
 80012fe:	e009      	b.n	8001314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001300:	4b08      	ldr	r3, [pc, #32]	@ (8001324 <_sbrk+0x64>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001306:	4b07      	ldr	r3, [pc, #28]	@ (8001324 <_sbrk+0x64>)
 8001308:	681a      	ldr	r2, [r3, #0]
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4413      	add	r3, r2
 800130e:	4a05      	ldr	r2, [pc, #20]	@ (8001324 <_sbrk+0x64>)
 8001310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001312:	68fb      	ldr	r3, [r7, #12]
}
 8001314:	4618      	mov	r0, r3
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	20018000 	.word	0x20018000
 8001320:	00000400 	.word	0x00000400
 8001324:	200004f8 	.word	0x200004f8
 8001328:	20000650 	.word	0x20000650

0800132c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001330:	4b06      	ldr	r3, [pc, #24]	@ (800134c <SystemInit+0x20>)
 8001332:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001336:	4a05      	ldr	r2, [pc, #20]	@ (800134c <SystemInit+0x20>)
 8001338:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800133c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001340:	bf00      	nop
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	e000ed00 	.word	0xe000ed00

08001350 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001350:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001388 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001354:	f7ff ffea 	bl	800132c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001358:	480c      	ldr	r0, [pc, #48]	@ (800138c <LoopForever+0x6>)
  ldr r1, =_edata
 800135a:	490d      	ldr	r1, [pc, #52]	@ (8001390 <LoopForever+0xa>)
  ldr r2, =_sidata
 800135c:	4a0d      	ldr	r2, [pc, #52]	@ (8001394 <LoopForever+0xe>)
  movs r3, #0
 800135e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001360:	e002      	b.n	8001368 <LoopCopyDataInit>

08001362 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001362:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001364:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001366:	3304      	adds	r3, #4

08001368 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001368:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800136a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800136c:	d3f9      	bcc.n	8001362 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800136e:	4a0a      	ldr	r2, [pc, #40]	@ (8001398 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001370:	4c0a      	ldr	r4, [pc, #40]	@ (800139c <LoopForever+0x16>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001374:	e001      	b.n	800137a <LoopFillZerobss>

08001376 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001376:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001378:	3204      	adds	r2, #4

0800137a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800137a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800137c:	d3fb      	bcc.n	8001376 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800137e:	f006 fb03 	bl	8007988 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001382:	f7ff f9b3 	bl	80006ec <main>

08001386 <LoopForever>:

LoopForever:
    b LoopForever
 8001386:	e7fe      	b.n	8001386 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001388:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800138c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001390:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001394:	08008508 	.word	0x08008508
  ldr r2, =_sbss
 8001398:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800139c:	2000064c 	.word	0x2000064c

080013a0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80013a0:	e7fe      	b.n	80013a0 <ADC1_2_IRQHandler>
	...

080013a4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013ae:	4b0c      	ldr	r3, [pc, #48]	@ (80013e0 <HAL_Init+0x3c>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <HAL_Init+0x3c>)
 80013b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80013b8:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ba:	2003      	movs	r0, #3
 80013bc:	f000 f962 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013c0:	2000      	movs	r0, #0
 80013c2:	f000 f80f 	bl	80013e4 <HAL_InitTick>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d002      	beq.n	80013d2 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	71fb      	strb	r3, [r7, #7]
 80013d0:	e001      	b.n	80013d6 <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013d2:	f7ff fc7f 	bl	8000cd4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013d6:	79fb      	ldrb	r3, [r7, #7]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40022000 	.word	0x40022000

080013e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013ec:	2300      	movs	r3, #0
 80013ee:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80013f0:	4b17      	ldr	r3, [pc, #92]	@ (8001450 <HAL_InitTick+0x6c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d023      	beq.n	8001440 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80013f8:	4b16      	ldr	r3, [pc, #88]	@ (8001454 <HAL_InitTick+0x70>)
 80013fa:	681a      	ldr	r2, [r3, #0]
 80013fc:	4b14      	ldr	r3, [pc, #80]	@ (8001450 <HAL_InitTick+0x6c>)
 80013fe:	781b      	ldrb	r3, [r3, #0]
 8001400:	4619      	mov	r1, r3
 8001402:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001406:	fbb3 f3f1 	udiv	r3, r3, r1
 800140a:	fbb2 f3f3 	udiv	r3, r2, r3
 800140e:	4618      	mov	r0, r3
 8001410:	f000 f96d 	bl	80016ee <HAL_SYSTICK_Config>
 8001414:	4603      	mov	r3, r0
 8001416:	2b00      	cmp	r3, #0
 8001418:	d10f      	bne.n	800143a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	2b0f      	cmp	r3, #15
 800141e:	d809      	bhi.n	8001434 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001420:	2200      	movs	r2, #0
 8001422:	6879      	ldr	r1, [r7, #4]
 8001424:	f04f 30ff 	mov.w	r0, #4294967295
 8001428:	f000 f937 	bl	800169a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800142c:	4a0a      	ldr	r2, [pc, #40]	@ (8001458 <HAL_InitTick+0x74>)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	e007      	b.n	8001444 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	73fb      	strb	r3, [r7, #15]
 8001438:	e004      	b.n	8001444 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	73fb      	strb	r3, [r7, #15]
 800143e:	e001      	b.n	8001444 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001444:	7bfb      	ldrb	r3, [r7, #15]
}
 8001446:	4618      	mov	r0, r3
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	20000008 	.word	0x20000008
 8001454:	20000000 	.word	0x20000000
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	@ (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	@ (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200004fc 	.word	0x200004fc

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	@ (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200004fc 	.word	0x200004fc

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80014b6:	4b0a      	ldr	r3, [pc, #40]	@ (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	@ (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	@ (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	@ (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	@ (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	@ (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	@ 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	@ 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	@ (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	@ (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	@ (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001708:	b480      	push	{r7}
 800170a:	b085      	sub	sp, #20
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d101      	bne.n	800171a <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001716:	2301      	movs	r3, #1
 8001718:	e098      	b.n	800184c <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	461a      	mov	r2, r3
 8001720:	4b4d      	ldr	r3, [pc, #308]	@ (8001858 <HAL_DMA_Init+0x150>)
 8001722:	429a      	cmp	r2, r3
 8001724:	d80f      	bhi.n	8001746 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	461a      	mov	r2, r3
 800172c:	4b4b      	ldr	r3, [pc, #300]	@ (800185c <HAL_DMA_Init+0x154>)
 800172e:	4413      	add	r3, r2
 8001730:	4a4b      	ldr	r2, [pc, #300]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001732:	fba2 2303 	umull	r2, r3, r2, r3
 8001736:	091b      	lsrs	r3, r3, #4
 8001738:	009a      	lsls	r2, r3, #2
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4a48      	ldr	r2, [pc, #288]	@ (8001864 <HAL_DMA_Init+0x15c>)
 8001742:	641a      	str	r2, [r3, #64]	@ 0x40
 8001744:	e00e      	b.n	8001764 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	461a      	mov	r2, r3
 800174c:	4b46      	ldr	r3, [pc, #280]	@ (8001868 <HAL_DMA_Init+0x160>)
 800174e:	4413      	add	r3, r2
 8001750:	4a43      	ldr	r2, [pc, #268]	@ (8001860 <HAL_DMA_Init+0x158>)
 8001752:	fba2 2303 	umull	r2, r3, r2, r3
 8001756:	091b      	lsrs	r3, r3, #4
 8001758:	009a      	lsls	r2, r3, #2
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4a42      	ldr	r2, [pc, #264]	@ (800186c <HAL_DMA_Init+0x164>)
 8001762:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2202      	movs	r2, #2
 8001768:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800177a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800177e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001788:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	691b      	ldr	r3, [r3, #16]
 800178e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001794:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80017a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6a1b      	ldr	r3, [r3, #32]
 80017a6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	4313      	orrs	r3, r2
 80017ac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80017be:	d039      	beq.n	8001834 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c4:	4a27      	ldr	r2, [pc, #156]	@ (8001864 <HAL_DMA_Init+0x15c>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d11a      	bne.n	8001800 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80017ca:	4b29      	ldr	r3, [pc, #164]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017cc:	681a      	ldr	r2, [r3, #0]
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d2:	f003 031c 	and.w	r3, r3, #28
 80017d6:	210f      	movs	r1, #15
 80017d8:	fa01 f303 	lsl.w	r3, r1, r3
 80017dc:	43db      	mvns	r3, r3
 80017de:	4924      	ldr	r1, [pc, #144]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017e0:	4013      	ands	r3, r2
 80017e2:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80017e4:	4b22      	ldr	r3, [pc, #136]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f0:	f003 031c 	and.w	r3, r3, #28
 80017f4:	fa01 f303 	lsl.w	r3, r1, r3
 80017f8:	491d      	ldr	r1, [pc, #116]	@ (8001870 <HAL_DMA_Init+0x168>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
 80017fe:	e019      	b.n	8001834 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001800:	4b1c      	ldr	r3, [pc, #112]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001808:	f003 031c 	and.w	r3, r3, #28
 800180c:	210f      	movs	r1, #15
 800180e:	fa01 f303 	lsl.w	r3, r1, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	4917      	ldr	r1, [pc, #92]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001816:	4013      	ands	r3, r2
 8001818:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800181a:	4b16      	ldr	r3, [pc, #88]	@ (8001874 <HAL_DMA_Init+0x16c>)
 800181c:	681a      	ldr	r2, [r3, #0]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6859      	ldr	r1, [r3, #4]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	f003 031c 	and.w	r3, r3, #28
 800182a:	fa01 f303 	lsl.w	r3, r1, r3
 800182e:	4911      	ldr	r1, [pc, #68]	@ (8001874 <HAL_DMA_Init+0x16c>)
 8001830:	4313      	orrs	r3, r2
 8001832:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	2200      	movs	r2, #0
 8001838:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	2201      	movs	r2, #1
 800183e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800184a:	2300      	movs	r3, #0
}
 800184c:	4618      	mov	r0, r3
 800184e:	3714      	adds	r7, #20
 8001850:	46bd      	mov	sp, r7
 8001852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001856:	4770      	bx	lr
 8001858:	40020407 	.word	0x40020407
 800185c:	bffdfff8 	.word	0xbffdfff8
 8001860:	cccccccd 	.word	0xcccccccd
 8001864:	40020000 	.word	0x40020000
 8001868:	bffdfbf8 	.word	0xbffdfbf8
 800186c:	40020400 	.word	0x40020400
 8001870:	400200a8 	.word	0x400200a8
 8001874:	400204a8 	.word	0x400204a8

08001878 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b086      	sub	sp, #24
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001886:	2300      	movs	r3, #0
 8001888:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001890:	2b01      	cmp	r3, #1
 8001892:	d101      	bne.n	8001898 <HAL_DMA_Start_IT+0x20>
 8001894:	2302      	movs	r3, #2
 8001896:	e04b      	b.n	8001930 <HAL_DMA_Start_IT+0xb8>
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	2b01      	cmp	r3, #1
 80018aa:	d13a      	bne.n	8001922 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2202      	movs	r2, #2
 80018b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2200      	movs	r2, #0
 80018b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	681a      	ldr	r2, [r3, #0]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f022 0201 	bic.w	r2, r2, #1
 80018c8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	68b9      	ldr	r1, [r7, #8]
 80018d0:	68f8      	ldr	r0, [r7, #12]
 80018d2:	f000 f95f 	bl	8001b94 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d008      	beq.n	80018f0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	681a      	ldr	r2, [r3, #0]
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f042 020e 	orr.w	r2, r2, #14
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	e00f      	b.n	8001910 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 0204 	bic.w	r2, r2, #4
 80018fe:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f042 020a 	orr.w	r2, r2, #10
 800190e:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	681a      	ldr	r2, [r3, #0]
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f042 0201 	orr.w	r2, r2, #1
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	e005      	b.n	800192e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2200      	movs	r2, #0
 8001926:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800192a:	2302      	movs	r3, #2
 800192c:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800192e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001930:	4618      	mov	r0, r3
 8001932:	3718      	adds	r7, #24
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001940:	2300      	movs	r3, #0
 8001942:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800194a:	b2db      	uxtb	r3, r3
 800194c:	2b02      	cmp	r3, #2
 800194e:	d008      	beq.n	8001962 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	2204      	movs	r2, #4
 8001954:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	2200      	movs	r2, #0
 800195a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800195e:	2301      	movs	r3, #1
 8001960:	e022      	b.n	80019a8 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 020e 	bic.w	r2, r2, #14
 8001970:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	681a      	ldr	r2, [r3, #0]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f022 0201 	bic.w	r2, r2, #1
 8001980:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001986:	f003 021c 	and.w	r2, r3, #28
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198e:	2101      	movs	r1, #1
 8001990:	fa01 f202 	lsl.w	r2, r1, r2
 8001994:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2201      	movs	r2, #1
 800199a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80019a6:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80019a8:	4618      	mov	r0, r3
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr

080019b4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019bc:	2300      	movs	r3, #0
 80019be:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80019c6:	b2db      	uxtb	r3, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d005      	beq.n	80019d8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2204      	movs	r2, #4
 80019d0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
 80019d6:	e029      	b.n	8001a2c <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f022 020e 	bic.w	r2, r2, #14
 80019e6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	f022 0201 	bic.w	r2, r2, #1
 80019f6:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019fc:	f003 021c 	and.w	r2, r3, #28
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d003      	beq.n	8001a2c <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	4798      	blx	r3
    }
  }
  return status;
 8001a2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3710      	adds	r7, #16
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b084      	sub	sp, #16
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a52:	f003 031c 	and.w	r3, r3, #28
 8001a56:	2204      	movs	r2, #4
 8001a58:	409a      	lsls	r2, r3
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d026      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	f003 0304 	and.w	r3, r3, #4
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d021      	beq.n	8001ab0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d107      	bne.n	8001a8a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f022 0204 	bic.w	r2, r2, #4
 8001a88:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f003 021c 	and.w	r2, r3, #28
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a96:	2104      	movs	r1, #4
 8001a98:	fa01 f202 	lsl.w	r2, r1, r2
 8001a9c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d071      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aaa:	6878      	ldr	r0, [r7, #4]
 8001aac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001aae:	e06c      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ab4:	f003 031c 	and.w	r3, r3, #28
 8001ab8:	2202      	movs	r2, #2
 8001aba:	409a      	lsls	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	4013      	ands	r3, r2
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d02e      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	f003 0302 	and.w	r3, r3, #2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d029      	beq.n	8001b22 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0320 	and.w	r3, r3, #32
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d10b      	bne.n	8001af4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	f022 020a 	bic.w	r2, r2, #10
 8001aea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2201      	movs	r2, #1
 8001af0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001af8:	f003 021c 	and.w	r2, r3, #28
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b00:	2102      	movs	r1, #2
 8001b02:	fa01 f202 	lsl.w	r2, r1, r2
 8001b06:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d038      	beq.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b1c:	6878      	ldr	r0, [r7, #4]
 8001b1e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001b20:	e033      	b.n	8001b8a <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b26:	f003 031c 	and.w	r3, r3, #28
 8001b2a:	2208      	movs	r2, #8
 8001b2c:	409a      	lsls	r2, r3
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	4013      	ands	r3, r2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d02a      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
 8001b36:	68bb      	ldr	r3, [r7, #8]
 8001b38:	f003 0308 	and.w	r3, r3, #8
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d025      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b54:	f003 021c 	and.w	r2, r3, #28
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b62:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2201      	movs	r2, #1
 8001b68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d004      	beq.n	8001b8c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001b8a:	bf00      	nop
 8001b8c:	bf00      	nop
}
 8001b8e:	3710      	adds	r7, #16
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b085      	sub	sp, #20
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	60f8      	str	r0, [r7, #12]
 8001b9c:	60b9      	str	r1, [r7, #8]
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ba6:	f003 021c 	and.w	r2, r3, #28
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bae:	2101      	movs	r1, #1
 8001bb0:	fa01 f202 	lsl.w	r2, r1, r2
 8001bb4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	683a      	ldr	r2, [r7, #0]
 8001bbc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	689b      	ldr	r3, [r3, #8]
 8001bc2:	2b10      	cmp	r3, #16
 8001bc4:	d108      	bne.n	8001bd8 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001bd6:	e007      	b.n	8001be8 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	687a      	ldr	r2, [r7, #4]
 8001be6:	60da      	str	r2, [r3, #12]
}
 8001be8:	bf00      	nop
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr

08001bf4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	b087      	sub	sp, #28
 8001bf8:	af00      	add	r7, sp, #0
 8001bfa:	6078      	str	r0, [r7, #4]
 8001bfc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c02:	e17f      	b.n	8001f04 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	2101      	movs	r1, #1
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c10:	4013      	ands	r3, r2
 8001c12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	f000 8171 	beq.w	8001efe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d005      	beq.n	8001c34 <HAL_GPIO_Init+0x40>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	2b02      	cmp	r3, #2
 8001c32:	d130      	bne.n	8001c96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	2203      	movs	r2, #3
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	43db      	mvns	r3, r3
 8001c46:	693a      	ldr	r2, [r7, #16]
 8001c48:	4013      	ands	r3, r2
 8001c4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	005b      	lsls	r3, r3, #1
 8001c54:	fa02 f303 	lsl.w	r3, r2, r3
 8001c58:	693a      	ldr	r2, [r7, #16]
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	693a      	ldr	r2, [r7, #16]
 8001c62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	4013      	ands	r3, r2
 8001c78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	091b      	lsrs	r3, r3, #4
 8001c80:	f003 0201 	and.w	r2, r3, #1
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	693a      	ldr	r2, [r7, #16]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f003 0303 	and.w	r3, r3, #3
 8001c9e:	2b03      	cmp	r3, #3
 8001ca0:	d118      	bne.n	8001cd4 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ca6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001ca8:	2201      	movs	r2, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	08db      	lsrs	r3, r3, #3
 8001cbe:	f003 0201 	and.w	r2, r3, #1
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc8:	693a      	ldr	r2, [r7, #16]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	693a      	ldr	r2, [r7, #16]
 8001cd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	2b03      	cmp	r3, #3
 8001cde:	d017      	beq.n	8001d10 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	2203      	movs	r2, #3
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	43db      	mvns	r3, r3
 8001cf2:	693a      	ldr	r2, [r7, #16]
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	689a      	ldr	r2, [r3, #8]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	693a      	ldr	r2, [r7, #16]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	693a      	ldr	r2, [r7, #16]
 8001d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b02      	cmp	r3, #2
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d2a:	697b      	ldr	r3, [r7, #20]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	693a      	ldr	r2, [r7, #16]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	6939      	ldr	r1, [r7, #16]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	693a      	ldr	r2, [r7, #16]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	693a      	ldr	r2, [r7, #16]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ac 	beq.w	8001efe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	4b5f      	ldr	r3, [pc, #380]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001da8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001daa:	4a5e      	ldr	r2, [pc, #376]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001dac:	f043 0301 	orr.w	r3, r3, #1
 8001db0:	6613      	str	r3, [r2, #96]	@ 0x60
 8001db2:	4b5c      	ldr	r3, [pc, #368]	@ (8001f24 <HAL_GPIO_Init+0x330>)
 8001db4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	60bb      	str	r3, [r7, #8]
 8001dbc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dbe:	4a5a      	ldr	r2, [pc, #360]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	089b      	lsrs	r3, r3, #2
 8001dc4:	3302      	adds	r3, #2
 8001dc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dcc:	697b      	ldr	r3, [r7, #20]
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	009b      	lsls	r3, r3, #2
 8001dd4:	220f      	movs	r2, #15
 8001dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	693a      	ldr	r2, [r7, #16]
 8001dde:	4013      	ands	r3, r2
 8001de0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001de8:	d025      	beq.n	8001e36 <HAL_GPIO_Init+0x242>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a4f      	ldr	r2, [pc, #316]	@ (8001f2c <HAL_GPIO_Init+0x338>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d01f      	beq.n	8001e32 <HAL_GPIO_Init+0x23e>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4e      	ldr	r2, [pc, #312]	@ (8001f30 <HAL_GPIO_Init+0x33c>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d019      	beq.n	8001e2e <HAL_GPIO_Init+0x23a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4d      	ldr	r2, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x340>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d013      	beq.n	8001e2a <HAL_GPIO_Init+0x236>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4c      	ldr	r2, [pc, #304]	@ (8001f38 <HAL_GPIO_Init+0x344>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00d      	beq.n	8001e26 <HAL_GPIO_Init+0x232>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4b      	ldr	r2, [pc, #300]	@ (8001f3c <HAL_GPIO_Init+0x348>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <HAL_GPIO_Init+0x22e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4a      	ldr	r2, [pc, #296]	@ (8001f40 <HAL_GPIO_Init+0x34c>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d101      	bne.n	8001e1e <HAL_GPIO_Init+0x22a>
 8001e1a:	2306      	movs	r3, #6
 8001e1c:	e00c      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e1e:	2307      	movs	r3, #7
 8001e20:	e00a      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e22:	2305      	movs	r3, #5
 8001e24:	e008      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e26:	2304      	movs	r3, #4
 8001e28:	e006      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e004      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e2e:	2302      	movs	r3, #2
 8001e30:	e002      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_GPIO_Init+0x244>
 8001e36:	2300      	movs	r3, #0
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	f002 0203 	and.w	r2, r2, #3
 8001e3e:	0092      	lsls	r2, r2, #2
 8001e40:	4093      	lsls	r3, r2
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e48:	4937      	ldr	r1, [pc, #220]	@ (8001f28 <HAL_GPIO_Init+0x334>)
 8001e4a:	697b      	ldr	r3, [r7, #20]
 8001e4c:	089b      	lsrs	r3, r3, #2
 8001e4e:	3302      	adds	r3, #2
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e56:	4b3b      	ldr	r3, [pc, #236]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	43db      	mvns	r3, r3
 8001e60:	693a      	ldr	r2, [r7, #16]
 8001e62:	4013      	ands	r3, r2
 8001e64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d003      	beq.n	8001e7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001e72:	693a      	ldr	r2, [r7, #16]
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e7a:	4a32      	ldr	r2, [pc, #200]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e80:	4b30      	ldr	r3, [pc, #192]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001e82:	68db      	ldr	r3, [r3, #12]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ea4:	4a27      	ldr	r2, [pc, #156]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001eaa:	4b26      	ldr	r3, [pc, #152]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ece:	4a1d      	ldr	r2, [pc, #116]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ed4:	4b1b      	ldr	r3, [pc, #108]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ef8:	4a12      	ldr	r2, [pc, #72]	@ (8001f44 <HAL_GPIO_Init+0x350>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001efe:	697b      	ldr	r3, [r7, #20]
 8001f00:	3301      	adds	r3, #1
 8001f02:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	f47f ae78 	bne.w	8001c04 <HAL_GPIO_Init+0x10>
  }
}
 8001f14:	bf00      	nop
 8001f16:	bf00      	nop
 8001f18:	371c      	adds	r7, #28
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr
 8001f22:	bf00      	nop
 8001f24:	40021000 	.word	0x40021000
 8001f28:	40010000 	.word	0x40010000
 8001f2c:	48000400 	.word	0x48000400
 8001f30:	48000800 	.word	0x48000800
 8001f34:	48000c00 	.word	0x48000c00
 8001f38:	48001000 	.word	0x48001000
 8001f3c:	48001400 	.word	0x48001400
 8001f40:	48001800 	.word	0x48001800
 8001f44:	40010400 	.word	0x40010400

08001f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	460b      	mov	r3, r1
 8001f52:	807b      	strh	r3, [r7, #2]
 8001f54:	4613      	mov	r3, r2
 8001f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f58:	787b      	ldrb	r3, [r7, #1]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d003      	beq.n	8001f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f5e:	887a      	ldrh	r2, [r7, #2]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f64:	e002      	b.n	8001f6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f66:	887a      	ldrh	r2, [r7, #2]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b082      	sub	sp, #8
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d101      	bne.n	8001f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e08d      	b.n	80020a6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f7fe febc 	bl	8000d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2224      	movs	r2, #36	@ 0x24
 8001fa8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f022 0201 	bic.w	r2, r2, #1
 8001fba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001fd8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	68db      	ldr	r3, [r3, #12]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689a      	ldr	r2, [r3, #8]
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	e006      	b.n	8002000 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689a      	ldr	r2, [r3, #8]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001ffe:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	2b02      	cmp	r3, #2
 8002006:	d108      	bne.n	800201a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685a      	ldr	r2, [r3, #4]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002016:	605a      	str	r2, [r3, #4]
 8002018:	e007      	b.n	800202a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	685a      	ldr	r2, [r3, #4]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002028:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	6812      	ldr	r2, [r2, #0]
 8002034:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002038:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800203c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	68da      	ldr	r2, [r3, #12]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800204c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	691a      	ldr	r2, [r3, #16]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	699b      	ldr	r3, [r3, #24]
 800205e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	430a      	orrs	r2, r1
 8002066:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	69d9      	ldr	r1, [r3, #28]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	6a1a      	ldr	r2, [r3, #32]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681a      	ldr	r2, [r3, #0]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f042 0201 	orr.w	r2, r2, #1
 8002086:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	2200      	movs	r2, #0
 800208c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2220      	movs	r2, #32
 8002092:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2200      	movs	r2, #0
 80020a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
	...

080020b0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b088      	sub	sp, #32
 80020b4:	af02      	add	r7, sp, #8
 80020b6:	60f8      	str	r0, [r7, #12]
 80020b8:	607a      	str	r2, [r7, #4]
 80020ba:	461a      	mov	r2, r3
 80020bc:	460b      	mov	r3, r1
 80020be:	817b      	strh	r3, [r7, #10]
 80020c0:	4613      	mov	r3, r2
 80020c2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	f040 80fd 	bne.w	80022cc <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_I2C_Master_Transmit+0x30>
 80020dc:	2302      	movs	r3, #2
 80020de:	e0f6      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80020e8:	f7ff f9cc 	bl	8001484 <HAL_GetTick>
 80020ec:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	2319      	movs	r3, #25
 80020f4:	2201      	movs	r2, #1
 80020f6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 fa82 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e0e1      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	2221      	movs	r2, #33	@ 0x21
 800210e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2210      	movs	r2, #16
 8002116:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2200      	movs	r2, #0
 800211e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	893a      	ldrh	r2, [r7, #8]
 800212a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	2200      	movs	r2, #0
 8002130:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002136:	b29b      	uxth	r3, r3
 8002138:	2bff      	cmp	r3, #255	@ 0xff
 800213a:	d906      	bls.n	800214a <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	22ff      	movs	r2, #255	@ 0xff
 8002140:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8002142:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	e007      	b.n	800215a <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800214e:	b29a      	uxth	r2, r3
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8002154:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002158:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800215e:	2b00      	cmp	r3, #0
 8002160:	d024      	beq.n	80021ac <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800217c:	b29b      	uxth	r3, r3
 800217e:	3b01      	subs	r3, #1
 8002180:	b29a      	uxth	r2, r3
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800218a:	3b01      	subs	r3, #1
 800218c:	b29a      	uxth	r2, r3
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002196:	b2db      	uxtb	r3, r3
 8002198:	3301      	adds	r3, #1
 800219a:	b2da      	uxtb	r2, r3
 800219c:	8979      	ldrh	r1, [r7, #10]
 800219e:	4b4e      	ldr	r3, [pc, #312]	@ (80022d8 <HAL_I2C_Master_Transmit+0x228>)
 80021a0:	9300      	str	r3, [sp, #0]
 80021a2:	697b      	ldr	r3, [r7, #20]
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f000 fbf1 	bl	800298c <I2C_TransferConfig>
 80021aa:	e066      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021b0:	b2da      	uxtb	r2, r3
 80021b2:	8979      	ldrh	r1, [r7, #10]
 80021b4:	4b48      	ldr	r3, [pc, #288]	@ (80022d8 <HAL_I2C_Master_Transmit+0x228>)
 80021b6:	9300      	str	r3, [sp, #0]
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	68f8      	ldr	r0, [r7, #12]
 80021bc:	f000 fbe6 	bl	800298c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80021c0:	e05b      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021c2:	693a      	ldr	r2, [r7, #16]
 80021c4:	6a39      	ldr	r1, [r7, #32]
 80021c6:	68f8      	ldr	r0, [r7, #12]
 80021c8:	f000 fa75 	bl	80026b6 <I2C_WaitOnTXISFlagUntilTimeout>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e07b      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021da:	781a      	ldrb	r2, [r3, #0]
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80021fe:	3b01      	subs	r3, #1
 8002200:	b29a      	uxth	r2, r3
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800220a:	b29b      	uxth	r3, r3
 800220c:	2b00      	cmp	r3, #0
 800220e:	d034      	beq.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002214:	2b00      	cmp	r3, #0
 8002216:	d130      	bne.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	9300      	str	r3, [sp, #0]
 800221c:	6a3b      	ldr	r3, [r7, #32]
 800221e:	2200      	movs	r2, #0
 8002220:	2180      	movs	r1, #128	@ 0x80
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	f000 f9ee 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d001      	beq.n	8002232 <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e04d      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002236:	b29b      	uxth	r3, r3
 8002238:	2bff      	cmp	r3, #255	@ 0xff
 800223a:	d90e      	bls.n	800225a <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	22ff      	movs	r2, #255	@ 0xff
 8002240:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002246:	b2da      	uxtb	r2, r3
 8002248:	8979      	ldrh	r1, [r7, #10]
 800224a:	2300      	movs	r3, #0
 800224c:	9300      	str	r3, [sp, #0]
 800224e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f000 fb9a 	bl	800298c <I2C_TransferConfig>
 8002258:	e00f      	b.n	800227a <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800225e:	b29a      	uxth	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002268:	b2da      	uxtb	r2, r3
 800226a:	8979      	ldrh	r1, [r7, #10]
 800226c:	2300      	movs	r3, #0
 800226e:	9300      	str	r3, [sp, #0]
 8002270:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002274:	68f8      	ldr	r0, [r7, #12]
 8002276:	f000 fb89 	bl	800298c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800227e:	b29b      	uxth	r3, r3
 8002280:	2b00      	cmp	r3, #0
 8002282:	d19e      	bne.n	80021c2 <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	6a39      	ldr	r1, [r7, #32]
 8002288:	68f8      	ldr	r0, [r7, #12]
 800228a:	f000 fa5b 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 800228e:	4603      	mov	r3, r0
 8002290:	2b00      	cmp	r3, #0
 8002292:	d001      	beq.n	8002298 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e01a      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2220      	movs	r2, #32
 800229e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6859      	ldr	r1, [r3, #4]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	4b0c      	ldr	r3, [pc, #48]	@ (80022dc <HAL_I2C_Master_Transmit+0x22c>)
 80022ac:	400b      	ands	r3, r1
 80022ae:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	2220      	movs	r2, #32
 80022b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2200      	movs	r2, #0
 80022bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	2200      	movs	r2, #0
 80022c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022c8:	2300      	movs	r3, #0
 80022ca:	e000      	b.n	80022ce <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 80022cc:	2302      	movs	r3, #2
  }
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3718      	adds	r7, #24
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	80002000 	.word	0x80002000
 80022dc:	fe00e800 	.word	0xfe00e800

080022e0 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	4608      	mov	r0, r1
 80022ea:	4611      	mov	r1, r2
 80022ec:	461a      	mov	r2, r3
 80022ee:	4603      	mov	r3, r0
 80022f0:	817b      	strh	r3, [r7, #10]
 80022f2:	460b      	mov	r3, r1
 80022f4:	813b      	strh	r3, [r7, #8]
 80022f6:	4613      	mov	r3, r2
 80022f8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002300:	b2db      	uxtb	r3, r3
 8002302:	2b20      	cmp	r3, #32
 8002304:	f040 80fd 	bne.w	8002502 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8002308:	6a3b      	ldr	r3, [r7, #32]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d002      	beq.n	8002314 <HAL_I2C_Mem_Read+0x34>
 800230e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002310:	2b00      	cmp	r3, #0
 8002312:	d105      	bne.n	8002320 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800231a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e0f1      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002326:	2b01      	cmp	r3, #1
 8002328:	d101      	bne.n	800232e <HAL_I2C_Mem_Read+0x4e>
 800232a:	2302      	movs	r3, #2
 800232c:	e0ea      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002336:	f7ff f8a5 	bl	8001484 <HAL_GetTick>
 800233a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002348:	68f8      	ldr	r0, [r7, #12]
 800234a:	f000 f95b 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8002354:	2301      	movs	r3, #1
 8002356:	e0d5      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	2222      	movs	r2, #34	@ 0x22
 800235c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	2240      	movs	r2, #64	@ 0x40
 8002364:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	2200      	movs	r2, #0
 800236c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	6a3a      	ldr	r2, [r7, #32]
 8002372:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002378:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2200      	movs	r2, #0
 800237e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002380:	88f8      	ldrh	r0, [r7, #6]
 8002382:	893a      	ldrh	r2, [r7, #8]
 8002384:	8979      	ldrh	r1, [r7, #10]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	9301      	str	r3, [sp, #4]
 800238a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800238c:	9300      	str	r3, [sp, #0]
 800238e:	4603      	mov	r3, r0
 8002390:	68f8      	ldr	r0, [r7, #12]
 8002392:	f000 f8bf 	bl	8002514 <I2C_RequestMemoryRead>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d005      	beq.n	80023a8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0ad      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	2bff      	cmp	r3, #255	@ 0xff
 80023b0:	d90e      	bls.n	80023d0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	2201      	movs	r2, #1
 80023b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	8979      	ldrh	r1, [r7, #10]
 80023c0:	4b52      	ldr	r3, [pc, #328]	@ (800250c <HAL_I2C_Mem_Read+0x22c>)
 80023c2:	9300      	str	r3, [sp, #0]
 80023c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80023c8:	68f8      	ldr	r0, [r7, #12]
 80023ca:	f000 fadf 	bl	800298c <I2C_TransferConfig>
 80023ce:	e00f      	b.n	80023f0 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	8979      	ldrh	r1, [r7, #10]
 80023e2:	4b4a      	ldr	r3, [pc, #296]	@ (800250c <HAL_I2C_Mem_Read+0x22c>)
 80023e4:	9300      	str	r3, [sp, #0]
 80023e6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80023ea:	68f8      	ldr	r0, [r7, #12]
 80023ec:	f000 face 	bl	800298c <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	9300      	str	r3, [sp, #0]
 80023f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023f6:	2200      	movs	r2, #0
 80023f8:	2104      	movs	r1, #4
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f902 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 8002400:	4603      	mov	r3, r0
 8002402:	2b00      	cmp	r3, #0
 8002404:	d001      	beq.n	800240a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e07c      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002414:	b2d2      	uxtb	r2, r2
 8002416:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	1c5a      	adds	r2, r3, #1
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002426:	3b01      	subs	r3, #1
 8002428:	b29a      	uxth	r2, r3
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002432:	b29b      	uxth	r3, r3
 8002434:	3b01      	subs	r3, #1
 8002436:	b29a      	uxth	r2, r3
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002440:	b29b      	uxth	r3, r3
 8002442:	2b00      	cmp	r3, #0
 8002444:	d034      	beq.n	80024b0 <HAL_I2C_Mem_Read+0x1d0>
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800244a:	2b00      	cmp	r3, #0
 800244c:	d130      	bne.n	80024b0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	9300      	str	r3, [sp, #0]
 8002452:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002454:	2200      	movs	r2, #0
 8002456:	2180      	movs	r1, #128	@ 0x80
 8002458:	68f8      	ldr	r0, [r7, #12]
 800245a:	f000 f8d3 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d001      	beq.n	8002468 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	e04d      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800246c:	b29b      	uxth	r3, r3
 800246e:	2bff      	cmp	r3, #255	@ 0xff
 8002470:	d90e      	bls.n	8002490 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	2201      	movs	r2, #1
 8002476:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247c:	b2da      	uxtb	r2, r3
 800247e:	8979      	ldrh	r1, [r7, #10]
 8002480:	2300      	movs	r3, #0
 8002482:	9300      	str	r3, [sp, #0]
 8002484:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002488:	68f8      	ldr	r0, [r7, #12]
 800248a:	f000 fa7f 	bl	800298c <I2C_TransferConfig>
 800248e:	e00f      	b.n	80024b0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002494:	b29a      	uxth	r2, r3
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	2300      	movs	r3, #0
 80024a4:	9300      	str	r3, [sp, #0]
 80024a6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80024aa:	68f8      	ldr	r0, [r7, #12]
 80024ac:	f000 fa6e 	bl	800298c <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d19a      	bne.n	80023f0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024ba:	697a      	ldr	r2, [r7, #20]
 80024bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f000 f940 	bl	8002744 <I2C_WaitOnSTOPFlagUntilTimeout>
 80024c4:	4603      	mov	r3, r0
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e01a      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	2220      	movs	r2, #32
 80024d4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	6859      	ldr	r1, [r3, #4]
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4b0b      	ldr	r3, [pc, #44]	@ (8002510 <HAL_I2C_Mem_Read+0x230>)
 80024e2:	400b      	ands	r3, r1
 80024e4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80024fe:	2300      	movs	r3, #0
 8002500:	e000      	b.n	8002504 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002502:	2302      	movs	r3, #2
  }
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	80002400 	.word	0x80002400
 8002510:	fe00e800 	.word	0xfe00e800

08002514 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b086      	sub	sp, #24
 8002518:	af02      	add	r7, sp, #8
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	4608      	mov	r0, r1
 800251e:	4611      	mov	r1, r2
 8002520:	461a      	mov	r2, r3
 8002522:	4603      	mov	r3, r0
 8002524:	817b      	strh	r3, [r7, #10]
 8002526:	460b      	mov	r3, r1
 8002528:	813b      	strh	r3, [r7, #8]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	b2da      	uxtb	r2, r3
 8002532:	8979      	ldrh	r1, [r7, #10]
 8002534:	4b20      	ldr	r3, [pc, #128]	@ (80025b8 <I2C_RequestMemoryRead+0xa4>)
 8002536:	9300      	str	r3, [sp, #0]
 8002538:	2300      	movs	r3, #0
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 fa26 	bl	800298c <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002540:	69fa      	ldr	r2, [r7, #28]
 8002542:	69b9      	ldr	r1, [r7, #24]
 8002544:	68f8      	ldr	r0, [r7, #12]
 8002546:	f000 f8b6 	bl	80026b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800254a:	4603      	mov	r3, r0
 800254c:	2b00      	cmp	r3, #0
 800254e:	d001      	beq.n	8002554 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002550:	2301      	movs	r3, #1
 8002552:	e02c      	b.n	80025ae <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002554:	88fb      	ldrh	r3, [r7, #6]
 8002556:	2b01      	cmp	r3, #1
 8002558:	d105      	bne.n	8002566 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800255a:	893b      	ldrh	r3, [r7, #8]
 800255c:	b2da      	uxtb	r2, r3
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	629a      	str	r2, [r3, #40]	@ 0x28
 8002564:	e015      	b.n	8002592 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002566:	893b      	ldrh	r3, [r7, #8]
 8002568:	0a1b      	lsrs	r3, r3, #8
 800256a:	b29b      	uxth	r3, r3
 800256c:	b2da      	uxtb	r2, r3
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	69b9      	ldr	r1, [r7, #24]
 8002578:	68f8      	ldr	r0, [r7, #12]
 800257a:	f000 f89c 	bl	80026b6 <I2C_WaitOnTXISFlagUntilTimeout>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d001      	beq.n	8002588 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e012      	b.n	80025ae <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002588:	893b      	ldrh	r3, [r7, #8]
 800258a:	b2da      	uxtb	r2, r3
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	9300      	str	r3, [sp, #0]
 8002596:	69bb      	ldr	r3, [r7, #24]
 8002598:	2200      	movs	r2, #0
 800259a:	2140      	movs	r1, #64	@ 0x40
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f000 f831 	bl	8002604 <I2C_WaitOnFlagUntilTimeout>
 80025a2:	4603      	mov	r3, r0
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d001      	beq.n	80025ac <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e000      	b.n	80025ae <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80025ac:	2300      	movs	r3, #0
}
 80025ae:	4618      	mov	r0, r3
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	80002000 	.word	0x80002000

080025bc <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	699b      	ldr	r3, [r3, #24]
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d103      	bne.n	80025da <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	2200      	movs	r2, #0
 80025d8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	f003 0301 	and.w	r3, r3, #1
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d007      	beq.n	80025f8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f042 0201 	orr.w	r2, r2, #1
 80025f6:	619a      	str	r2, [r3, #24]
  }
}
 80025f8:	bf00      	nop
 80025fa:	370c      	adds	r7, #12
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b084      	sub	sp, #16
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	603b      	str	r3, [r7, #0]
 8002610:	4613      	mov	r3, r2
 8002612:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002614:	e03b      	b.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	6839      	ldr	r1, [r7, #0]
 800261a:	68f8      	ldr	r0, [r7, #12]
 800261c:	f000 f8d6 	bl	80027cc <I2C_IsErrorOccurred>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e041      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800262a:	683b      	ldr	r3, [r7, #0]
 800262c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002630:	d02d      	beq.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002632:	f7fe ff27 	bl	8001484 <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	683a      	ldr	r2, [r7, #0]
 800263e:	429a      	cmp	r2, r3
 8002640:	d302      	bcc.n	8002648 <I2C_WaitOnFlagUntilTimeout+0x44>
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d122      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	4013      	ands	r3, r2
 8002652:	68ba      	ldr	r2, [r7, #8]
 8002654:	429a      	cmp	r2, r3
 8002656:	bf0c      	ite	eq
 8002658:	2301      	moveq	r3, #1
 800265a:	2300      	movne	r3, #0
 800265c:	b2db      	uxtb	r3, r3
 800265e:	461a      	mov	r2, r3
 8002660:	79fb      	ldrb	r3, [r7, #7]
 8002662:	429a      	cmp	r2, r3
 8002664:	d113      	bne.n	800268e <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266a:	f043 0220 	orr.w	r2, r3, #32
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	2220      	movs	r2, #32
 8002676:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	2200      	movs	r2, #0
 800267e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e00f      	b.n	80026ae <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	699a      	ldr	r2, [r3, #24]
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	4013      	ands	r3, r2
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	429a      	cmp	r2, r3
 800269c:	bf0c      	ite	eq
 800269e:	2301      	moveq	r3, #1
 80026a0:	2300      	movne	r3, #0
 80026a2:	b2db      	uxtb	r3, r3
 80026a4:	461a      	mov	r2, r3
 80026a6:	79fb      	ldrb	r3, [r7, #7]
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d0b4      	beq.n	8002616 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3710      	adds	r7, #16
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}

080026b6 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80026b6:	b580      	push	{r7, lr}
 80026b8:	b084      	sub	sp, #16
 80026ba:	af00      	add	r7, sp, #0
 80026bc:	60f8      	str	r0, [r7, #12]
 80026be:	60b9      	str	r1, [r7, #8]
 80026c0:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80026c2:	e033      	b.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68b9      	ldr	r1, [r7, #8]
 80026c8:	68f8      	ldr	r0, [r7, #12]
 80026ca:	f000 f87f 	bl	80027cc <I2C_IsErrorOccurred>
 80026ce:	4603      	mov	r3, r0
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d001      	beq.n	80026d8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	e031      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026de:	d025      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80026e0:	f7fe fed0 	bl	8001484 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	68ba      	ldr	r2, [r7, #8]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d302      	bcc.n	80026f6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d11a      	bne.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b02      	cmp	r3, #2
 8002702:	d013      	beq.n	800272c <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002708:	f043 0220 	orr.w	r2, r3, #32
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	2220      	movs	r2, #32
 8002714:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	2200      	movs	r2, #0
 800271c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	e007      	b.n	800273c <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	f003 0302 	and.w	r3, r3, #2
 8002736:	2b02      	cmp	r3, #2
 8002738:	d1c4      	bne.n	80026c4 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800273a:	2300      	movs	r3, #0
}
 800273c:	4618      	mov	r0, r3
 800273e:	3710      	adds	r7, #16
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002750:	e02f      	b.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68b9      	ldr	r1, [r7, #8]
 8002756:	68f8      	ldr	r0, [r7, #12]
 8002758:	f000 f838 	bl	80027cc <I2C_IsErrorOccurred>
 800275c:	4603      	mov	r3, r0
 800275e:	2b00      	cmp	r3, #0
 8002760:	d001      	beq.n	8002766 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e02d      	b.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002766:	f7fe fe8d 	bl	8001484 <HAL_GetTick>
 800276a:	4602      	mov	r2, r0
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	1ad3      	subs	r3, r2, r3
 8002770:	68ba      	ldr	r2, [r7, #8]
 8002772:	429a      	cmp	r2, r3
 8002774:	d302      	bcc.n	800277c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002776:	68bb      	ldr	r3, [r7, #8]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d11a      	bne.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	699b      	ldr	r3, [r3, #24]
 8002782:	f003 0320 	and.w	r3, r3, #32
 8002786:	2b20      	cmp	r3, #32
 8002788:	d013      	beq.n	80027b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800278e:	f043 0220 	orr.w	r2, r3, #32
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2220      	movs	r2, #32
 800279a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2200      	movs	r2, #0
 80027aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e007      	b.n	80027c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	699b      	ldr	r3, [r3, #24]
 80027b8:	f003 0320 	and.w	r3, r3, #32
 80027bc:	2b20      	cmp	r3, #32
 80027be:	d1c8      	bne.n	8002752 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80027c0:	2300      	movs	r3, #0
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3710      	adds	r7, #16
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
	...

080027cc <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b08a      	sub	sp, #40	@ 0x28
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	60f8      	str	r0, [r7, #12]
 80027d4:	60b9      	str	r1, [r7, #8]
 80027d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027d8:	2300      	movs	r3, #0
 80027da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0310 	and.w	r3, r3, #16
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d068      	beq.n	80028ca <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2210      	movs	r2, #16
 80027fe:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002800:	e049      	b.n	8002896 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002808:	d045      	beq.n	8002896 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800280a:	f7fe fe3b 	bl	8001484 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	68ba      	ldr	r2, [r7, #8]
 8002816:	429a      	cmp	r2, r3
 8002818:	d302      	bcc.n	8002820 <I2C_IsErrorOccurred+0x54>
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d13a      	bne.n	8002896 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	685b      	ldr	r3, [r3, #4]
 8002826:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800282a:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002832:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	699b      	ldr	r3, [r3, #24]
 800283a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800283e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002842:	d121      	bne.n	8002888 <I2C_IsErrorOccurred+0xbc>
 8002844:	697b      	ldr	r3, [r7, #20]
 8002846:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800284a:	d01d      	beq.n	8002888 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800284c:	7cfb      	ldrb	r3, [r7, #19]
 800284e:	2b20      	cmp	r3, #32
 8002850:	d01a      	beq.n	8002888 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002860:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002862:	f7fe fe0f 	bl	8001484 <HAL_GetTick>
 8002866:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002868:	e00e      	b.n	8002888 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800286a:	f7fe fe0b 	bl	8001484 <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	69fb      	ldr	r3, [r7, #28]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b19      	cmp	r3, #25
 8002876:	d907      	bls.n	8002888 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002878:	6a3b      	ldr	r3, [r7, #32]
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8002886:	e006      	b.n	8002896 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	f003 0320 	and.w	r3, r3, #32
 8002892:	2b20      	cmp	r3, #32
 8002894:	d1e9      	bne.n	800286a <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	699b      	ldr	r3, [r3, #24]
 800289c:	f003 0320 	and.w	r3, r3, #32
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	d003      	beq.n	80028ac <I2C_IsErrorOccurred+0xe0>
 80028a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d0aa      	beq.n	8002802 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80028ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d103      	bne.n	80028bc <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2220      	movs	r2, #32
 80028ba:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80028bc:	6a3b      	ldr	r3, [r7, #32]
 80028be:	f043 0304 	orr.w	r3, r3, #4
 80028c2:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	699b      	ldr	r3, [r3, #24]
 80028d0:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80028d2:	69bb      	ldr	r3, [r7, #24]
 80028d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d00b      	beq.n	80028f4 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80028dc:	6a3b      	ldr	r3, [r7, #32]
 80028de:	f043 0301 	orr.w	r3, r3, #1
 80028e2:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028ec:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00b      	beq.n	8002916 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80028fe:	6a3b      	ldr	r3, [r7, #32]
 8002900:	f043 0308 	orr.w	r3, r3, #8
 8002904:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800290e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002910:	2301      	movs	r3, #1
 8002912:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002916:	69bb      	ldr	r3, [r7, #24]
 8002918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800291c:	2b00      	cmp	r3, #0
 800291e:	d00b      	beq.n	8002938 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002920:	6a3b      	ldr	r3, [r7, #32]
 8002922:	f043 0302 	orr.w	r3, r3, #2
 8002926:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002930:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002938:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01c      	beq.n	800297a <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002940:	68f8      	ldr	r0, [r7, #12]
 8002942:	f7ff fe3b 	bl	80025bc <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b0d      	ldr	r3, [pc, #52]	@ (8002988 <I2C_IsErrorOccurred+0x1bc>)
 8002952:	400b      	ands	r3, r1
 8002954:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800295a:	6a3b      	ldr	r3, [r7, #32]
 800295c:	431a      	orrs	r2, r3
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2220      	movs	r2, #32
 8002966:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	2200      	movs	r2, #0
 8002976:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800297a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800297e:	4618      	mov	r0, r3
 8002980:	3728      	adds	r7, #40	@ 0x28
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}
 8002986:	bf00      	nop
 8002988:	fe00e800 	.word	0xfe00e800

0800298c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	460b      	mov	r3, r1
 8002998:	817b      	strh	r3, [r7, #10]
 800299a:	4613      	mov	r3, r2
 800299c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800299e:	897b      	ldrh	r3, [r7, #10]
 80029a0:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029a4:	7a7b      	ldrb	r3, [r7, #9]
 80029a6:	041b      	lsls	r3, r3, #16
 80029a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029ac:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80029ba:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685a      	ldr	r2, [r3, #4]
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	0d5b      	lsrs	r3, r3, #21
 80029c6:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80029ca:	4b08      	ldr	r3, [pc, #32]	@ (80029ec <I2C_TransferConfig+0x60>)
 80029cc:	430b      	orrs	r3, r1
 80029ce:	43db      	mvns	r3, r3
 80029d0:	ea02 0103 	and.w	r1, r2, r3
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	697a      	ldr	r2, [r7, #20]
 80029da:	430a      	orrs	r2, r1
 80029dc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80029de:	bf00      	nop
 80029e0:	371c      	adds	r7, #28
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr
 80029ea:	bf00      	nop
 80029ec:	03ff63ff 	.word	0x03ff63ff

080029f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b083      	sub	sp, #12
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	6078      	str	r0, [r7, #4]
 80029f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a00:	b2db      	uxtb	r3, r3
 8002a02:	2b20      	cmp	r3, #32
 8002a04:	d138      	bne.n	8002a78 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e032      	b.n	8002a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2224      	movs	r2, #36	@ 0x24
 8002a20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	681a      	ldr	r2, [r3, #0]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f022 0201 	bic.w	r2, r2, #1
 8002a32:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002a42:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	6819      	ldr	r1, [r3, #0]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 0201 	orr.w	r2, r2, #1
 8002a62:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2220      	movs	r2, #32
 8002a68:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2200      	movs	r2, #0
 8002a70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002a74:	2300      	movs	r3, #0
 8002a76:	e000      	b.n	8002a7a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002a78:	2302      	movs	r3, #2
  }
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	370c      	adds	r7, #12
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a84:	4770      	bx	lr

08002a86 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002a86:	b480      	push	{r7}
 8002a88:	b085      	sub	sp, #20
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	6078      	str	r0, [r7, #4]
 8002a8e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a96:	b2db      	uxtb	r3, r3
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	d139      	bne.n	8002b10 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d101      	bne.n	8002aaa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002aa6:	2302      	movs	r3, #2
 8002aa8:	e033      	b.n	8002b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2201      	movs	r2, #1
 8002aae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2224      	movs	r2, #36	@ 0x24
 8002ab6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681a      	ldr	r2, [r3, #0]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0201 	bic.w	r2, r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002ad8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	021b      	lsls	r3, r3, #8
 8002ade:	68fa      	ldr	r2, [r7, #12]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	68fa      	ldr	r2, [r7, #12]
 8002aea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	681a      	ldr	r2, [r3, #0]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f042 0201 	orr.w	r2, r2, #1
 8002afa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2220      	movs	r2, #32
 8002b00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	e000      	b.n	8002b12 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002b10:	2302      	movs	r3, #2
  }
}
 8002b12:	4618      	mov	r0, r3
 8002b14:	3714      	adds	r7, #20
 8002b16:	46bd      	mov	sp, r7
 8002b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1c:	4770      	bx	lr
	...

08002b20 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8002b20:	b480      	push	{r7}
 8002b22:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002b24:	4b04      	ldr	r3, [pc, #16]	@ (8002b38 <HAL_PWREx_GetVoltageRange+0x18>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	40007000 	.word	0x40007000

08002b3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b085      	sub	sp, #20
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b4a:	d130      	bne.n	8002bae <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b4c:	4b23      	ldr	r3, [pc, #140]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b58:	d038      	beq.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b5a:	4b20      	ldr	r3, [pc, #128]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002b62:	4a1e      	ldr	r2, [pc, #120]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b64:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b68:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8002be0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	2232      	movs	r2, #50	@ 0x32
 8002b70:	fb02 f303 	mul.w	r3, r2, r3
 8002b74:	4a1b      	ldr	r2, [pc, #108]	@ (8002be4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002b76:	fba2 2303 	umull	r2, r3, r2, r3
 8002b7a:	0c9b      	lsrs	r3, r3, #18
 8002b7c:	3301      	adds	r3, #1
 8002b7e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b80:	e002      	b.n	8002b88 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	3b01      	subs	r3, #1
 8002b86:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002b88:	4b14      	ldr	r3, [pc, #80]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b94:	d102      	bne.n	8002b9c <HAL_PWREx_ControlVoltageScaling+0x60>
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1f2      	bne.n	8002b82 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002b9e:	695b      	ldr	r3, [r3, #20]
 8002ba0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ba4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002ba8:	d110      	bne.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e00f      	b.n	8002bce <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002bae:	4b0b      	ldr	r3, [pc, #44]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002bba:	d007      	beq.n	8002bcc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002bbc:	4b07      	ldr	r3, [pc, #28]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002bc4:	4a05      	ldr	r2, [pc, #20]	@ (8002bdc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002bc6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002bca:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002bcc:	2300      	movs	r3, #0
}
 8002bce:	4618      	mov	r0, r3
 8002bd0:	3714      	adds	r7, #20
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40007000 	.word	0x40007000
 8002be0:	20000000 	.word	0x20000000
 8002be4:	431bde83 	.word	0x431bde83

08002be8 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e3ca      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002bfa:	4b97      	ldr	r3, [pc, #604]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002c04:	4b94      	ldr	r3, [pc, #592]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0303 	and.w	r3, r3, #3
 8002c0c:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0310 	and.w	r3, r3, #16
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	f000 80e4 	beq.w	8002de4 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d007      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4a>
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	2b0c      	cmp	r3, #12
 8002c26:	f040 808b 	bne.w	8002d40 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002c2a:	697b      	ldr	r3, [r7, #20]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 8087 	bne.w	8002d40 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002c32:	4b89      	ldr	r3, [pc, #548]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f003 0302 	and.w	r3, r3, #2
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d005      	beq.n	8002c4a <HAL_RCC_OscConfig+0x62>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	699b      	ldr	r3, [r3, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d101      	bne.n	8002c4a <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002c46:	2301      	movs	r3, #1
 8002c48:	e3a2      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a1a      	ldr	r2, [r3, #32]
 8002c4e:	4b82      	ldr	r3, [pc, #520]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	f003 0308 	and.w	r3, r3, #8
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d004      	beq.n	8002c64 <HAL_RCC_OscConfig+0x7c>
 8002c5a:	4b7f      	ldr	r3, [pc, #508]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c62:	e005      	b.n	8002c70 <HAL_RCC_OscConfig+0x88>
 8002c64:	4b7c      	ldr	r3, [pc, #496]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002c6a:	091b      	lsrs	r3, r3, #4
 8002c6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d223      	bcs.n	8002cbc <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6a1b      	ldr	r3, [r3, #32]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 fd55 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d001      	beq.n	8002c88 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002c84:	2301      	movs	r3, #1
 8002c86:	e383      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002c88:	4b73      	ldr	r3, [pc, #460]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a72      	ldr	r2, [pc, #456]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c8e:	f043 0308 	orr.w	r3, r3, #8
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b70      	ldr	r3, [pc, #448]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6a1b      	ldr	r3, [r3, #32]
 8002ca0:	496d      	ldr	r1, [pc, #436]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002ca6:	4b6c      	ldr	r3, [pc, #432]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	69db      	ldr	r3, [r3, #28]
 8002cb2:	021b      	lsls	r3, r3, #8
 8002cb4:	4968      	ldr	r1, [pc, #416]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	604b      	str	r3, [r1, #4]
 8002cba:	e025      	b.n	8002d08 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002cbc:	4b66      	ldr	r3, [pc, #408]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a65      	ldr	r2, [pc, #404]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cc2:	f043 0308 	orr.w	r3, r3, #8
 8002cc6:	6013      	str	r3, [r2, #0]
 8002cc8:	4b63      	ldr	r3, [pc, #396]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a1b      	ldr	r3, [r3, #32]
 8002cd4:	4960      	ldr	r1, [pc, #384]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002cda:	4b5f      	ldr	r3, [pc, #380]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	495b      	ldr	r1, [pc, #364]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002cea:	4313      	orrs	r3, r2
 8002cec:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d109      	bne.n	8002d08 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6a1b      	ldr	r3, [r3, #32]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f000 fd15 	bl	8003728 <RCC_SetFlashLatencyFromMSIRange>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d001      	beq.n	8002d08 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	e343      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d08:	f000 fc4a 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b52      	ldr	r3, [pc, #328]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	091b      	lsrs	r3, r3, #4
 8002d14:	f003 030f 	and.w	r3, r3, #15
 8002d18:	4950      	ldr	r1, [pc, #320]	@ (8002e5c <HAL_RCC_OscConfig+0x274>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	f003 031f 	and.w	r3, r3, #31
 8002d20:	fa22 f303 	lsr.w	r3, r2, r3
 8002d24:	4a4e      	ldr	r2, [pc, #312]	@ (8002e60 <HAL_RCC_OscConfig+0x278>)
 8002d26:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002d28:	4b4e      	ldr	r3, [pc, #312]	@ (8002e64 <HAL_RCC_OscConfig+0x27c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7fe fb59 	bl	80013e4 <HAL_InitTick>
 8002d32:	4603      	mov	r3, r0
 8002d34:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002d36:	7bfb      	ldrb	r3, [r7, #15]
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d052      	beq.n	8002de2 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	e327      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	699b      	ldr	r3, [r3, #24]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d032      	beq.n	8002dae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002d48:	4b43      	ldr	r3, [pc, #268]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a42      	ldr	r2, [pc, #264]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d4e:	f043 0301 	orr.w	r3, r3, #1
 8002d52:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002d54:	f7fe fb96 	bl	8001484 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002d5c:	f7fe fb92 	bl	8001484 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e310      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002d6e:	4b3a      	ldr	r3, [pc, #232]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002d7a:	4b37      	ldr	r3, [pc, #220]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a36      	ldr	r2, [pc, #216]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d80:	f043 0308 	orr.w	r3, r3, #8
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	4b34      	ldr	r3, [pc, #208]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6a1b      	ldr	r3, [r3, #32]
 8002d92:	4931      	ldr	r1, [pc, #196]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d94:	4313      	orrs	r3, r2
 8002d96:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002d98:	4b2f      	ldr	r3, [pc, #188]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	021b      	lsls	r3, r3, #8
 8002da6:	492c      	ldr	r1, [pc, #176]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002da8:	4313      	orrs	r3, r2
 8002daa:	604b      	str	r3, [r1, #4]
 8002dac:	e01a      	b.n	8002de4 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002dae:	4b2a      	ldr	r3, [pc, #168]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	4a29      	ldr	r2, [pc, #164]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002db4:	f023 0301 	bic.w	r3, r3, #1
 8002db8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002dba:	f7fe fb63 	bl	8001484 <HAL_GetTick>
 8002dbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dc0:	e008      	b.n	8002dd4 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002dc2:	f7fe fb5f 	bl	8001484 <HAL_GetTick>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	1ad3      	subs	r3, r2, r3
 8002dcc:	2b02      	cmp	r3, #2
 8002dce:	d901      	bls.n	8002dd4 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002dd0:	2303      	movs	r3, #3
 8002dd2:	e2dd      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002dd4:	4b20      	ldr	r3, [pc, #128]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0302 	and.w	r3, r3, #2
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d1f0      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x1da>
 8002de0:	e000      	b.n	8002de4 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002de2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f003 0301 	and.w	r3, r3, #1
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d074      	beq.n	8002eda <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002df0:	69bb      	ldr	r3, [r7, #24]
 8002df2:	2b08      	cmp	r3, #8
 8002df4:	d005      	beq.n	8002e02 <HAL_RCC_OscConfig+0x21a>
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b0c      	cmp	r3, #12
 8002dfa:	d10e      	bne.n	8002e1a <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002dfc:	697b      	ldr	r3, [r7, #20]
 8002dfe:	2b03      	cmp	r3, #3
 8002e00:	d10b      	bne.n	8002e1a <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e02:	4b15      	ldr	r3, [pc, #84]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d064      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d160      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e2ba      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	685b      	ldr	r3, [r3, #4]
 8002e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e22:	d106      	bne.n	8002e32 <HAL_RCC_OscConfig+0x24a>
 8002e24:	4b0c      	ldr	r3, [pc, #48]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a0b      	ldr	r2, [pc, #44]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e2e:	6013      	str	r3, [r2, #0]
 8002e30:	e026      	b.n	8002e80 <HAL_RCC_OscConfig+0x298>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e3a:	d115      	bne.n	8002e68 <HAL_RCC_OscConfig+0x280>
 8002e3c:	4b06      	ldr	r3, [pc, #24]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a05      	ldr	r2, [pc, #20]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e42:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e46:	6013      	str	r3, [r2, #0]
 8002e48:	4b03      	ldr	r3, [pc, #12]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a02      	ldr	r2, [pc, #8]	@ (8002e58 <HAL_RCC_OscConfig+0x270>)
 8002e4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e52:	6013      	str	r3, [r2, #0]
 8002e54:	e014      	b.n	8002e80 <HAL_RCC_OscConfig+0x298>
 8002e56:	bf00      	nop
 8002e58:	40021000 	.word	0x40021000
 8002e5c:	0800847c 	.word	0x0800847c
 8002e60:	20000000 	.word	0x20000000
 8002e64:	20000004 	.word	0x20000004
 8002e68:	4ba0      	ldr	r3, [pc, #640]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a9f      	ldr	r2, [pc, #636]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b9d      	ldr	r3, [pc, #628]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a9c      	ldr	r2, [pc, #624]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e88:	f7fe fafc 	bl	8001484 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe faf8 	bl	8001484 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e276      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002ea2:	4b92      	ldr	r3, [pc, #584]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0x2a8>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fae8 	bl	8001484 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe fae4 	bl	8001484 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e262      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eca:	4b88      	ldr	r3, [pc, #544]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x2d0>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d060      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002ee6:	69bb      	ldr	r3, [r7, #24]
 8002ee8:	2b04      	cmp	r3, #4
 8002eea:	d005      	beq.n	8002ef8 <HAL_RCC_OscConfig+0x310>
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	2b0c      	cmp	r3, #12
 8002ef0:	d119      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002ef2:	697b      	ldr	r3, [r7, #20]
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d116      	bne.n	8002f26 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002ef8:	4b7c      	ldr	r3, [pc, #496]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d005      	beq.n	8002f10 <HAL_RCC_OscConfig+0x328>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d101      	bne.n	8002f10 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e23f      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f10:	4b76      	ldr	r3, [pc, #472]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	691b      	ldr	r3, [r3, #16]
 8002f1c:	061b      	lsls	r3, r3, #24
 8002f1e:	4973      	ldr	r1, [pc, #460]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f24:	e040      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	68db      	ldr	r3, [r3, #12]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d023      	beq.n	8002f76 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f2e:	4b6f      	ldr	r3, [pc, #444]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a6e      	ldr	r2, [pc, #440]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f34:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3a:	f7fe faa3 	bl	8001484 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f42:	f7fe fa9f 	bl	8001484 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e21d      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f54:	4b65      	ldr	r3, [pc, #404]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d0f0      	beq.n	8002f42 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f60:	4b62      	ldr	r3, [pc, #392]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	061b      	lsls	r3, r3, #24
 8002f6e:	495f      	ldr	r1, [pc, #380]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	604b      	str	r3, [r1, #4]
 8002f74:	e018      	b.n	8002fa8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f76:	4b5d      	ldr	r3, [pc, #372]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a5c      	ldr	r2, [pc, #368]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f7c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002f80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f82:	f7fe fa7f 	bl	8001484 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f88:	e008      	b.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fa7b 	bl	8001484 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d901      	bls.n	8002f9c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e1f9      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002f9c:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d1f0      	bne.n	8002f8a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d03c      	beq.n	800302e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	695b      	ldr	r3, [r3, #20]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fbc:	4b4b      	ldr	r3, [pc, #300]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fbe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fc2:	4a4a      	ldr	r2, [pc, #296]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fc4:	f043 0301 	orr.w	r3, r3, #1
 8002fc8:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fcc:	f7fe fa5a 	bl	8001484 <HAL_GetTick>
 8002fd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fd2:	e008      	b.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd4:	f7fe fa56 	bl	8001484 <HAL_GetTick>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	1ad3      	subs	r3, r2, r3
 8002fde:	2b02      	cmp	r3, #2
 8002fe0:	d901      	bls.n	8002fe6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e1d4      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002fe8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fec:	f003 0302 	and.w	r3, r3, #2
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d0ef      	beq.n	8002fd4 <HAL_RCC_OscConfig+0x3ec>
 8002ff4:	e01b      	b.n	800302e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ff8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002ffc:	4a3b      	ldr	r2, [pc, #236]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8002ffe:	f023 0301 	bic.w	r3, r3, #1
 8003002:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003006:	f7fe fa3d 	bl	8001484 <HAL_GetTick>
 800300a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800300c:	e008      	b.n	8003020 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800300e:	f7fe fa39 	bl	8001484 <HAL_GetTick>
 8003012:	4602      	mov	r2, r0
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	2b02      	cmp	r3, #2
 800301a:	d901      	bls.n	8003020 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800301c:	2303      	movs	r3, #3
 800301e:	e1b7      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003020:	4b32      	ldr	r3, [pc, #200]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8003022:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1ef      	bne.n	800300e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 0304 	and.w	r3, r3, #4
 8003036:	2b00      	cmp	r3, #0
 8003038:	f000 80a6 	beq.w	8003188 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800303c:	2300      	movs	r3, #0
 800303e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003040:	4b2a      	ldr	r3, [pc, #168]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8003042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d10d      	bne.n	8003068 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800304c:	4b27      	ldr	r3, [pc, #156]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 800304e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003050:	4a26      	ldr	r2, [pc, #152]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 8003052:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003056:	6593      	str	r3, [r2, #88]	@ 0x58
 8003058:	4b24      	ldr	r3, [pc, #144]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 800305a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800305c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003060:	60bb      	str	r3, [r7, #8]
 8003062:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003068:	4b21      	ldr	r3, [pc, #132]	@ (80030f0 <HAL_RCC_OscConfig+0x508>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003070:	2b00      	cmp	r3, #0
 8003072:	d118      	bne.n	80030a6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003074:	4b1e      	ldr	r3, [pc, #120]	@ (80030f0 <HAL_RCC_OscConfig+0x508>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a1d      	ldr	r2, [pc, #116]	@ (80030f0 <HAL_RCC_OscConfig+0x508>)
 800307a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003080:	f7fe fa00 	bl	8001484 <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003088:	f7fe f9fc 	bl	8001484 <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e17a      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800309a:	4b15      	ldr	r3, [pc, #84]	@ (80030f0 <HAL_RCC_OscConfig+0x508>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d0f0      	beq.n	8003088 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d108      	bne.n	80030c0 <HAL_RCC_OscConfig+0x4d8>
 80030ae:	4b0f      	ldr	r3, [pc, #60]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030b4:	4a0d      	ldr	r2, [pc, #52]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030b6:	f043 0301 	orr.w	r3, r3, #1
 80030ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030be:	e029      	b.n	8003114 <HAL_RCC_OscConfig+0x52c>
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	2b05      	cmp	r3, #5
 80030c6:	d115      	bne.n	80030f4 <HAL_RCC_OscConfig+0x50c>
 80030c8:	4b08      	ldr	r3, [pc, #32]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ce:	4a07      	ldr	r2, [pc, #28]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030d0:	f043 0304 	orr.w	r3, r3, #4
 80030d4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030d8:	4b04      	ldr	r3, [pc, #16]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030de:	4a03      	ldr	r2, [pc, #12]	@ (80030ec <HAL_RCC_OscConfig+0x504>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030e8:	e014      	b.n	8003114 <HAL_RCC_OscConfig+0x52c>
 80030ea:	bf00      	nop
 80030ec:	40021000 	.word	0x40021000
 80030f0:	40007000 	.word	0x40007000
 80030f4:	4b9c      	ldr	r3, [pc, #624]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80030f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030fa:	4a9b      	ldr	r2, [pc, #620]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80030fc:	f023 0301 	bic.w	r3, r3, #1
 8003100:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003104:	4b98      	ldr	r3, [pc, #608]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003106:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800310a:	4a97      	ldr	r2, [pc, #604]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800310c:	f023 0304 	bic.w	r3, r3, #4
 8003110:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d016      	beq.n	800314a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800311c:	f7fe f9b2 	bl	8001484 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003122:	e00a      	b.n	800313a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003124:	f7fe f9ae 	bl	8001484 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003132:	4293      	cmp	r3, r2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e12a      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800313a:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d0ed      	beq.n	8003124 <HAL_RCC_OscConfig+0x53c>
 8003148:	e015      	b.n	8003176 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314a:	f7fe f99b 	bl	8001484 <HAL_GetTick>
 800314e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003150:	e00a      	b.n	8003168 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003152:	f7fe f997 	bl	8001484 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003160:	4293      	cmp	r3, r2
 8003162:	d901      	bls.n	8003168 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e113      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003168:	4b7f      	ldr	r3, [pc, #508]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800316a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d1ed      	bne.n	8003152 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003176:	7ffb      	ldrb	r3, [r7, #31]
 8003178:	2b01      	cmp	r3, #1
 800317a:	d105      	bne.n	8003188 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800317c:	4b7a      	ldr	r3, [pc, #488]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003180:	4a79      	ldr	r2, [pc, #484]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003186:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800318c:	2b00      	cmp	r3, #0
 800318e:	f000 80fe 	beq.w	800338e <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003196:	2b02      	cmp	r3, #2
 8003198:	f040 80d0 	bne.w	800333c <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800319c:	4b72      	ldr	r3, [pc, #456]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	f003 0203 	and.w	r2, r3, #3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d130      	bne.n	8003212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ba:	3b01      	subs	r3, #1
 80031bc:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80031be:	429a      	cmp	r2, r3
 80031c0:	d127      	bne.n	8003212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031cc:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80031ce:	429a      	cmp	r2, r3
 80031d0:	d11f      	bne.n	8003212 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031d8:	687a      	ldr	r2, [r7, #4]
 80031da:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80031dc:	2a07      	cmp	r2, #7
 80031de:	bf14      	ite	ne
 80031e0:	2201      	movne	r2, #1
 80031e2:	2200      	moveq	r2, #0
 80031e4:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d113      	bne.n	8003212 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031f4:	085b      	lsrs	r3, r3, #1
 80031f6:	3b01      	subs	r3, #1
 80031f8:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d109      	bne.n	8003212 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	085b      	lsrs	r3, r3, #1
 800320a:	3b01      	subs	r3, #1
 800320c:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800320e:	429a      	cmp	r2, r3
 8003210:	d06e      	beq.n	80032f0 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	2b0c      	cmp	r3, #12
 8003216:	d069      	beq.n	80032ec <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003218:	4b53      	ldr	r3, [pc, #332]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003220:	2b00      	cmp	r3, #0
 8003222:	d105      	bne.n	8003230 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003224:	4b50      	ldr	r3, [pc, #320]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e0ad      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003234:	4b4c      	ldr	r3, [pc, #304]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	4a4b      	ldr	r2, [pc, #300]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800323a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800323e:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003240:	f7fe f920 	bl	8001484 <HAL_GetTick>
 8003244:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003246:	e008      	b.n	800325a <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003248:	f7fe f91c 	bl	8001484 <HAL_GetTick>
 800324c:	4602      	mov	r2, r0
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	1ad3      	subs	r3, r2, r3
 8003252:	2b02      	cmp	r3, #2
 8003254:	d901      	bls.n	800325a <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003256:	2303      	movs	r3, #3
 8003258:	e09a      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800325a:	4b43      	ldr	r3, [pc, #268]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d1f0      	bne.n	8003248 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003266:	4b40      	ldr	r3, [pc, #256]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003268:	68da      	ldr	r2, [r3, #12]
 800326a:	4b40      	ldr	r3, [pc, #256]	@ (800336c <HAL_RCC_OscConfig+0x784>)
 800326c:	4013      	ands	r3, r2
 800326e:	687a      	ldr	r2, [r7, #4]
 8003270:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003276:	3a01      	subs	r2, #1
 8003278:	0112      	lsls	r2, r2, #4
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003280:	0212      	lsls	r2, r2, #8
 8003282:	4311      	orrs	r1, r2
 8003284:	687a      	ldr	r2, [r7, #4]
 8003286:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003288:	0852      	lsrs	r2, r2, #1
 800328a:	3a01      	subs	r2, #1
 800328c:	0552      	lsls	r2, r2, #21
 800328e:	4311      	orrs	r1, r2
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8003294:	0852      	lsrs	r2, r2, #1
 8003296:	3a01      	subs	r2, #1
 8003298:	0652      	lsls	r2, r2, #25
 800329a:	4311      	orrs	r1, r2
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 80032a0:	0912      	lsrs	r2, r2, #4
 80032a2:	0452      	lsls	r2, r2, #17
 80032a4:	430a      	orrs	r2, r1
 80032a6:	4930      	ldr	r1, [pc, #192]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032a8:	4313      	orrs	r3, r2
 80032aa:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80032ac:	4b2e      	ldr	r3, [pc, #184]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	4a2d      	ldr	r2, [pc, #180]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032b2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032b6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032b8:	4b2b      	ldr	r3, [pc, #172]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032ba:	68db      	ldr	r3, [r3, #12]
 80032bc:	4a2a      	ldr	r2, [pc, #168]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032c2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80032c4:	f7fe f8de 	bl	8001484 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe f8da 	bl	8001484 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e058      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032de:	4b22      	ldr	r3, [pc, #136]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d0f0      	beq.n	80032cc <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80032ea:	e050      	b.n	800338e <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e04f      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032f0:	4b1d      	ldr	r3, [pc, #116]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d148      	bne.n	800338e <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80032fc:	4b1a      	ldr	r3, [pc, #104]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a19      	ldr	r2, [pc, #100]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003302:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003306:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003308:	4b17      	ldr	r3, [pc, #92]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800330a:	68db      	ldr	r3, [r3, #12]
 800330c:	4a16      	ldr	r2, [pc, #88]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 800330e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003312:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003314:	f7fe f8b6 	bl	8001484 <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800331c:	f7fe f8b2 	bl	8001484 <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b02      	cmp	r3, #2
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e030      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800332e:	4b0e      	ldr	r3, [pc, #56]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d0f0      	beq.n	800331c <HAL_RCC_OscConfig+0x734>
 800333a:	e028      	b.n	800338e <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	2b0c      	cmp	r3, #12
 8003340:	d023      	beq.n	800338a <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003342:	4b09      	ldr	r3, [pc, #36]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a08      	ldr	r2, [pc, #32]	@ (8003368 <HAL_RCC_OscConfig+0x780>)
 8003348:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800334c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800334e:	f7fe f899 	bl	8001484 <HAL_GetTick>
 8003352:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003354:	e00c      	b.n	8003370 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003356:	f7fe f895 	bl	8001484 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	2b02      	cmp	r3, #2
 8003362:	d905      	bls.n	8003370 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8003364:	2303      	movs	r3, #3
 8003366:	e013      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
 8003368:	40021000 	.word	0x40021000
 800336c:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003370:	4b09      	ldr	r3, [pc, #36]	@ (8003398 <HAL_RCC_OscConfig+0x7b0>)
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003378:	2b00      	cmp	r3, #0
 800337a:	d1ec      	bne.n	8003356 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800337c:	4b06      	ldr	r3, [pc, #24]	@ (8003398 <HAL_RCC_OscConfig+0x7b0>)
 800337e:	68da      	ldr	r2, [r3, #12]
 8003380:	4905      	ldr	r1, [pc, #20]	@ (8003398 <HAL_RCC_OscConfig+0x7b0>)
 8003382:	4b06      	ldr	r3, [pc, #24]	@ (800339c <HAL_RCC_OscConfig+0x7b4>)
 8003384:	4013      	ands	r3, r2
 8003386:	60cb      	str	r3, [r1, #12]
 8003388:	e001      	b.n	800338e <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e000      	b.n	8003390 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800338e:	2300      	movs	r3, #0
}
 8003390:	4618      	mov	r0, r3
 8003392:	3720      	adds	r7, #32
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40021000 	.word	0x40021000
 800339c:	feeefffc 	.word	0xfeeefffc

080033a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
 80033a8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d101      	bne.n	80033b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e0e7      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80033b4:	4b75      	ldr	r3, [pc, #468]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	683a      	ldr	r2, [r7, #0]
 80033be:	429a      	cmp	r2, r3
 80033c0:	d910      	bls.n	80033e4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033c2:	4b72      	ldr	r3, [pc, #456]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f023 0207 	bic.w	r2, r3, #7
 80033ca:	4970      	ldr	r1, [pc, #448]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80033d2:	4b6e      	ldr	r3, [pc, #440]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	683a      	ldr	r2, [r7, #0]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d001      	beq.n	80033e4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e0cf      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f003 0302 	and.w	r3, r3, #2
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d010      	beq.n	8003412 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689a      	ldr	r2, [r3, #8]
 80033f4:	4b66      	ldr	r3, [pc, #408]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d908      	bls.n	8003412 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003400:	4b63      	ldr	r3, [pc, #396]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	689b      	ldr	r3, [r3, #8]
 800340c:	4960      	ldr	r1, [pc, #384]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 800340e:	4313      	orrs	r3, r2
 8003410:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d04c      	beq.n	80034b8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	685b      	ldr	r3, [r3, #4]
 8003422:	2b03      	cmp	r3, #3
 8003424:	d107      	bne.n	8003436 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003426:	4b5a      	ldr	r3, [pc, #360]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d121      	bne.n	8003476 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	e0a6      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d107      	bne.n	800344e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	4b54      	ldr	r3, [pc, #336]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003446:	2b00      	cmp	r3, #0
 8003448:	d115      	bne.n	8003476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e09a      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	685b      	ldr	r3, [r3, #4]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d107      	bne.n	8003466 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003456:	4b4e      	ldr	r3, [pc, #312]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d109      	bne.n	8003476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e08e      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003466:	4b4a      	ldr	r3, [pc, #296]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800346e:	2b00      	cmp	r3, #0
 8003470:	d101      	bne.n	8003476 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e086      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003476:	4b46      	ldr	r3, [pc, #280]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f023 0203 	bic.w	r2, r3, #3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	685b      	ldr	r3, [r3, #4]
 8003482:	4943      	ldr	r1, [pc, #268]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003484:	4313      	orrs	r3, r2
 8003486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003488:	f7fd fffc 	bl	8001484 <HAL_GetTick>
 800348c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800348e:	e00a      	b.n	80034a6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003490:	f7fd fff8 	bl	8001484 <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800349e:	4293      	cmp	r3, r2
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e06e      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034a6:	4b3a      	ldr	r3, [pc, #232]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 020c 	and.w	r2, r3, #12
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	429a      	cmp	r2, r3
 80034b6:	d1eb      	bne.n	8003490 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0302 	and.w	r3, r3, #2
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	4b31      	ldr	r3, [pc, #196]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80034d0:	429a      	cmp	r2, r3
 80034d2:	d208      	bcs.n	80034e6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80034d4:	4b2e      	ldr	r3, [pc, #184]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 80034d6:	689b      	ldr	r3, [r3, #8]
 80034d8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	689b      	ldr	r3, [r3, #8]
 80034e0:	492b      	ldr	r1, [pc, #172]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80034e6:	4b29      	ldr	r3, [pc, #164]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d210      	bcs.n	8003516 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034f4:	4b25      	ldr	r3, [pc, #148]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f023 0207 	bic.w	r2, r3, #7
 80034fc:	4923      	ldr	r1, [pc, #140]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003504:	4b21      	ldr	r3, [pc, #132]	@ (800358c <HAL_RCC_ClockConfig+0x1ec>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d001      	beq.n	8003516 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e036      	b.n	8003584 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0304 	and.w	r3, r3, #4
 800351e:	2b00      	cmp	r3, #0
 8003520:	d008      	beq.n	8003534 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003522:	4b1b      	ldr	r3, [pc, #108]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	68db      	ldr	r3, [r3, #12]
 800352e:	4918      	ldr	r1, [pc, #96]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003530:	4313      	orrs	r3, r2
 8003532:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0308 	and.w	r3, r3, #8
 800353c:	2b00      	cmp	r3, #0
 800353e:	d009      	beq.n	8003554 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003540:	4b13      	ldr	r3, [pc, #76]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003542:	689b      	ldr	r3, [r3, #8]
 8003544:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	00db      	lsls	r3, r3, #3
 800354e:	4910      	ldr	r1, [pc, #64]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 8003550:	4313      	orrs	r3, r2
 8003552:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003554:	f000 f824 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8003558:	4602      	mov	r2, r0
 800355a:	4b0d      	ldr	r3, [pc, #52]	@ (8003590 <HAL_RCC_ClockConfig+0x1f0>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	091b      	lsrs	r3, r3, #4
 8003560:	f003 030f 	and.w	r3, r3, #15
 8003564:	490b      	ldr	r1, [pc, #44]	@ (8003594 <HAL_RCC_ClockConfig+0x1f4>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	f003 031f 	and.w	r3, r3, #31
 800356c:	fa22 f303 	lsr.w	r3, r2, r3
 8003570:	4a09      	ldr	r2, [pc, #36]	@ (8003598 <HAL_RCC_ClockConfig+0x1f8>)
 8003572:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <HAL_RCC_ClockConfig+0x1fc>)
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	4618      	mov	r0, r3
 800357a:	f7fd ff33 	bl	80013e4 <HAL_InitTick>
 800357e:	4603      	mov	r3, r0
 8003580:	72fb      	strb	r3, [r7, #11]

  return status;
 8003582:	7afb      	ldrb	r3, [r7, #11]
}
 8003584:	4618      	mov	r0, r3
 8003586:	3710      	adds	r7, #16
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}
 800358c:	40022000 	.word	0x40022000
 8003590:	40021000 	.word	0x40021000
 8003594:	0800847c 	.word	0x0800847c
 8003598:	20000000 	.word	0x20000000
 800359c:	20000004 	.word	0x20000004

080035a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b089      	sub	sp, #36	@ 0x24
 80035a4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80035a6:	2300      	movs	r3, #0
 80035a8:	61fb      	str	r3, [r7, #28]
 80035aa:	2300      	movs	r3, #0
 80035ac:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80035ae:	4b3e      	ldr	r3, [pc, #248]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035b0:	689b      	ldr	r3, [r3, #8]
 80035b2:	f003 030c 	and.w	r3, r3, #12
 80035b6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80035b8:	4b3b      	ldr	r3, [pc, #236]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d005      	beq.n	80035d4 <HAL_RCC_GetSysClockFreq+0x34>
 80035c8:	693b      	ldr	r3, [r7, #16]
 80035ca:	2b0c      	cmp	r3, #12
 80035cc:	d121      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d11e      	bne.n	8003612 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80035d4:	4b34      	ldr	r3, [pc, #208]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f003 0308 	and.w	r3, r3, #8
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80035e0:	4b31      	ldr	r3, [pc, #196]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80035e6:	0a1b      	lsrs	r3, r3, #8
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	e005      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80035f0:	4b2d      	ldr	r3, [pc, #180]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	091b      	lsrs	r3, r3, #4
 80035f6:	f003 030f 	and.w	r3, r3, #15
 80035fa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80035fc:	4a2b      	ldr	r2, [pc, #172]	@ (80036ac <HAL_RCC_GetSysClockFreq+0x10c>)
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003604:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10d      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800360c:	69fb      	ldr	r3, [r7, #28]
 800360e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003610:	e00a      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	2b04      	cmp	r3, #4
 8003616:	d102      	bne.n	800361e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003618:	4b25      	ldr	r3, [pc, #148]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x110>)
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	e004      	b.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b08      	cmp	r3, #8
 8003622:	d101      	bne.n	8003628 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003624:	4b23      	ldr	r3, [pc, #140]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x114>)
 8003626:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	2b0c      	cmp	r3, #12
 800362c:	d134      	bne.n	8003698 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800362e:	4b1e      	ldr	r3, [pc, #120]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	f003 0303 	and.w	r3, r3, #3
 8003636:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2b02      	cmp	r3, #2
 800363c:	d003      	beq.n	8003646 <HAL_RCC_GetSysClockFreq+0xa6>
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	2b03      	cmp	r3, #3
 8003642:	d003      	beq.n	800364c <HAL_RCC_GetSysClockFreq+0xac>
 8003644:	e005      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003646:	4b1a      	ldr	r3, [pc, #104]	@ (80036b0 <HAL_RCC_GetSysClockFreq+0x110>)
 8003648:	617b      	str	r3, [r7, #20]
      break;
 800364a:	e005      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800364c:	4b19      	ldr	r3, [pc, #100]	@ (80036b4 <HAL_RCC_GetSysClockFreq+0x114>)
 800364e:	617b      	str	r3, [r7, #20]
      break;
 8003650:	e002      	b.n	8003658 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8003652:	69fb      	ldr	r3, [r7, #28]
 8003654:	617b      	str	r3, [r7, #20]
      break;
 8003656:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003658:	4b13      	ldr	r3, [pc, #76]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	091b      	lsrs	r3, r3, #4
 800365e:	f003 0307 	and.w	r3, r3, #7
 8003662:	3301      	adds	r3, #1
 8003664:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003666:	4b10      	ldr	r3, [pc, #64]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	0a1b      	lsrs	r3, r3, #8
 800366c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003670:	697a      	ldr	r2, [r7, #20]
 8003672:	fb03 f202 	mul.w	r2, r3, r2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	fbb2 f3f3 	udiv	r3, r2, r3
 800367c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800367e:	4b0a      	ldr	r3, [pc, #40]	@ (80036a8 <HAL_RCC_GetSysClockFreq+0x108>)
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	0e5b      	lsrs	r3, r3, #25
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	3301      	adds	r3, #1
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	fbb2 f3f3 	udiv	r3, r2, r3
 8003696:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8003698:	69bb      	ldr	r3, [r7, #24]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3724      	adds	r7, #36	@ 0x24
 800369e:	46bd      	mov	sp, r7
 80036a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a4:	4770      	bx	lr
 80036a6:	bf00      	nop
 80036a8:	40021000 	.word	0x40021000
 80036ac:	08008494 	.word	0x08008494
 80036b0:	00f42400 	.word	0x00f42400
 80036b4:	007a1200 	.word	0x007a1200

080036b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036b8:	b480      	push	{r7}
 80036ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036bc:	4b03      	ldr	r3, [pc, #12]	@ (80036cc <HAL_RCC_GetHCLKFreq+0x14>)
 80036be:	681b      	ldr	r3, [r3, #0]
}
 80036c0:	4618      	mov	r0, r3
 80036c2:	46bd      	mov	sp, r7
 80036c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c8:	4770      	bx	lr
 80036ca:	bf00      	nop
 80036cc:	20000000 	.word	0x20000000

080036d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80036d4:	f7ff fff0 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 80036d8:	4602      	mov	r2, r0
 80036da:	4b06      	ldr	r3, [pc, #24]	@ (80036f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	0a1b      	lsrs	r3, r3, #8
 80036e0:	f003 0307 	and.w	r3, r3, #7
 80036e4:	4904      	ldr	r1, [pc, #16]	@ (80036f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80036e6:	5ccb      	ldrb	r3, [r1, r3]
 80036e8:	f003 031f 	and.w	r3, r3, #31
 80036ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	bd80      	pop	{r7, pc}
 80036f4:	40021000 	.word	0x40021000
 80036f8:	0800848c 	.word	0x0800848c

080036fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003700:	f7ff ffda 	bl	80036b8 <HAL_RCC_GetHCLKFreq>
 8003704:	4602      	mov	r2, r0
 8003706:	4b06      	ldr	r3, [pc, #24]	@ (8003720 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	0adb      	lsrs	r3, r3, #11
 800370c:	f003 0307 	and.w	r3, r3, #7
 8003710:	4904      	ldr	r1, [pc, #16]	@ (8003724 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003712:	5ccb      	ldrb	r3, [r1, r3]
 8003714:	f003 031f 	and.w	r3, r3, #31
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40021000 	.word	0x40021000
 8003724:	0800848c 	.word	0x0800848c

08003728 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003730:	2300      	movs	r3, #0
 8003732:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003734:	4b2a      	ldr	r3, [pc, #168]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003736:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d003      	beq.n	8003748 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003740:	f7ff f9ee 	bl	8002b20 <HAL_PWREx_GetVoltageRange>
 8003744:	6178      	str	r0, [r7, #20]
 8003746:	e014      	b.n	8003772 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003748:	4b25      	ldr	r3, [pc, #148]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800374c:	4a24      	ldr	r2, [pc, #144]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800374e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003752:	6593      	str	r3, [r2, #88]	@ 0x58
 8003754:	4b22      	ldr	r3, [pc, #136]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800375c:	60fb      	str	r3, [r7, #12]
 800375e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003760:	f7ff f9de 	bl	8002b20 <HAL_PWREx_GetVoltageRange>
 8003764:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8003766:	4b1e      	ldr	r3, [pc, #120]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003768:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376a:	4a1d      	ldr	r2, [pc, #116]	@ (80037e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800376c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003770:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003778:	d10b      	bne.n	8003792 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b80      	cmp	r3, #128	@ 0x80
 800377e:	d919      	bls.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2ba0      	cmp	r3, #160	@ 0xa0
 8003784:	d902      	bls.n	800378c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003786:	2302      	movs	r3, #2
 8003788:	613b      	str	r3, [r7, #16]
 800378a:	e013      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800378c:	2301      	movs	r3, #1
 800378e:	613b      	str	r3, [r7, #16]
 8003790:	e010      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2b80      	cmp	r3, #128	@ 0x80
 8003796:	d902      	bls.n	800379e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8003798:	2303      	movs	r3, #3
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	e00a      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b80      	cmp	r3, #128	@ 0x80
 80037a2:	d102      	bne.n	80037aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80037a4:	2302      	movs	r3, #2
 80037a6:	613b      	str	r3, [r7, #16]
 80037a8:	e004      	b.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2b70      	cmp	r3, #112	@ 0x70
 80037ae:	d101      	bne.n	80037b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80037b0:	2301      	movs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80037b4:	4b0b      	ldr	r3, [pc, #44]	@ (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f023 0207 	bic.w	r2, r3, #7
 80037bc:	4909      	ldr	r1, [pc, #36]	@ (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037be:	693b      	ldr	r3, [r7, #16]
 80037c0:	4313      	orrs	r3, r2
 80037c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80037c4:	4b07      	ldr	r3, [pc, #28]	@ (80037e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d001      	beq.n	80037d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e000      	b.n	80037d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80037d6:	2300      	movs	r3, #0
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3718      	adds	r7, #24
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	40021000 	.word	0x40021000
 80037e4:	40022000 	.word	0x40022000

080037e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80037f0:	2300      	movs	r3, #0
 80037f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80037f4:	2300      	movs	r3, #0
 80037f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003800:	2b00      	cmp	r3, #0
 8003802:	d041      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003808:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800380c:	d02a      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800380e:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003812:	d824      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003814:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003818:	d008      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800381a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800381e:	d81e      	bhi.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003820:	2b00      	cmp	r3, #0
 8003822:	d00a      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003824:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003828:	d010      	beq.n	800384c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800382a:	e018      	b.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800382c:	4b86      	ldr	r3, [pc, #536]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	4a85      	ldr	r2, [pc, #532]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003832:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003836:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003838:	e015      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	3304      	adds	r3, #4
 800383e:	2100      	movs	r1, #0
 8003840:	4618      	mov	r0, r3
 8003842:	f001 f829 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8003846:	4603      	mov	r3, r0
 8003848:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800384a:	e00c      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3320      	adds	r3, #32
 8003850:	2100      	movs	r1, #0
 8003852:	4618      	mov	r0, r3
 8003854:	f001 f914 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8003858:	4603      	mov	r3, r0
 800385a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800385c:	e003      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800385e:	2301      	movs	r3, #1
 8003860:	74fb      	strb	r3, [r7, #19]
      break;
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003864:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003866:	7cfb      	ldrb	r3, [r7, #19]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d10b      	bne.n	8003884 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800386c:	4b76      	ldr	r3, [pc, #472]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800386e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003872:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800387a:	4973      	ldr	r1, [pc, #460]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800387c:	4313      	orrs	r3, r2
 800387e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003882:	e001      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003884:	7cfb      	ldrb	r3, [r7, #19]
 8003886:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003890:	2b00      	cmp	r3, #0
 8003892:	d041      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003898:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800389c:	d02a      	beq.n	80038f4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800389e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80038a2:	d824      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038a8:	d008      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038aa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80038ae:	d81e      	bhi.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x106>
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d00a      	beq.n	80038ca <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80038b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80038b8:	d010      	beq.n	80038dc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80038ba:	e018      	b.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80038bc:	4b62      	ldr	r3, [pc, #392]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	4a61      	ldr	r2, [pc, #388]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038c6:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038c8:	e015      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	3304      	adds	r3, #4
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 ffe1 	bl	8004898 <RCCEx_PLLSAI1_Config>
 80038d6:	4603      	mov	r3, r0
 80038d8:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038da:	e00c      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	3320      	adds	r3, #32
 80038e0:	2100      	movs	r1, #0
 80038e2:	4618      	mov	r0, r3
 80038e4:	f001 f8cc 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 80038e8:	4603      	mov	r3, r0
 80038ea:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80038ec:	e003      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80038ee:	2301      	movs	r3, #1
 80038f0:	74fb      	strb	r3, [r7, #19]
      break;
 80038f2:	e000      	b.n	80038f6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80038f4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80038f6:	7cfb      	ldrb	r3, [r7, #19]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d10b      	bne.n	8003914 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80038fc:	4b52      	ldr	r3, [pc, #328]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80038fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003902:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800390a:	494f      	ldr	r1, [pc, #316]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800390c:	4313      	orrs	r3, r2
 800390e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003912:	e001      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003914:	7cfb      	ldrb	r3, [r7, #19]
 8003916:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003920:	2b00      	cmp	r3, #0
 8003922:	f000 80a0 	beq.w	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003926:	2300      	movs	r3, #0
 8003928:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800392a:	4b47      	ldr	r3, [pc, #284]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800392c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800392e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d101      	bne.n	800393a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003936:	2301      	movs	r3, #1
 8003938:	e000      	b.n	800393c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800393a:	2300      	movs	r3, #0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d00d      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003940:	4b41      	ldr	r3, [pc, #260]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003942:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003944:	4a40      	ldr	r2, [pc, #256]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003946:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800394a:	6593      	str	r3, [r2, #88]	@ 0x58
 800394c:	4b3e      	ldr	r3, [pc, #248]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800394e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003950:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003958:	2301      	movs	r3, #1
 800395a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800395c:	4b3b      	ldr	r3, [pc, #236]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a3a      	ldr	r2, [pc, #232]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003962:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003966:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003968:	f7fd fd8c 	bl	8001484 <HAL_GetTick>
 800396c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800396e:	e009      	b.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003970:	f7fd fd88 	bl	8001484 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	2b02      	cmp	r3, #2
 800397c:	d902      	bls.n	8003984 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	74fb      	strb	r3, [r7, #19]
        break;
 8003982:	e005      	b.n	8003990 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003984:	4b31      	ldr	r3, [pc, #196]	@ (8003a4c <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800398c:	2b00      	cmp	r3, #0
 800398e:	d0ef      	beq.n	8003970 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003990:	7cfb      	ldrb	r3, [r7, #19]
 8003992:	2b00      	cmp	r3, #0
 8003994:	d15c      	bne.n	8003a50 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003996:	4b2c      	ldr	r3, [pc, #176]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003998:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800399c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80039a0:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01f      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d019      	beq.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80039b4:	4b24      	ldr	r3, [pc, #144]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80039c0:	4b21      	ldr	r3, [pc, #132]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	4a20      	ldr	r2, [pc, #128]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80039d0:	4b1d      	ldr	r3, [pc, #116]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039d6:	4a1c      	ldr	r2, [pc, #112]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80039dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80039e0:	4a19      	ldr	r2, [pc, #100]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d016      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80039f2:	f7fd fd47 	bl	8001484 <HAL_GetTick>
 80039f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f8:	e00b      	b.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039fa:	f7fd fd43 	bl	8001484 <HAL_GetTick>
 80039fe:	4602      	mov	r2, r0
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	1ad3      	subs	r3, r2, r3
 8003a04:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d902      	bls.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003a0c:	2303      	movs	r3, #3
 8003a0e:	74fb      	strb	r3, [r7, #19]
            break;
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003a12:	4b0d      	ldr	r3, [pc, #52]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a14:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a18:	f003 0302 	and.w	r3, r3, #2
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d0ec      	beq.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8003a20:	7cfb      	ldrb	r3, [r7, #19]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d10c      	bne.n	8003a40 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a26:	4b08      	ldr	r3, [pc, #32]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003a36:	4904      	ldr	r1, [pc, #16]	@ (8003a48 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003a3e:	e009      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003a40:	7cfb      	ldrb	r3, [r7, #19]
 8003a42:	74bb      	strb	r3, [r7, #18]
 8003a44:	e006      	b.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003a46:	bf00      	nop
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a50:	7cfb      	ldrb	r3, [r7, #19]
 8003a52:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a54:	7c7b      	ldrb	r3, [r7, #17]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d105      	bne.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a5a:	4b9e      	ldr	r3, [pc, #632]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a5e:	4a9d      	ldr	r2, [pc, #628]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a60:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a64:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d00a      	beq.n	8003a88 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a72:	4b98      	ldr	r3, [pc, #608]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a78:	f023 0203 	bic.w	r2, r3, #3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a80:	4994      	ldr	r1, [pc, #592]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f003 0302 	and.w	r3, r3, #2
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d00a      	beq.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003a94:	4b8f      	ldr	r3, [pc, #572]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a9a:	f023 020c 	bic.w	r2, r3, #12
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003aa2:	498c      	ldr	r1, [pc, #560]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00a      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003ab6:	4b87      	ldr	r3, [pc, #540]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ab8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003abc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac4:	4983      	ldr	r1, [pc, #524]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0308 	and.w	r3, r3, #8
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00a      	beq.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003ad8:	4b7e      	ldr	r3, [pc, #504]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ade:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ae6:	497b      	ldr	r1, [pc, #492]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0310 	and.w	r3, r3, #16
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00a      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003afa:	4b76      	ldr	r3, [pc, #472]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003afc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b00:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b08:	4972      	ldr	r1, [pc, #456]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0320 	and.w	r3, r3, #32
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00a      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003b1c:	4b6d      	ldr	r3, [pc, #436]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b22:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2a:	496a      	ldr	r1, [pc, #424]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d00a      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b3e:	4b65      	ldr	r3, [pc, #404]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b40:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b44:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b4c:	4961      	ldr	r1, [pc, #388]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d00a      	beq.n	8003b76 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003b60:	4b5c      	ldr	r3, [pc, #368]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b66:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b6e:	4959      	ldr	r1, [pc, #356]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b70:	4313      	orrs	r3, r2
 8003b72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003b82:	4b54      	ldr	r3, [pc, #336]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b84:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b88:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003b90:	4950      	ldr	r1, [pc, #320]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003b92:	4313      	orrs	r3, r2
 8003b94:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00a      	beq.n	8003bba <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003ba4:	4b4b      	ldr	r3, [pc, #300]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ba6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003baa:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bb2:	4948      	ldr	r1, [pc, #288]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d00a      	beq.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003bc6:	4b43      	ldr	r3, [pc, #268]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bc8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bcc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003bd4:	493f      	ldr	r1, [pc, #252]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d028      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003be8:	4b3a      	ldr	r3, [pc, #232]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bee:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003bf6:	4937      	ldr	r1, [pc, #220]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003bf8:	4313      	orrs	r3, r2
 8003bfa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c06:	d106      	bne.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c08:	4b32      	ldr	r3, [pc, #200]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	4a31      	ldr	r2, [pc, #196]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c12:	60d3      	str	r3, [r2, #12]
 8003c14:	e011      	b.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003c1a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c1e:	d10c      	bne.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3304      	adds	r3, #4
 8003c24:	2101      	movs	r1, #1
 8003c26:	4618      	mov	r0, r3
 8003c28:	f000 fe36 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003c30:	7cfb      	ldrb	r3, [r7, #19]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d001      	beq.n	8003c3a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003c36:	7cfb      	ldrb	r3, [r7, #19]
 8003c38:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d028      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003c46:	4b23      	ldr	r3, [pc, #140]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c4c:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c54:	491f      	ldr	r1, [pc, #124]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c56:	4313      	orrs	r3, r2
 8003c58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c64:	d106      	bne.n	8003c74 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003c66:	4b1b      	ldr	r3, [pc, #108]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	4a1a      	ldr	r2, [pc, #104]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003c6c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c70:	60d3      	str	r3, [r2, #12]
 8003c72:	e011      	b.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003c78:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3304      	adds	r3, #4
 8003c82:	2101      	movs	r1, #1
 8003c84:	4618      	mov	r0, r3
 8003c86:	f000 fe07 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003c8e:	7cfb      	ldrb	r3, [r7, #19]
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d001      	beq.n	8003c98 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003c94:	7cfb      	ldrb	r3, [r7, #19]
 8003c96:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d02b      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003caa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cb2:	4908      	ldr	r1, [pc, #32]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cb4:	4313      	orrs	r3, r2
 8003cb6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cbe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003cc2:	d109      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003cc4:	4b03      	ldr	r3, [pc, #12]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	4a02      	ldr	r2, [pc, #8]	@ (8003cd4 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003cca:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cce:	60d3      	str	r3, [r2, #12]
 8003cd0:	e014      	b.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cdc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003ce0:	d10c      	bne.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	3304      	adds	r3, #4
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 fdd5 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8003cee:	4603      	mov	r3, r0
 8003cf0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003cf2:	7cfb      	ldrb	r3, [r7, #19]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d001      	beq.n	8003cfc <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003cf8:	7cfb      	ldrb	r3, [r7, #19]
 8003cfa:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d02f      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003d08:	4b2b      	ldr	r3, [pc, #172]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d0e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d16:	4928      	ldr	r1, [pc, #160]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d18:	4313      	orrs	r3, r2
 8003d1a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d22:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003d26:	d10d      	bne.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	3304      	adds	r3, #4
 8003d2c:	2102      	movs	r1, #2
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f000 fdb2 	bl	8004898 <RCCEx_PLLSAI1_Config>
 8003d34:	4603      	mov	r3, r0
 8003d36:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d38:	7cfb      	ldrb	r3, [r7, #19]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d014      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d3e:	7cfb      	ldrb	r3, [r7, #19]
 8003d40:	74bb      	strb	r3, [r7, #18]
 8003d42:	e011      	b.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003d4c:	d10c      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	3320      	adds	r3, #32
 8003d52:	2102      	movs	r1, #2
 8003d54:	4618      	mov	r0, r3
 8003d56:	f000 fe93 	bl	8004a80 <RCCEx_PLLSAI2_Config>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003d5e:	7cfb      	ldrb	r3, [r7, #19]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003d64:	7cfb      	ldrb	r3, [r7, #19]
 8003d66:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d00a      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003d74:	4b10      	ldr	r3, [pc, #64]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003d82:	490d      	ldr	r1, [pc, #52]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00b      	beq.n	8003dae <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003d96:	4b08      	ldr	r3, [pc, #32]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003d98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d9c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003da6:	4904      	ldr	r1, [pc, #16]	@ (8003db8 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003da8:	4313      	orrs	r3, r2
 8003daa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003dae:	7cbb      	ldrb	r3, [r7, #18]
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	40021000 	.word	0x40021000

08003dbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b088      	sub	sp, #32
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003dce:	d13e      	bne.n	8003e4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003dd0:	4bb2      	ldr	r3, [pc, #712]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003dd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003dd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003dda:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003de2:	d028      	beq.n	8003e36 <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003dea:	f200 8542 	bhi.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003df4:	d005      	beq.n	8003e02 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003dfc:	d00e      	beq.n	8003e1c <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003dfe:	f000 bd38 	b.w	8004872 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e02:	4ba6      	ldr	r3, [pc, #664]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e08:	f003 0302 	and.w	r3, r3, #2
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f040 8532 	bne.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003e12:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e16:	61fb      	str	r3, [r7, #28]
      break;
 8003e18:	f000 bd2d 	b.w	8004876 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8003e1c:	4b9f      	ldr	r3, [pc, #636]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e22:	f003 0302 	and.w	r3, r3, #2
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	f040 8527 	bne.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 8003e2c:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8003e30:	61fb      	str	r3, [r7, #28]
      break;
 8003e32:	f000 bd22 	b.w	800487a <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e36:	4b99      	ldr	r3, [pc, #612]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e3e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003e42:	f040 851c 	bne.w	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 8003e46:	4b96      	ldr	r3, [pc, #600]	@ (80040a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 8003e48:	61fb      	str	r3, [r7, #28]
      break;
 8003e4a:	f000 bd18 	b.w	800487e <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e4e:	4b93      	ldr	r3, [pc, #588]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e50:	68db      	ldr	r3, [r3, #12]
 8003e52:	f003 0303 	and.w	r3, r3, #3
 8003e56:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	2b03      	cmp	r3, #3
 8003e5c:	d036      	beq.n	8003ecc <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8003e5e:	697b      	ldr	r3, [r7, #20]
 8003e60:	2b03      	cmp	r3, #3
 8003e62:	d840      	bhi.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d003      	beq.n	8003e72 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d020      	beq.n	8003eb2 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8003e70:	e039      	b.n	8003ee6 <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003e72:	4b8a      	ldr	r3, [pc, #552]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f003 0302 	and.w	r3, r3, #2
 8003e7a:	2b02      	cmp	r3, #2
 8003e7c:	d116      	bne.n	8003eac <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003e7e:	4b87      	ldr	r3, [pc, #540]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f003 0308 	and.w	r3, r3, #8
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d005      	beq.n	8003e96 <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003e8a:	4b84      	ldr	r3, [pc, #528]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	091b      	lsrs	r3, r3, #4
 8003e90:	f003 030f 	and.w	r3, r3, #15
 8003e94:	e005      	b.n	8003ea2 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003e96:	4b81      	ldr	r3, [pc, #516]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003e98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003e9c:	0a1b      	lsrs	r3, r3, #8
 8003e9e:	f003 030f 	and.w	r3, r3, #15
 8003ea2:	4a80      	ldr	r2, [pc, #512]	@ (80040a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003ea4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003ea8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003eaa:	e01f      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003eac:	2300      	movs	r3, #0
 8003eae:	61bb      	str	r3, [r7, #24]
      break;
 8003eb0:	e01c      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003eb2:	4b7a      	ldr	r3, [pc, #488]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ebe:	d102      	bne.n	8003ec6 <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003ec0:	4b79      	ldr	r3, [pc, #484]	@ (80040a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003ec2:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ec4:	e012      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	61bb      	str	r3, [r7, #24]
      break;
 8003eca:	e00f      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003ecc:	4b73      	ldr	r3, [pc, #460]	@ (800409c <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ed4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003ed8:	d102      	bne.n	8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003eda:	4b74      	ldr	r3, [pc, #464]	@ (80040ac <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003edc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003ede:	e005      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	61bb      	str	r3, [r7, #24]
      break;
 8003ee4:	e002      	b.n	8003eec <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61bb      	str	r3, [r7, #24]
      break;
 8003eea:	bf00      	nop
    }

    switch(PeriphClk)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003ef2:	f000 80dd 	beq.w	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003efc:	f200 84c1 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f06:	f000 80d3 	beq.w	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f10:	f200 84b7 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f1a:	f000 835f 	beq.w	80045dc <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f24:	f200 84ad 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f2e:	f000 847e 	beq.w	800482e <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f38:	f200 84a3 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f42:	f000 82cd 	beq.w	80044e0 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f4c:	f200 8499 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f56:	f000 80ab 	beq.w	80040b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003f60:	f200 848f 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f6a:	f000 8090 	beq.w	800408e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f74:	f200 8485 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f7e:	d07f      	beq.n	8004080 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f86:	f200 847c 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f90:	f000 8403 	beq.w	800479a <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f9a:	f200 8472 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fa4:	f000 83af 	beq.w	8004706 <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003fae:	f200 8468 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fb8:	f000 8379 	beq.w	80046ae <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003fc2:	f200 845e 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2b80      	cmp	r3, #128	@ 0x80
 8003fca:	f000 8344 	beq.w	8004656 <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2b80      	cmp	r3, #128	@ 0x80
 8003fd2:	f200 8456 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2b20      	cmp	r3, #32
 8003fda:	d84b      	bhi.n	8004074 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	f000 844f 	beq.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	2b1f      	cmp	r3, #31
 8003fea:	f200 844a 	bhi.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003fee:	a201      	add	r2, pc, #4	@ (adr r2, 8003ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ff4:	080041dd 	.word	0x080041dd
 8003ff8:	0800424b 	.word	0x0800424b
 8003ffc:	08004883 	.word	0x08004883
 8004000:	080042df 	.word	0x080042df
 8004004:	08004883 	.word	0x08004883
 8004008:	08004883 	.word	0x08004883
 800400c:	08004883 	.word	0x08004883
 8004010:	08004365 	.word	0x08004365
 8004014:	08004883 	.word	0x08004883
 8004018:	08004883 	.word	0x08004883
 800401c:	08004883 	.word	0x08004883
 8004020:	08004883 	.word	0x08004883
 8004024:	08004883 	.word	0x08004883
 8004028:	08004883 	.word	0x08004883
 800402c:	08004883 	.word	0x08004883
 8004030:	080043dd 	.word	0x080043dd
 8004034:	08004883 	.word	0x08004883
 8004038:	08004883 	.word	0x08004883
 800403c:	08004883 	.word	0x08004883
 8004040:	08004883 	.word	0x08004883
 8004044:	08004883 	.word	0x08004883
 8004048:	08004883 	.word	0x08004883
 800404c:	08004883 	.word	0x08004883
 8004050:	08004883 	.word	0x08004883
 8004054:	08004883 	.word	0x08004883
 8004058:	08004883 	.word	0x08004883
 800405c:	08004883 	.word	0x08004883
 8004060:	08004883 	.word	0x08004883
 8004064:	08004883 	.word	0x08004883
 8004068:	08004883 	.word	0x08004883
 800406c:	08004883 	.word	0x08004883
 8004070:	0800445f 	.word	0x0800445f
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b40      	cmp	r3, #64	@ 0x40
 8004078:	f000 82c1 	beq.w	80045fe <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 800407c:	f000 bc01 	b.w	8004882 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004080:	69b9      	ldr	r1, [r7, #24]
 8004082:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004086:	f000 fdd9 	bl	8004c3c <RCCEx_GetSAIxPeriphCLKFreq>
 800408a:	61f8      	str	r0, [r7, #28]
      break;
 800408c:	e3fa      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 800408e:	69b9      	ldr	r1, [r7, #24]
 8004090:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004094:	f000 fdd2 	bl	8004c3c <RCCEx_GetSAIxPeriphCLKFreq>
 8004098:	61f8      	str	r0, [r7, #28]
      break;
 800409a:	e3f3      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 800409c:	40021000 	.word	0x40021000
 80040a0:	0003d090 	.word	0x0003d090
 80040a4:	08008494 	.word	0x08008494
 80040a8:	00f42400 	.word	0x00f42400
 80040ac:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 80040b0:	4ba9      	ldr	r3, [pc, #676]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040b6:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 80040ba:	613b      	str	r3, [r7, #16]
 80040bc:	693b      	ldr	r3, [r7, #16]
 80040be:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80040c2:	d00c      	beq.n	80040de <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80040ca:	d87f      	bhi.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80040d2:	d04e      	beq.n	8004172 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 80040d4:	693b      	ldr	r3, [r7, #16]
 80040d6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040da:	d01d      	beq.n	8004118 <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 80040dc:	e076      	b.n	80041cc <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80040de:	4b9e      	ldr	r3, [pc, #632]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d172      	bne.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80040ea:	4b9b      	ldr	r3, [pc, #620]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 0308 	and.w	r3, r3, #8
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d005      	beq.n	8004102 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 80040f6:	4b98      	ldr	r3, [pc, #608]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	091b      	lsrs	r3, r3, #4
 80040fc:	f003 030f 	and.w	r3, r3, #15
 8004100:	e005      	b.n	800410e <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8004102:	4b95      	ldr	r3, [pc, #596]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004108:	0a1b      	lsrs	r3, r3, #8
 800410a:	f003 030f 	and.w	r3, r3, #15
 800410e:	4a93      	ldr	r2, [pc, #588]	@ (800435c <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8004110:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004114:	61fb      	str	r3, [r7, #28]
          break;
 8004116:	e05b      	b.n	80041d0 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004118:	4b8f      	ldr	r3, [pc, #572]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004120:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004124:	d156      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004126:	4b8c      	ldr	r3, [pc, #560]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004128:	68db      	ldr	r3, [r3, #12]
 800412a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800412e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004132:	d14f      	bne.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004134:	4b88      	ldr	r3, [pc, #544]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004136:	68db      	ldr	r3, [r3, #12]
 8004138:	0a1b      	lsrs	r3, r3, #8
 800413a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800413e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	fb03 f202 	mul.w	r2, r3, r2
 8004148:	4b83      	ldr	r3, [pc, #524]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	091b      	lsrs	r3, r3, #4
 800414e:	f003 0307 	and.w	r3, r3, #7
 8004152:	3301      	adds	r3, #1
 8004154:	fbb2 f3f3 	udiv	r3, r2, r3
 8004158:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 800415a:	4b7f      	ldr	r3, [pc, #508]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	0d5b      	lsrs	r3, r3, #21
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	3301      	adds	r3, #1
 8004166:	005b      	lsls	r3, r3, #1
 8004168:	69ba      	ldr	r2, [r7, #24]
 800416a:	fbb2 f3f3 	udiv	r3, r2, r3
 800416e:	61fb      	str	r3, [r7, #28]
          break;
 8004170:	e030      	b.n	80041d4 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004172:	4b79      	ldr	r3, [pc, #484]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800417a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800417e:	d12b      	bne.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004180:	4b75      	ldr	r3, [pc, #468]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004182:	691b      	ldr	r3, [r3, #16]
 8004184:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004188:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800418c:	d124      	bne.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800418e:	4b72      	ldr	r3, [pc, #456]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	0a1b      	lsrs	r3, r3, #8
 8004194:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004198:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	68fa      	ldr	r2, [r7, #12]
 800419e:	fb03 f202 	mul.w	r2, r3, r2
 80041a2:	4b6d      	ldr	r3, [pc, #436]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041a4:	68db      	ldr	r3, [r3, #12]
 80041a6:	091b      	lsrs	r3, r3, #4
 80041a8:	f003 0307 	and.w	r3, r3, #7
 80041ac:	3301      	adds	r3, #1
 80041ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80041b2:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 80041b4:	4b68      	ldr	r3, [pc, #416]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041b6:	691b      	ldr	r3, [r3, #16]
 80041b8:	0d5b      	lsrs	r3, r3, #21
 80041ba:	f003 0303 	and.w	r3, r3, #3
 80041be:	3301      	adds	r3, #1
 80041c0:	005b      	lsls	r3, r3, #1
 80041c2:	69ba      	ldr	r2, [r7, #24]
 80041c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041c8:	61fb      	str	r3, [r7, #28]
          break;
 80041ca:	e005      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 80041cc:	bf00      	nop
 80041ce:	e359      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d0:	bf00      	nop
 80041d2:	e357      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d4:	bf00      	nop
 80041d6:	e355      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d8:	bf00      	nop
        break;
 80041da:	e353      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80041dc:	4b5e      	ldr	r3, [pc, #376]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80041de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e2:	f003 0303 	and.w	r3, r3, #3
 80041e6:	613b      	str	r3, [r7, #16]
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	2b03      	cmp	r3, #3
 80041ec:	d827      	bhi.n	800423e <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 80041ee:	a201      	add	r2, pc, #4	@ (adr r2, 80041f4 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	08004205 	.word	0x08004205
 80041f8:	0800420d 	.word	0x0800420d
 80041fc:	08004215 	.word	0x08004215
 8004200:	08004229 	.word	0x08004229
          frequency = HAL_RCC_GetPCLK2Freq();
 8004204:	f7ff fa7a 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8004208:	61f8      	str	r0, [r7, #28]
          break;
 800420a:	e01d      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 800420c:	f7ff f9c8 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8004210:	61f8      	str	r0, [r7, #28]
          break;
 8004212:	e019      	b.n	8004248 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004214:	4b50      	ldr	r3, [pc, #320]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004220:	d10f      	bne.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8004222:	4b4f      	ldr	r3, [pc, #316]	@ (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004224:	61fb      	str	r3, [r7, #28]
          break;
 8004226:	e00c      	b.n	8004242 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004228:	4b4b      	ldr	r3, [pc, #300]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800422e:	f003 0302 	and.w	r3, r3, #2
 8004232:	2b02      	cmp	r3, #2
 8004234:	d107      	bne.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8004236:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800423a:	61fb      	str	r3, [r7, #28]
          break;
 800423c:	e003      	b.n	8004246 <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 800423e:	bf00      	nop
 8004240:	e320      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004242:	bf00      	nop
 8004244:	e31e      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004246:	bf00      	nop
        break;
 8004248:	e31c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 800424a:	4b43      	ldr	r3, [pc, #268]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 800424c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004250:	f003 030c 	and.w	r3, r3, #12
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	2b0c      	cmp	r3, #12
 800425a:	d83a      	bhi.n	80042d2 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 800425c:	a201      	add	r2, pc, #4	@ (adr r2, 8004264 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 800425e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004262:	bf00      	nop
 8004264:	08004299 	.word	0x08004299
 8004268:	080042d3 	.word	0x080042d3
 800426c:	080042d3 	.word	0x080042d3
 8004270:	080042d3 	.word	0x080042d3
 8004274:	080042a1 	.word	0x080042a1
 8004278:	080042d3 	.word	0x080042d3
 800427c:	080042d3 	.word	0x080042d3
 8004280:	080042d3 	.word	0x080042d3
 8004284:	080042a9 	.word	0x080042a9
 8004288:	080042d3 	.word	0x080042d3
 800428c:	080042d3 	.word	0x080042d3
 8004290:	080042d3 	.word	0x080042d3
 8004294:	080042bd 	.word	0x080042bd
          frequency = HAL_RCC_GetPCLK1Freq();
 8004298:	f7ff fa1a 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800429c:	61f8      	str	r0, [r7, #28]
          break;
 800429e:	e01d      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 80042a0:	f7ff f97e 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80042a4:	61f8      	str	r0, [r7, #28]
          break;
 80042a6:	e019      	b.n	80042dc <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042b4:	d10f      	bne.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 80042b6:	4b2a      	ldr	r3, [pc, #168]	@ (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 80042b8:	61fb      	str	r3, [r7, #28]
          break;
 80042ba:	e00c      	b.n	80042d6 <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042bc:	4b26      	ldr	r3, [pc, #152]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b02      	cmp	r3, #2
 80042c8:	d107      	bne.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 80042ca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80042ce:	61fb      	str	r3, [r7, #28]
          break;
 80042d0:	e003      	b.n	80042da <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 80042d2:	bf00      	nop
 80042d4:	e2d6      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042d6:	bf00      	nop
 80042d8:	e2d4      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80042da:	bf00      	nop
        break;
 80042dc:	e2d2      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80042de:	4b1e      	ldr	r3, [pc, #120]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 80042e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042e4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80042e8:	613b      	str	r3, [r7, #16]
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	2b30      	cmp	r3, #48	@ 0x30
 80042ee:	d021      	beq.n	8004334 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	2b30      	cmp	r3, #48	@ 0x30
 80042f4:	d829      	bhi.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d011      	beq.n	8004320 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	2b20      	cmp	r3, #32
 8004300:	d823      	bhi.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d003      	beq.n	8004310 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8004308:	693b      	ldr	r3, [r7, #16]
 800430a:	2b10      	cmp	r3, #16
 800430c:	d004      	beq.n	8004318 <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 800430e:	e01c      	b.n	800434a <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004310:	f7ff f9de 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8004314:	61f8      	str	r0, [r7, #28]
          break;
 8004316:	e01d      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8004318:	f7ff f942 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800431c:	61f8      	str	r0, [r7, #28]
          break;
 800431e:	e019      	b.n	8004354 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004320:	4b0d      	ldr	r3, [pc, #52]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004328:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800432c:	d10f      	bne.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 800432e:	4b0c      	ldr	r3, [pc, #48]	@ (8004360 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8004330:	61fb      	str	r3, [r7, #28]
          break;
 8004332:	e00c      	b.n	800434e <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8004336:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b02      	cmp	r3, #2
 8004340:	d107      	bne.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8004342:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004346:	61fb      	str	r3, [r7, #28]
          break;
 8004348:	e003      	b.n	8004352 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 800434a:	bf00      	nop
 800434c:	e29a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800434e:	bf00      	nop
 8004350:	e298      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004352:	bf00      	nop
        break;
 8004354:	e296      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004356:	bf00      	nop
 8004358:	40021000 	.word	0x40021000
 800435c:	08008494 	.word	0x08008494
 8004360:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004364:	4b9b      	ldr	r3, [pc, #620]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004366:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800436a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	2bc0      	cmp	r3, #192	@ 0xc0
 8004374:	d021      	beq.n	80043ba <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	2bc0      	cmp	r3, #192	@ 0xc0
 800437a:	d829      	bhi.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	2b80      	cmp	r3, #128	@ 0x80
 8004380:	d011      	beq.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	2b80      	cmp	r3, #128	@ 0x80
 8004386:	d823      	bhi.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d003      	beq.n	8004396 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b40      	cmp	r3, #64	@ 0x40
 8004392:	d004      	beq.n	800439e <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8004394:	e01c      	b.n	80043d0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004396:	f7ff f99b 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800439a:	61f8      	str	r0, [r7, #28]
          break;
 800439c:	e01d      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 800439e:	f7ff f8ff 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80043a2:	61f8      	str	r0, [r7, #28]
          break;
 80043a4:	e019      	b.n	80043da <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043a6:	4b8b      	ldr	r3, [pc, #556]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043b2:	d10f      	bne.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 80043b4:	4b88      	ldr	r3, [pc, #544]	@ (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80043b6:	61fb      	str	r3, [r7, #28]
          break;
 80043b8:	e00c      	b.n	80043d4 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80043ba:	4b86      	ldr	r3, [pc, #536]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	2b02      	cmp	r3, #2
 80043c6:	d107      	bne.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 80043c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043cc:	61fb      	str	r3, [r7, #28]
          break;
 80043ce:	e003      	b.n	80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 80043d0:	bf00      	nop
 80043d2:	e257      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043d4:	bf00      	nop
 80043d6:	e255      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043d8:	bf00      	nop
        break;
 80043da:	e253      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80043dc:	4b7d      	ldr	r3, [pc, #500]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80043de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043e6:	613b      	str	r3, [r7, #16]
 80043e8:	693b      	ldr	r3, [r7, #16]
 80043ea:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043ee:	d025      	beq.n	800443c <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 80043f0:	693b      	ldr	r3, [r7, #16]
 80043f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80043f6:	d82c      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80043fe:	d013      	beq.n	8004428 <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8004400:	693b      	ldr	r3, [r7, #16]
 8004402:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004406:	d824      	bhi.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d004      	beq.n	8004418 <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004414:	d004      	beq.n	8004420 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8004416:	e01c      	b.n	8004452 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004418:	f7ff f95a 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800441c:	61f8      	str	r0, [r7, #28]
          break;
 800441e:	e01d      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8004420:	f7ff f8be 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8004424:	61f8      	str	r0, [r7, #28]
          break;
 8004426:	e019      	b.n	800445c <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004428:	4b6a      	ldr	r3, [pc, #424]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004434:	d10f      	bne.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8004436:	4b68      	ldr	r3, [pc, #416]	@ (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8004438:	61fb      	str	r3, [r7, #28]
          break;
 800443a:	e00c      	b.n	8004456 <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800443c:	4b65      	ldr	r3, [pc, #404]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800443e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004442:	f003 0302 	and.w	r3, r3, #2
 8004446:	2b02      	cmp	r3, #2
 8004448:	d107      	bne.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 800444a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800444e:	61fb      	str	r3, [r7, #28]
          break;
 8004450:	e003      	b.n	800445a <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8004452:	bf00      	nop
 8004454:	e216      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004456:	bf00      	nop
 8004458:	e214      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800445a:	bf00      	nop
        break;
 800445c:	e212      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 800445e:	4b5d      	ldr	r3, [pc, #372]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004464:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004468:	613b      	str	r3, [r7, #16]
 800446a:	693b      	ldr	r3, [r7, #16]
 800446c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004470:	d025      	beq.n	80044be <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004478:	d82c      	bhi.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004480:	d013      	beq.n	80044aa <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004488:	d824      	bhi.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004496:	d004      	beq.n	80044a2 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 8004498:	e01c      	b.n	80044d4 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800449a:	f7ff f919 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800449e:	61f8      	str	r0, [r7, #28]
          break;
 80044a0:	e01d      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 80044a2:	f7ff f87d 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80044a6:	61f8      	str	r0, [r7, #28]
          break;
 80044a8:	e019      	b.n	80044de <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80044aa:	4b4a      	ldr	r3, [pc, #296]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80044b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b6:	d10f      	bne.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 80044b8:	4b47      	ldr	r3, [pc, #284]	@ (80045d8 <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 80044ba:	61fb      	str	r3, [r7, #28]
          break;
 80044bc:	e00c      	b.n	80044d8 <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80044be:	4b45      	ldr	r3, [pc, #276]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80044c4:	f003 0302 	and.w	r3, r3, #2
 80044c8:	2b02      	cmp	r3, #2
 80044ca:	d107      	bne.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 80044cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80044d0:	61fb      	str	r3, [r7, #28]
          break;
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 80044d4:	bf00      	nop
 80044d6:	e1d5      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044d8:	bf00      	nop
 80044da:	e1d3      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80044dc:	bf00      	nop
        break;
 80044de:	e1d1      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80044e0:	4b3c      	ldr	r3, [pc, #240]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80044e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044e6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80044ea:	613b      	str	r3, [r7, #16]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044f2:	d00c      	beq.n	800450e <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80044fa:	d864      	bhi.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 80044fc:	693b      	ldr	r3, [r7, #16]
 80044fe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004502:	d008      	beq.n	8004516 <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004504:	693b      	ldr	r3, [r7, #16]
 8004506:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800450a:	d030      	beq.n	800456e <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 800450c:	e05b      	b.n	80045c6 <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 800450e:	f7ff f847 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8004512:	61f8      	str	r0, [r7, #28]
          break;
 8004514:	e05c      	b.n	80045d0 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 8004516:	4b2f      	ldr	r3, [pc, #188]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800451e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004522:	d152      	bne.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 8004524:	4b2b      	ldr	r3, [pc, #172]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800452c:	2b00      	cmp	r3, #0
 800452e:	d04c      	beq.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004530:	4b28      	ldr	r3, [pc, #160]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	0a1b      	lsrs	r3, r3, #8
 8004536:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800453a:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800453c:	69bb      	ldr	r3, [r7, #24]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	fb03 f202 	mul.w	r2, r3, r2
 8004544:	4b23      	ldr	r3, [pc, #140]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	091b      	lsrs	r3, r3, #4
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	3301      	adds	r3, #1
 8004550:	fbb2 f3f3 	udiv	r3, r2, r3
 8004554:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 8004556:	4b1f      	ldr	r3, [pc, #124]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004558:	691b      	ldr	r3, [r3, #16]
 800455a:	0e5b      	lsrs	r3, r3, #25
 800455c:	f003 0303 	and.w	r3, r3, #3
 8004560:	3301      	adds	r3, #1
 8004562:	005b      	lsls	r3, r3, #1
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	fbb2 f3f3 	udiv	r3, r2, r3
 800456a:	61fb      	str	r3, [r7, #28]
          break;
 800456c:	e02d      	b.n	80045ca <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 800456e:	4b19      	ldr	r3, [pc, #100]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004576:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800457a:	d128      	bne.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 800457c:	4b15      	ldr	r3, [pc, #84]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004584:	2b00      	cmp	r3, #0
 8004586:	d022      	beq.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004588:	4b12      	ldr	r3, [pc, #72]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	0a1b      	lsrs	r3, r3, #8
 800458e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004592:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	fb03 f202 	mul.w	r2, r3, r2
 800459c:	4b0d      	ldr	r3, [pc, #52]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800459e:	68db      	ldr	r3, [r3, #12]
 80045a0:	091b      	lsrs	r3, r3, #4
 80045a2:	f003 0307 	and.w	r3, r3, #7
 80045a6:	3301      	adds	r3, #1
 80045a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80045ac:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 80045ae:	4b09      	ldr	r3, [pc, #36]	@ (80045d4 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80045b0:	695b      	ldr	r3, [r3, #20]
 80045b2:	0e5b      	lsrs	r3, r3, #25
 80045b4:	f003 0303 	and.w	r3, r3, #3
 80045b8:	3301      	adds	r3, #1
 80045ba:	005b      	lsls	r3, r3, #1
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	fbb2 f3f3 	udiv	r3, r2, r3
 80045c2:	61fb      	str	r3, [r7, #28]
          break;
 80045c4:	e003      	b.n	80045ce <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 80045c6:	bf00      	nop
 80045c8:	e15c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045ca:	bf00      	nop
 80045cc:	e15a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80045ce:	bf00      	nop
        break;
 80045d0:	e158      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 80045d2:	bf00      	nop
 80045d4:	40021000 	.word	0x40021000
 80045d8:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 80045dc:	4b9d      	ldr	r3, [pc, #628]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80045de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80045e2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80045e6:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 80045e8:	693b      	ldr	r3, [r7, #16]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d103      	bne.n	80045f6 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 80045ee:	f7ff f885 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 80045f2:	61f8      	str	r0, [r7, #28]
        break;
 80045f4:	e146      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 80045f6:	f7fe ffd3 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80045fa:	61f8      	str	r0, [r7, #28]
        break;
 80045fc:	e142      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80045fe:	4b95      	ldr	r3, [pc, #596]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004600:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004604:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 8004608:	613b      	str	r3, [r7, #16]
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004610:	d013      	beq.n	800463a <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004618:	d819      	bhi.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d004      	beq.n	800462a <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004626:	d004      	beq.n	8004632 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 8004628:	e011      	b.n	800464e <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 800462a:	f7ff f851 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800462e:	61f8      	str	r0, [r7, #28]
          break;
 8004630:	e010      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 8004632:	f7fe ffb5 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8004636:	61f8      	str	r0, [r7, #28]
          break;
 8004638:	e00c      	b.n	8004654 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800463a:	4b86      	ldr	r3, [pc, #536]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004642:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004646:	d104      	bne.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 8004648:	4b83      	ldr	r3, [pc, #524]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800464a:	61fb      	str	r3, [r7, #28]
          break;
 800464c:	e001      	b.n	8004652 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 800464e:	bf00      	nop
 8004650:	e118      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004652:	bf00      	nop
        break;
 8004654:	e116      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8004656:	4b7f      	ldr	r3, [pc, #508]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800465c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8004660:	613b      	str	r3, [r7, #16]
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004668:	d013      	beq.n	8004692 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004670:	d819      	bhi.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d004      	beq.n	8004682 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800467e:	d004      	beq.n	800468a <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004680:	e011      	b.n	80046a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004682:	f7ff f825 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8004686:	61f8      	str	r0, [r7, #28]
          break;
 8004688:	e010      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800468a:	f7fe ff89 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 800468e:	61f8      	str	r0, [r7, #28]
          break;
 8004690:	e00c      	b.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004692:	4b70      	ldr	r3, [pc, #448]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800469a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800469e:	d104      	bne.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 80046a0:	4b6d      	ldr	r3, [pc, #436]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80046a2:	61fb      	str	r3, [r7, #28]
          break;
 80046a4:	e001      	b.n	80046aa <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 80046a6:	bf00      	nop
 80046a8:	e0ec      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80046aa:	bf00      	nop
        break;
 80046ac:	e0ea      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80046ae:	4b69      	ldr	r3, [pc, #420]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80046b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80046b8:	613b      	str	r3, [r7, #16]
 80046ba:	693b      	ldr	r3, [r7, #16]
 80046bc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c0:	d013      	beq.n	80046ea <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80046c8:	d819      	bhi.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d004      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046d6:	d004      	beq.n	80046e2 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 80046d8:	e011      	b.n	80046fe <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 80046da:	f7fe fff9 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80046de:	61f8      	str	r0, [r7, #28]
          break;
 80046e0:	e010      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 80046e2:	f7fe ff5d 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 80046e6:	61f8      	str	r0, [r7, #28]
          break;
 80046e8:	e00c      	b.n	8004704 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80046ea:	4b5a      	ldr	r3, [pc, #360]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046f6:	d104      	bne.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 80046f8:	4b57      	ldr	r3, [pc, #348]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80046fa:	61fb      	str	r3, [r7, #28]
          break;
 80046fc:	e001      	b.n	8004702 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 80046fe:	bf00      	nop
 8004700:	e0c0      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004702:	bf00      	nop
        break;
 8004704:	e0be      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8004706:	4b53      	ldr	r3, [pc, #332]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800470c:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004710:	613b      	str	r3, [r7, #16]
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004718:	d02c      	beq.n	8004774 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004720:	d833      	bhi.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004722:	693b      	ldr	r3, [r7, #16]
 8004724:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004728:	d01a      	beq.n	8004760 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004730:	d82b      	bhi.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d004      	beq.n	8004742 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 8004738:	693b      	ldr	r3, [r7, #16]
 800473a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800473e:	d004      	beq.n	800474a <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 8004740:	e023      	b.n	800478a <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004742:	f7fe ffc5 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8004746:	61f8      	str	r0, [r7, #28]
          break;
 8004748:	e026      	b.n	8004798 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 800474a:	4b42      	ldr	r3, [pc, #264]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800474c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004750:	f003 0302 	and.w	r3, r3, #2
 8004754:	2b02      	cmp	r3, #2
 8004756:	d11a      	bne.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 8004758:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 800475c:	61fb      	str	r3, [r7, #28]
          break;
 800475e:	e016      	b.n	800478e <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004760:	4b3c      	ldr	r3, [pc, #240]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004768:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800476c:	d111      	bne.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 800476e:	4b3a      	ldr	r3, [pc, #232]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004770:	61fb      	str	r3, [r7, #28]
          break;
 8004772:	e00e      	b.n	8004792 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004774:	4b37      	ldr	r3, [pc, #220]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800477a:	f003 0302 	and.w	r3, r3, #2
 800477e:	2b02      	cmp	r3, #2
 8004780:	d109      	bne.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004782:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004786:	61fb      	str	r3, [r7, #28]
          break;
 8004788:	e005      	b.n	8004796 <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800478a:	bf00      	nop
 800478c:	e07a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800478e:	bf00      	nop
 8004790:	e078      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004792:	bf00      	nop
 8004794:	e076      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004796:	bf00      	nop
        break;
 8004798:	e074      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800479a:	4b2e      	ldr	r3, [pc, #184]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800479c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047a0:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	693b      	ldr	r3, [r7, #16]
 80047a8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047ac:	d02c      	beq.n	8004808 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80047b4:	d833      	bhi.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047bc:	d01a      	beq.n	80047f4 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80047c4:	d82b      	bhi.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d004      	beq.n	80047d6 <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80047d2:	d004      	beq.n	80047de <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 80047d4:	e023      	b.n	800481e <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 80047d6:	f7fe ff7b 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 80047da:	61f8      	str	r0, [r7, #28]
          break;
 80047dc:	e026      	b.n	800482c <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80047de:	4b1d      	ldr	r3, [pc, #116]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80047e4:	f003 0302 	and.w	r3, r3, #2
 80047e8:	2b02      	cmp	r3, #2
 80047ea:	d11a      	bne.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 80047ec:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80047f0:	61fb      	str	r3, [r7, #28]
          break;
 80047f2:	e016      	b.n	8004822 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80047f4:	4b17      	ldr	r3, [pc, #92]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80047fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004800:	d111      	bne.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004802:	4b15      	ldr	r3, [pc, #84]	@ (8004858 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004804:	61fb      	str	r3, [r7, #28]
          break;
 8004806:	e00e      	b.n	8004826 <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004808:	4b12      	ldr	r3, [pc, #72]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800480a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b02      	cmp	r3, #2
 8004814:	d109      	bne.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 8004816:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800481a:	61fb      	str	r3, [r7, #28]
          break;
 800481c:	e005      	b.n	800482a <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 800481e:	bf00      	nop
 8004820:	e030      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004822:	bf00      	nop
 8004824:	e02e      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004826:	bf00      	nop
 8004828:	e02c      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800482a:	bf00      	nop
        break;
 800482c:	e02a      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 800482e:	4b09      	ldr	r3, [pc, #36]	@ (8004854 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004834:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004838:	613b      	str	r3, [r7, #16]
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d004      	beq.n	800484a <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004846:	d009      	beq.n	800485c <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 8004848:	e012      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 800484a:	f7fe ff41 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 800484e:	61f8      	str	r0, [r7, #28]
          break;
 8004850:	e00e      	b.n	8004870 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 8004852:	bf00      	nop
 8004854:	40021000 	.word	0x40021000
 8004858:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004864:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004868:	d101      	bne.n	800486e <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 800486a:	4b0a      	ldr	r3, [pc, #40]	@ (8004894 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 800486c:	61fb      	str	r3, [r7, #28]
          break;
 800486e:	bf00      	nop
        break;
 8004870:	e008      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004872:	bf00      	nop
 8004874:	e006      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004876:	bf00      	nop
 8004878:	e004      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800487a:	bf00      	nop
 800487c:	e002      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 800487e:	bf00      	nop
 8004880:	e000      	b.n	8004884 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004882:	bf00      	nop
    }
  }

  return(frequency);
 8004884:	69fb      	ldr	r3, [r7, #28]
}
 8004886:	4618      	mov	r0, r3
 8004888:	3720      	adds	r7, #32
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	00f42400 	.word	0x00f42400

08004898 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8004898:	b580      	push	{r7, lr}
 800489a:	b084      	sub	sp, #16
 800489c:	af00      	add	r7, sp, #0
 800489e:	6078      	str	r0, [r7, #4]
 80048a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80048a2:	2300      	movs	r3, #0
 80048a4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80048a6:	4b75      	ldr	r3, [pc, #468]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	f003 0303 	and.w	r3, r3, #3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d018      	beq.n	80048e4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80048b2:	4b72      	ldr	r3, [pc, #456]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048b4:	68db      	ldr	r3, [r3, #12]
 80048b6:	f003 0203 	and.w	r2, r3, #3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d10d      	bne.n	80048de <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
       ||
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d009      	beq.n	80048de <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80048ca:	4b6c      	ldr	r3, [pc, #432]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048cc:	68db      	ldr	r3, [r3, #12]
 80048ce:	091b      	lsrs	r3, r3, #4
 80048d0:	f003 0307 	and.w	r3, r3, #7
 80048d4:	1c5a      	adds	r2, r3, #1
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	685b      	ldr	r3, [r3, #4]
       ||
 80048da:	429a      	cmp	r2, r3
 80048dc:	d047      	beq.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	73fb      	strb	r3, [r7, #15]
 80048e2:	e044      	b.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	2b03      	cmp	r3, #3
 80048ea:	d018      	beq.n	800491e <RCCEx_PLLSAI1_Config+0x86>
 80048ec:	2b03      	cmp	r3, #3
 80048ee:	d825      	bhi.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
 80048f0:	2b01      	cmp	r3, #1
 80048f2:	d002      	beq.n	80048fa <RCCEx_PLLSAI1_Config+0x62>
 80048f4:	2b02      	cmp	r3, #2
 80048f6:	d009      	beq.n	800490c <RCCEx_PLLSAI1_Config+0x74>
 80048f8:	e020      	b.n	800493c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80048fa:	4b60      	ldr	r3, [pc, #384]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f003 0302 	and.w	r3, r3, #2
 8004902:	2b00      	cmp	r3, #0
 8004904:	d11d      	bne.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8004906:	2301      	movs	r3, #1
 8004908:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800490a:	e01a      	b.n	8004942 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800490c:	4b5b      	ldr	r3, [pc, #364]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004914:	2b00      	cmp	r3, #0
 8004916:	d116      	bne.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800491c:	e013      	b.n	8004946 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800491e:	4b57      	ldr	r3, [pc, #348]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d10f      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800492a:	4b54      	ldr	r3, [pc, #336]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d109      	bne.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800493a:	e006      	b.n	800494a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	73fb      	strb	r3, [r7, #15]
      break;
 8004940:	e004      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004942:	bf00      	nop
 8004944:	e002      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8004946:	bf00      	nop
 8004948:	e000      	b.n	800494c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800494a:	bf00      	nop
    }

    if(status == HAL_OK)
 800494c:	7bfb      	ldrb	r3, [r7, #15]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10d      	bne.n	800496e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004952:	4b4a      	ldr	r3, [pc, #296]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004954:	68db      	ldr	r3, [r3, #12]
 8004956:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6819      	ldr	r1, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	3b01      	subs	r3, #1
 8004964:	011b      	lsls	r3, r3, #4
 8004966:	430b      	orrs	r3, r1
 8004968:	4944      	ldr	r1, [pc, #272]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800496a:	4313      	orrs	r3, r2
 800496c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800496e:	7bfb      	ldrb	r3, [r7, #15]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d17d      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8004974:	4b41      	ldr	r3, [pc, #260]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a40      	ldr	r2, [pc, #256]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800497a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800497e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004980:	f7fc fd80 	bl	8001484 <HAL_GetTick>
 8004984:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004986:	e009      	b.n	800499c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004988:	f7fc fd7c 	bl	8001484 <HAL_GetTick>
 800498c:	4602      	mov	r2, r0
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	1ad3      	subs	r3, r2, r3
 8004992:	2b02      	cmp	r3, #2
 8004994:	d902      	bls.n	800499c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	73fb      	strb	r3, [r7, #15]
        break;
 800499a:	e005      	b.n	80049a8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800499c:	4b37      	ldr	r3, [pc, #220]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ef      	bne.n	8004988 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80049a8:	7bfb      	ldrb	r3, [r7, #15]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d160      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d111      	bne.n	80049d8 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049b4:	4b31      	ldr	r3, [pc, #196]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80049bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	6892      	ldr	r2, [r2, #8]
 80049c4:	0211      	lsls	r1, r2, #8
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	68d2      	ldr	r2, [r2, #12]
 80049ca:	0912      	lsrs	r2, r2, #4
 80049cc:	0452      	lsls	r2, r2, #17
 80049ce:	430a      	orrs	r2, r1
 80049d0:	492a      	ldr	r1, [pc, #168]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049d2:	4313      	orrs	r3, r2
 80049d4:	610b      	str	r3, [r1, #16]
 80049d6:	e027      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d112      	bne.n	8004a04 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80049de:	4b27      	ldr	r3, [pc, #156]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049e0:	691b      	ldr	r3, [r3, #16]
 80049e2:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 80049e6:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	6892      	ldr	r2, [r2, #8]
 80049ee:	0211      	lsls	r1, r2, #8
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6912      	ldr	r2, [r2, #16]
 80049f4:	0852      	lsrs	r2, r2, #1
 80049f6:	3a01      	subs	r2, #1
 80049f8:	0552      	lsls	r2, r2, #21
 80049fa:	430a      	orrs	r2, r1
 80049fc:	491f      	ldr	r1, [pc, #124]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 80049fe:	4313      	orrs	r3, r2
 8004a00:	610b      	str	r3, [r1, #16]
 8004a02:	e011      	b.n	8004a28 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004a04:	4b1d      	ldr	r3, [pc, #116]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004a0c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	6892      	ldr	r2, [r2, #8]
 8004a14:	0211      	lsls	r1, r2, #8
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	6952      	ldr	r2, [r2, #20]
 8004a1a:	0852      	lsrs	r2, r2, #1
 8004a1c:	3a01      	subs	r2, #1
 8004a1e:	0652      	lsls	r2, r2, #25
 8004a20:	430a      	orrs	r2, r1
 8004a22:	4916      	ldr	r1, [pc, #88]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a24:	4313      	orrs	r3, r2
 8004a26:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8004a28:	4b14      	ldr	r3, [pc, #80]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a13      	ldr	r2, [pc, #76]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a2e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004a32:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fc fd26 	bl	8001484 <HAL_GetTick>
 8004a38:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a3a:	e009      	b.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8004a3c:	f7fc fd22 	bl	8001484 <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	68bb      	ldr	r3, [r7, #8]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	2b02      	cmp	r3, #2
 8004a48:	d902      	bls.n	8004a50 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8004a4a:	2303      	movs	r3, #3
 8004a4c:	73fb      	strb	r3, [r7, #15]
          break;
 8004a4e:	e005      	b.n	8004a5c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8004a50:	4b0a      	ldr	r3, [pc, #40]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0ef      	beq.n	8004a3c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8004a5c:	7bfb      	ldrb	r3, [r7, #15]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d106      	bne.n	8004a70 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8004a62:	4b06      	ldr	r3, [pc, #24]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a64:	691a      	ldr	r2, [r3, #16]
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	4904      	ldr	r1, [pc, #16]	@ (8004a7c <RCCEx_PLLSAI1_Config+0x1e4>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8004a70:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a72:	4618      	mov	r0, r3
 8004a74:	3710      	adds	r7, #16
 8004a76:	46bd      	mov	sp, r7
 8004a78:	bd80      	pop	{r7, pc}
 8004a7a:	bf00      	nop
 8004a7c:	40021000 	.word	0x40021000

08004a80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004a8e:	4b6a      	ldr	r3, [pc, #424]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f003 0303 	and.w	r3, r3, #3
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d018      	beq.n	8004acc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8004a9a:	4b67      	ldr	r3, [pc, #412]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	f003 0203 	and.w	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	d10d      	bne.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
       ||
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d009      	beq.n	8004ac6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004ab2:	4b61      	ldr	r3, [pc, #388]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	091b      	lsrs	r3, r3, #4
 8004ab8:	f003 0307 	and.w	r3, r3, #7
 8004abc:	1c5a      	adds	r2, r3, #1
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	685b      	ldr	r3, [r3, #4]
       ||
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d047      	beq.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	73fb      	strb	r3, [r7, #15]
 8004aca:	e044      	b.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2b03      	cmp	r3, #3
 8004ad2:	d018      	beq.n	8004b06 <RCCEx_PLLSAI2_Config+0x86>
 8004ad4:	2b03      	cmp	r3, #3
 8004ad6:	d825      	bhi.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d002      	beq.n	8004ae2 <RCCEx_PLLSAI2_Config+0x62>
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d009      	beq.n	8004af4 <RCCEx_PLLSAI2_Config+0x74>
 8004ae0:	e020      	b.n	8004b24 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004ae2:	4b55      	ldr	r3, [pc, #340]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0302 	and.w	r3, r3, #2
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d11d      	bne.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004aee:	2301      	movs	r3, #1
 8004af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004af2:	e01a      	b.n	8004b2a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004af4:	4b50      	ldr	r3, [pc, #320]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d116      	bne.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004b00:	2301      	movs	r3, #1
 8004b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004b04:	e013      	b.n	8004b2e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8004b06:	4b4c      	ldr	r3, [pc, #304]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10f      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004b12:	4b49      	ldr	r3, [pc, #292]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8004b22:	e006      	b.n	8004b32 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8004b24:	2301      	movs	r3, #1
 8004b26:	73fb      	strb	r3, [r7, #15]
      break;
 8004b28:	e004      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2a:	bf00      	nop
 8004b2c:	e002      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b2e:	bf00      	nop
 8004b30:	e000      	b.n	8004b34 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8004b32:	bf00      	nop
    }

    if(status == HAL_OK)
 8004b34:	7bfb      	ldrb	r3, [r7, #15]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10d      	bne.n	8004b56 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6819      	ldr	r1, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	3b01      	subs	r3, #1
 8004b4c:	011b      	lsls	r3, r3, #4
 8004b4e:	430b      	orrs	r3, r1
 8004b50:	4939      	ldr	r1, [pc, #228]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b52:	4313      	orrs	r3, r2
 8004b54:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8004b56:	7bfb      	ldrb	r3, [r7, #15]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d167      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8004b5c:	4b36      	ldr	r3, [pc, #216]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	4a35      	ldr	r2, [pc, #212]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b68:	f7fc fc8c 	bl	8001484 <HAL_GetTick>
 8004b6c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b6e:	e009      	b.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004b70:	f7fc fc88 	bl	8001484 <HAL_GetTick>
 8004b74:	4602      	mov	r2, r0
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1ad3      	subs	r3, r2, r3
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d902      	bls.n	8004b84 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	73fb      	strb	r3, [r7, #15]
        break;
 8004b82:	e005      	b.n	8004b90 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004b84:	4b2c      	ldr	r3, [pc, #176]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1ef      	bne.n	8004b70 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004b90:	7bfb      	ldrb	r3, [r7, #15]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d14a      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004b96:	683b      	ldr	r3, [r7, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d111      	bne.n	8004bc0 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004b9c:	4b26      	ldr	r3, [pc, #152]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004ba4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004ba8:	687a      	ldr	r2, [r7, #4]
 8004baa:	6892      	ldr	r2, [r2, #8]
 8004bac:	0211      	lsls	r1, r2, #8
 8004bae:	687a      	ldr	r2, [r7, #4]
 8004bb0:	68d2      	ldr	r2, [r2, #12]
 8004bb2:	0912      	lsrs	r2, r2, #4
 8004bb4:	0452      	lsls	r2, r2, #17
 8004bb6:	430a      	orrs	r2, r1
 8004bb8:	491f      	ldr	r1, [pc, #124]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	614b      	str	r3, [r1, #20]
 8004bbe:	e011      	b.n	8004be4 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004bc0:	4b1d      	ldr	r3, [pc, #116]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bc2:	695b      	ldr	r3, [r3, #20]
 8004bc4:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004bc8:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004bcc:	687a      	ldr	r2, [r7, #4]
 8004bce:	6892      	ldr	r2, [r2, #8]
 8004bd0:	0211      	lsls	r1, r2, #8
 8004bd2:	687a      	ldr	r2, [r7, #4]
 8004bd4:	6912      	ldr	r2, [r2, #16]
 8004bd6:	0852      	lsrs	r2, r2, #1
 8004bd8:	3a01      	subs	r2, #1
 8004bda:	0652      	lsls	r2, r2, #25
 8004bdc:	430a      	orrs	r2, r1
 8004bde:	4916      	ldr	r1, [pc, #88]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be0:	4313      	orrs	r3, r2
 8004be2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004be4:	4b14      	ldr	r3, [pc, #80]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4a13      	ldr	r2, [pc, #76]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004bea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004bee:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bf0:	f7fc fc48 	bl	8001484 <HAL_GetTick>
 8004bf4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004bf6:	e009      	b.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8004bf8:	f7fc fc44 	bl	8001484 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	2b02      	cmp	r3, #2
 8004c04:	d902      	bls.n	8004c0c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	73fb      	strb	r3, [r7, #15]
          break;
 8004c0a:	e005      	b.n	8004c18 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d0ef      	beq.n	8004bf8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8004c1e:	4b06      	ldr	r3, [pc, #24]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c20:	695a      	ldr	r2, [r3, #20]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	4904      	ldr	r1, [pc, #16]	@ (8004c38 <RCCEx_PLLSAI2_Config+0x1b8>)
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8004c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3710      	adds	r7, #16
 8004c32:	46bd      	mov	sp, r7
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	bf00      	nop
 8004c38:	40021000 	.word	0x40021000

08004c3c <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b089      	sub	sp, #36	@ 0x24
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8004c46:	2300      	movs	r3, #0
 8004c48:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8004c4a:	2300      	movs	r3, #0
 8004c4c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004c58:	d10c      	bne.n	8004c74 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8004c5a:	4b6e      	ldr	r3, [pc, #440]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c60:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004c64:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c6c:	d112      	bne.n	8004c94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8004c6e:	4b6a      	ldr	r3, [pc, #424]	@ (8004e18 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004c70:	61fb      	str	r3, [r7, #28]
 8004c72:	e00f      	b.n	8004c94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c7a:	d10b      	bne.n	8004c94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004c7c:	4b65      	ldr	r3, [pc, #404]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004c7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004c82:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 8004c86:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004c8e:	d101      	bne.n	8004c94 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004c90:	4b61      	ldr	r3, [pc, #388]	@ (8004e18 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004c92:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	f040 80b4 	bne.w	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004ca0:	69bb      	ldr	r3, [r7, #24]
 8004ca2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004ca6:	d003      	beq.n	8004cb0 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cae:	d135      	bne.n	8004d1c <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004cb0:	4b58      	ldr	r3, [pc, #352]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cb8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004cbc:	f040 80a1 	bne.w	8004e02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004cc0:	4b54      	ldr	r3, [pc, #336]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	f000 809a 	beq.w	8004e02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cce:	4b51      	ldr	r3, [pc, #324]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	091b      	lsrs	r3, r3, #4
 8004cd4:	f003 0307 	and.w	r3, r3, #7
 8004cd8:	3301      	adds	r3, #1
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ce0:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004ce2:	4b4c      	ldr	r3, [pc, #304]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ce4:	68db      	ldr	r3, [r3, #12]
 8004ce6:	0a1b      	lsrs	r3, r3, #8
 8004ce8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004cec:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004cf4:	4b47      	ldr	r3, [pc, #284]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004cf6:	68db      	ldr	r3, [r3, #12]
 8004cf8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d002      	beq.n	8004d06 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004d00:	2311      	movs	r3, #17
 8004d02:	617b      	str	r3, [r7, #20]
 8004d04:	e001      	b.n	8004d0a <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 8004d06:	2307      	movs	r3, #7
 8004d08:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	68fa      	ldr	r2, [r7, #12]
 8004d0e:	fb03 f202 	mul.w	r2, r3, r2
 8004d12:	697b      	ldr	r3, [r7, #20]
 8004d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d18:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004d1a:	e072      	b.n	8004e02 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d133      	bne.n	8004d8a <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 8004d22:	4b3c      	ldr	r3, [pc, #240]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004d2a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004d2e:	d169      	bne.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004d30:	4b38      	ldr	r3, [pc, #224]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d063      	beq.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d3c:	4b35      	ldr	r3, [pc, #212]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d3e:	68db      	ldr	r3, [r3, #12]
 8004d40:	091b      	lsrs	r3, r3, #4
 8004d42:	f003 0307 	and.w	r3, r3, #7
 8004d46:	3301      	adds	r3, #1
 8004d48:	693a      	ldr	r2, [r7, #16]
 8004d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4e:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d50:	4b30      	ldr	r3, [pc, #192]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	0a1b      	lsrs	r3, r3, #8
 8004d56:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004d5a:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8004d5c:	697b      	ldr	r3, [r7, #20]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d10a      	bne.n	8004d78 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8004d62:	4b2c      	ldr	r3, [pc, #176]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d002      	beq.n	8004d74 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 8004d6e:	2311      	movs	r3, #17
 8004d70:	617b      	str	r3, [r7, #20]
 8004d72:	e001      	b.n	8004d78 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8004d74:	2307      	movs	r3, #7
 8004d76:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	fb03 f202 	mul.w	r2, r3, r2
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d86:	61fb      	str	r3, [r7, #28]
 8004d88:	e03c      	b.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8004d8a:	69bb      	ldr	r3, [r7, #24]
 8004d8c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d90:	d003      	beq.n	8004d9a <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d98:	d134      	bne.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8004d9a:	4b1e      	ldr	r3, [pc, #120]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004da2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004da6:	d12d      	bne.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8004da8:	4b1a      	ldr	r3, [pc, #104]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d027      	beq.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004db4:	4b17      	ldr	r3, [pc, #92]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004db6:	68db      	ldr	r3, [r3, #12]
 8004db8:	091b      	lsrs	r3, r3, #4
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	3301      	adds	r3, #1
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dc6:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8004dc8:	4b12      	ldr	r3, [pc, #72]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	0a1b      	lsrs	r3, r3, #8
 8004dce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004dd2:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d10a      	bne.n	8004df0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8004dda:	4b0e      	ldr	r3, [pc, #56]	@ (8004e14 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d002      	beq.n	8004dec <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 8004de6:	2311      	movs	r3, #17
 8004de8:	617b      	str	r3, [r7, #20]
 8004dea:	e001      	b.n	8004df0 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004dec:	2307      	movs	r3, #7
 8004dee:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004df0:	693b      	ldr	r3, [r7, #16]
 8004df2:	68fa      	ldr	r2, [r7, #12]
 8004df4:	fb03 f202 	mul.w	r2, r3, r2
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8004dfe:	61fb      	str	r3, [r7, #28]
 8004e00:	e000      	b.n	8004e04 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004e02:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004e04:	69fb      	ldr	r3, [r7, #28]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3724      	adds	r7, #36	@ 0x24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40021000 	.word	0x40021000
 8004e18:	001fff68 	.word	0x001fff68

08004e1c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
 8004e28:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8004e2a:	68bb      	ldr	r3, [r7, #8]
 8004e2c:	2b02      	cmp	r3, #2
 8004e2e:	d904      	bls.n	8004e3a <HAL_SAI_InitProtocol+0x1e>
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	3b03      	subs	r3, #3
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d812      	bhi.n	8004e5e <HAL_SAI_InitProtocol+0x42>
 8004e38:	e008      	b.n	8004e4c <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	68b9      	ldr	r1, [r7, #8]
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fc67 	bl	8005714 <SAI_InitI2S>
 8004e46:	4603      	mov	r3, r0
 8004e48:	75fb      	strb	r3, [r7, #23]
      break;
 8004e4a:	e00b      	b.n	8004e64 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8004e4c:	683b      	ldr	r3, [r7, #0]
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	68b9      	ldr	r1, [r7, #8]
 8004e52:	68f8      	ldr	r0, [r7, #12]
 8004e54:	f000 fd10 	bl	8005878 <SAI_InitPCM>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8004e5c:	e002      	b.n	8004e64 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	75fb      	strb	r3, [r7, #23]
      break;
 8004e62:	bf00      	nop
  }

  if (status == HAL_OK)
 8004e64:	7dfb      	ldrb	r3, [r7, #23]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d104      	bne.n	8004e74 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 8004e6a:	68f8      	ldr	r0, [r7, #12]
 8004e6c:	f000 f808 	bl	8004e80 <HAL_SAI_Init>
 8004e70:	4603      	mov	r3, r0
 8004e72:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e155      	b.n	800513e <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f7fc f85c 	bl	8000f64 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 fd9d 	bl	80059ec <SAI_Disable>
 8004eb2:	4603      	mov	r3, r0
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d001      	beq.n	8004ebc <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e140      	b.n	800513e <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d00c      	beq.n	8004ee6 <HAL_SAI_Init+0x66>
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d80d      	bhi.n	8004eec <HAL_SAI_Init+0x6c>
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d002      	beq.n	8004eda <HAL_SAI_Init+0x5a>
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d003      	beq.n	8004ee0 <HAL_SAI_Init+0x60>
 8004ed8:	e008      	b.n	8004eec <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004eda:	2300      	movs	r3, #0
 8004edc:	61fb      	str	r3, [r7, #28]
      break;
 8004ede:	e008      	b.n	8004ef2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004ee0:	2310      	movs	r3, #16
 8004ee2:	61fb      	str	r3, [r7, #28]
      break;
 8004ee4:	e005      	b.n	8004ef2 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004ee6:	2320      	movs	r3, #32
 8004ee8:	61fb      	str	r3, [r7, #28]
      break;
 8004eea:	e002      	b.n	8004ef2 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004eec:	2300      	movs	r3, #0
 8004eee:	61fb      	str	r3, [r7, #28]
      break;
 8004ef0:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	689b      	ldr	r3, [r3, #8]
 8004ef6:	2b03      	cmp	r3, #3
 8004ef8:	d81d      	bhi.n	8004f36 <HAL_SAI_Init+0xb6>
 8004efa:	a201      	add	r2, pc, #4	@ (adr r2, 8004f00 <HAL_SAI_Init+0x80>)
 8004efc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f00:	08004f11 	.word	0x08004f11
 8004f04:	08004f17 	.word	0x08004f17
 8004f08:	08004f1f 	.word	0x08004f1f
 8004f0c:	08004f27 	.word	0x08004f27
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	617b      	str	r3, [r7, #20]
      break;
 8004f14:	e012      	b.n	8004f3c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004f16:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004f1a:	617b      	str	r3, [r7, #20]
      break;
 8004f1c:	e00e      	b.n	8004f3c <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f1e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f22:	617b      	str	r3, [r7, #20]
      break;
 8004f24:	e00a      	b.n	8004f3c <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004f26:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004f2a:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	f043 0301 	orr.w	r3, r3, #1
 8004f32:	61fb      	str	r3, [r7, #28]
      break;
 8004f34:	e002      	b.n	8004f3c <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004f36:	2300      	movs	r3, #0
 8004f38:	617b      	str	r3, [r7, #20]
      break;
 8004f3a:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a81      	ldr	r2, [pc, #516]	@ (8005148 <HAL_SAI_Init+0x2c8>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_SAI_Init+0xd0>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a80      	ldr	r2, [pc, #512]	@ (800514c <HAL_SAI_Init+0x2cc>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d103      	bne.n	8004f58 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004f50:	4a7f      	ldr	r2, [pc, #508]	@ (8005150 <HAL_SAI_Init+0x2d0>)
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e002      	b.n	8004f5e <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004f58:	4a7e      	ldr	r2, [pc, #504]	@ (8005154 <HAL_SAI_Init+0x2d4>)
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	69db      	ldr	r3, [r3, #28]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d041      	beq.n	8004fea <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a77      	ldr	r2, [pc, #476]	@ (8005148 <HAL_SAI_Init+0x2c8>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d004      	beq.n	8004f7a <HAL_SAI_Init+0xfa>
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a75      	ldr	r2, [pc, #468]	@ (800514c <HAL_SAI_Init+0x2cc>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d105      	bne.n	8004f86 <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004f7a:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004f7e:	f7fe ff1d 	bl	8003dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8004f82:	6138      	str	r0, [r7, #16]
 8004f84:	e004      	b.n	8004f90 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004f86:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004f8a:	f7fe ff17 	bl	8003dbc <HAL_RCCEx_GetPeriphCLKFreq>
 8004f8e:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004f90:	693a      	ldr	r2, [r7, #16]
 8004f92:	4613      	mov	r3, r2
 8004f94:	009b      	lsls	r3, r3, #2
 8004f96:	4413      	add	r3, r2
 8004f98:	005b      	lsls	r3, r3, #1
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	69db      	ldr	r3, [r3, #28]
 8004fa0:	025b      	lsls	r3, r3, #9
 8004fa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fa6:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	4a6b      	ldr	r2, [pc, #428]	@ (8005158 <HAL_SAI_Init+0x2d8>)
 8004fac:	fba2 2303 	umull	r2, r3, r2, r3
 8004fb0:	08da      	lsrs	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004fb6:	68f9      	ldr	r1, [r7, #12]
 8004fb8:	4b67      	ldr	r3, [pc, #412]	@ (8005158 <HAL_SAI_Init+0x2d8>)
 8004fba:	fba3 2301 	umull	r2, r3, r3, r1
 8004fbe:	08da      	lsrs	r2, r3, #3
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	005b      	lsls	r3, r3, #1
 8004fc8:	1aca      	subs	r2, r1, r3
 8004fca:	2a08      	cmp	r2, #8
 8004fcc:	d904      	bls.n	8004fd8 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	1c5a      	adds	r2, r3, #1
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d104      	bne.n	8004fea <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6a1b      	ldr	r3, [r3, #32]
 8004fe4:	085a      	lsrs	r2, r3, #1
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	685b      	ldr	r3, [r3, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <HAL_SAI_Init+0x17a>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	2b02      	cmp	r3, #2
 8004ff8:	d109      	bne.n	800500e <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d101      	bne.n	8005006 <HAL_SAI_Init+0x186>
 8005002:	2300      	movs	r3, #0
 8005004:	e001      	b.n	800500a <HAL_SAI_Init+0x18a>
 8005006:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800500a:	61bb      	str	r3, [r7, #24]
 800500c:	e008      	b.n	8005020 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005012:	2b01      	cmp	r3, #1
 8005014:	d102      	bne.n	800501c <HAL_SAI_Init+0x19c>
 8005016:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800501a:	e000      	b.n	800501e <HAL_SAI_Init+0x19e>
 800501c:	2300      	movs	r3, #0
 800501e:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6819      	ldr	r1, [r3, #0]
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	4b4c      	ldr	r3, [pc, #304]	@ (800515c <HAL_SAI_Init+0x2dc>)
 800502c:	400b      	ands	r3, r1
 800502e:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	6819      	ldr	r1, [r3, #0]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	685a      	ldr	r2, [r3, #4]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800503e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005044:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800504a:	431a      	orrs	r2, r3
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8005058:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005064:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6a1b      	ldr	r3, [r3, #32]
 800506a:	051b      	lsls	r3, r3, #20
 800506c:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	687a      	ldr	r2, [r7, #4]
 800507e:	6812      	ldr	r2, [r2, #0]
 8005080:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8005084:	f023 030f 	bic.w	r3, r3, #15
 8005088:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6859      	ldr	r1, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	431a      	orrs	r2, r3
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800509e:	431a      	orrs	r2, r3
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	6899      	ldr	r1, [r3, #8]
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681a      	ldr	r2, [r3, #0]
 80050b2:	4b2b      	ldr	r3, [pc, #172]	@ (8005160 <HAL_SAI_Init+0x2e0>)
 80050b4:	400b      	ands	r3, r1
 80050b6:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	6899      	ldr	r1, [r3, #8]
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c2:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80050c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 80050ce:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 80050d4:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050da:	3b01      	subs	r3, #1
 80050dc:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80050de:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	430a      	orrs	r2, r1
 80050e6:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	68d9      	ldr	r1, [r3, #12]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681a      	ldr	r2, [r3, #0]
 80050f2:	f24f 0320 	movw	r3, #61472	@ 0xf020
 80050f6:	400b      	ands	r3, r1
 80050f8:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68d9      	ldr	r1, [r3, #12]
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005108:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800510e:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005110:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005116:	3b01      	subs	r3, #1
 8005118:	021b      	lsls	r3, r3, #8
 800511a:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	430a      	orrs	r2, r1
 8005122:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2200      	movs	r2, #0
 8005128:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 800513c:	2300      	movs	r3, #0
}
 800513e:	4618      	mov	r0, r3
 8005140:	3720      	adds	r7, #32
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40015404 	.word	0x40015404
 800514c:	40015424 	.word	0x40015424
 8005150:	40015400 	.word	0x40015400
 8005154:	40015800 	.word	0x40015800
 8005158:	cccccccd 	.word	0xcccccccd
 800515c:	ff05c010 	.word	0xff05c010
 8005160:	fff88000 	.word	0xfff88000

08005164 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800516c:	2300      	movs	r3, #0
 800516e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005176:	2b01      	cmp	r3, #1
 8005178:	d101      	bne.n	800517e <HAL_SAI_Abort+0x1a>
 800517a:	2302      	movs	r3, #2
 800517c:	e053      	b.n	8005226 <HAL_SAI_Abort+0xc2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2201      	movs	r2, #1
 8005182:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005186:	6878      	ldr	r0, [r7, #4]
 8005188:	f000 fc30 	bl	80059ec <SAI_Disable>
 800518c:	4603      	mov	r3, r0
 800518e:	2b00      	cmp	r3, #0
 8005190:	d001      	beq.n	8005196 <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80051a4:	d125      	bne.n	80051f2 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80051b4:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b12      	cmp	r3, #18
 80051c0:	d108      	bne.n	80051d4 <HAL_SAI_Abort+0x70>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d004      	beq.n	80051d4 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80051ce:	4618      	mov	r0, r3
 80051d0:	f7fc fbb2 	bl	8001938 <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b22      	cmp	r3, #34	@ 0x22
 80051de:	d108      	bne.n	80051f2 <HAL_SAI_Abort+0x8e>
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d004      	beq.n	80051f2 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051ec:	4618      	mov	r0, r3
 80051ee:	f7fc fba3 	bl	8001938 <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2200      	movs	r2, #0
 80051f8:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f04f 32ff 	mov.w	r2, #4294967295
 8005202:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	685a      	ldr	r2, [r3, #4]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f042 0208 	orr.w	r2, r2, #8
 8005212:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8005224:	7bfb      	ldrb	r3, [r7, #15]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
	...

08005230 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b086      	sub	sp, #24
 8005234:	af00      	add	r7, sp, #0
 8005236:	60f8      	str	r0, [r7, #12]
 8005238:	60b9      	str	r1, [r7, #8]
 800523a:	4613      	mov	r3, r2
 800523c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800523e:	f7fc f921 	bl	8001484 <HAL_GetTick>
 8005242:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d002      	beq.n	8005250 <HAL_SAI_Transmit_DMA+0x20>
 800524a:	88fb      	ldrh	r3, [r7, #6]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8005250:	2301      	movs	r3, #1
 8005252:	e093      	b.n	800537c <HAL_SAI_Transmit_DMA+0x14c>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800525a:	b2db      	uxtb	r3, r3
 800525c:	2b01      	cmp	r3, #1
 800525e:	f040 808c 	bne.w	800537a <HAL_SAI_Transmit_DMA+0x14a>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8005268:	2b01      	cmp	r3, #1
 800526a:	d101      	bne.n	8005270 <HAL_SAI_Transmit_DMA+0x40>
 800526c:	2302      	movs	r3, #2
 800526e:	e085      	b.n	800537c <HAL_SAI_Transmit_DMA+0x14c>
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    hsai->pBuffPtr = pData;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	68ba      	ldr	r2, [r7, #8]
 800527c:	665a      	str	r2, [r3, #100]	@ 0x64
    hsai->XferSize = Size;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	88fa      	ldrh	r2, [r7, #6]
 8005282:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    hsai->XferCount = Size;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	88fa      	ldrh	r2, [r7, #6]
 800528a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2212      	movs	r2, #18
 800529a:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052a2:	4a38      	ldr	r2, [pc, #224]	@ (8005384 <HAL_SAI_Transmit_DMA+0x154>)
 80052a4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052aa:	4a37      	ldr	r2, [pc, #220]	@ (8005388 <HAL_SAI_Transmit_DMA+0x158>)
 80052ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052b2:	4a36      	ldr	r2, [pc, #216]	@ (800538c <HAL_SAI_Transmit_DMA+0x15c>)
 80052b4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80052ba:	2200      	movs	r2, #0
 80052bc:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	6ed8      	ldr	r0, [r3, #108]	@ 0x6c
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80052c6:	4619      	mov	r1, r3
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	331c      	adds	r3, #28
 80052ce:	461a      	mov	r2, r3
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80052d6:	f7fc facf 	bl	8001878 <HAL_DMA_Start_IT>
 80052da:	4603      	mov	r3, r0
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d005      	beq.n	80052ec <HAL_SAI_Transmit_DMA+0xbc>
    {
      __HAL_UNLOCK(hsai);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      return  HAL_ERROR;
 80052e8:	2301      	movs	r3, #1
 80052ea:	e047      	b.n	800537c <HAL_SAI_Transmit_DMA+0x14c>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80052ec:	2100      	movs	r1, #0
 80052ee:	68f8      	ldr	r0, [r7, #12]
 80052f0:	f000 fb44 	bl	800597c <SAI_InterruptFlag>
 80052f4:	4601      	mov	r1, r0
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	691a      	ldr	r2, [r3, #16]
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	430a      	orrs	r2, r1
 8005302:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8005312:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005314:	e015      	b.n	8005342 <HAL_SAI_Transmit_DMA+0x112>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8005316:	f7fc f8b5 	bl	8001484 <HAL_GetTick>
 800531a:	4602      	mov	r2, r0
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	1ad3      	subs	r3, r2, r3
 8005320:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8005324:	d90d      	bls.n	8005342 <HAL_SAI_Transmit_DMA+0x112>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800532c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e01c      	b.n	800537c <HAL_SAI_Transmit_DMA+0x14c>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800534c:	2b00      	cmp	r3, #0
 800534e:	d0e2      	beq.n	8005316 <HAL_SAI_Transmit_DMA+0xe6>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d107      	bne.n	800536e <HAL_SAI_Transmit_DMA+0x13e>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800536c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	e000      	b.n	800537c <HAL_SAI_Transmit_DMA+0x14c>
  }
  else
  {
    return HAL_BUSY;
 800537a:	2302      	movs	r3, #2
  }
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}
 8005384:	08005abf 	.word	0x08005abf
 8005388:	08005a61 	.word	0x08005a61
 800538c:	08005adb 	.word	0x08005adb

08005390 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 800539e:	b2db      	uxtb	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	f000 8192 	beq.w	80056ca <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	695b      	ldr	r3, [r3, #20]
 80053ac:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	f003 0308 	and.w	r3, r3, #8
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d009      	beq.n	80053dc <HAL_SAI_IRQHandler+0x4c>
 80053c8:	693b      	ldr	r3, [r7, #16]
 80053ca:	f003 0308 	and.w	r3, r3, #8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d004      	beq.n	80053dc <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	4798      	blx	r3
 80053da:	e176      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	f003 0301 	and.w	r3, r3, #1
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d01e      	beq.n	8005424 <HAL_SAI_IRQHandler+0x94>
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f003 0301 	and.w	r3, r3, #1
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d019      	beq.n	8005424 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	2201      	movs	r2, #1
 80053f6:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 80053fe:	b2db      	uxtb	r3, r3
 8005400:	2b22      	cmp	r3, #34	@ 0x22
 8005402:	d101      	bne.n	8005408 <HAL_SAI_IRQHandler+0x78>
 8005404:	2301      	movs	r3, #1
 8005406:	e000      	b.n	800540a <HAL_SAI_IRQHandler+0x7a>
 8005408:	2302      	movs	r3, #2
 800540a:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	431a      	orrs	r2, r3
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 f96f 	bl	8005700 <HAL_SAI_ErrorCallback>
 8005422:	e152      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f003 0302 	and.w	r3, r3, #2
 800542a:	2b00      	cmp	r3, #0
 800542c:	d011      	beq.n	8005452 <HAL_SAI_IRQHandler+0xc2>
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	f003 0302 	and.w	r3, r3, #2
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00c      	beq.n	8005452 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	2202      	movs	r2, #2
 800543e:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005444:	2b00      	cmp	r3, #0
 8005446:	f000 8140 	beq.w	80056ca <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800544e:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8005450:	e13b      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8005452:	697b      	ldr	r3, [r7, #20]
 8005454:	f003 0320 	and.w	r3, r3, #32
 8005458:	2b00      	cmp	r3, #0
 800545a:	d055      	beq.n	8005508 <HAL_SAI_IRQHandler+0x178>
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	f003 0320 	and.w	r3, r3, #32
 8005462:	2b00      	cmp	r3, #0
 8005464:	d050      	beq.n	8005508 <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	2220      	movs	r2, #32
 800546c:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005474:	f043 0204 	orr.w	r2, r3, #4
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d038      	beq.n	80054fa <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d016      	beq.n	80054be <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005494:	4a8f      	ldr	r2, [pc, #572]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 8005496:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800549c:	4618      	mov	r0, r3
 800549e:	f7fc fa89 	bl	80019b4 <HAL_DMA_Abort_IT>
 80054a2:	4603      	mov	r3, r0
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d00a      	beq.n	80054be <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054ae:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80054b8:	6878      	ldr	r0, [r7, #4]
 80054ba:	f000 f921 	bl	8005700 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	f000 80fc 	beq.w	80056c0 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054cc:	4a81      	ldr	r2, [pc, #516]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 80054ce:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fc fa6d 	bl	80019b4 <HAL_DMA_Abort_IT>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f000 80ef 	beq.w	80056c0 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80054e8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80054f2:	6878      	ldr	r0, [r7, #4]
 80054f4:	f000 f904 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80054f8:	e0e2      	b.n	80056c0 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80054fa:	6878      	ldr	r0, [r7, #4]
 80054fc:	f7ff fe32 	bl	8005164 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005500:	6878      	ldr	r0, [r7, #4]
 8005502:	f000 f8fd 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005506:	e0db      	b.n	80056c0 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800550e:	2b00      	cmp	r3, #0
 8005510:	d055      	beq.n	80055be <HAL_SAI_IRQHandler+0x22e>
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005518:	2b00      	cmp	r3, #0
 800551a:	d050      	beq.n	80055be <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	2240      	movs	r2, #64	@ 0x40
 8005522:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800552a:	f043 0208 	orr.w	r2, r3, #8
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800553a:	2b00      	cmp	r3, #0
 800553c:	d038      	beq.n	80055b0 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005542:	2b00      	cmp	r3, #0
 8005544:	d016      	beq.n	8005574 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800554a:	4a62      	ldr	r2, [pc, #392]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 800554c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005552:	4618      	mov	r0, r3
 8005554:	f7fc fa2e 	bl	80019b4 <HAL_DMA_Abort_IT>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d00a      	beq.n	8005574 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005564:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800556e:	6878      	ldr	r0, [r7, #4]
 8005570:	f000 f8c6 	bl	8005700 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 80a3 	beq.w	80056c4 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005582:	4a54      	ldr	r2, [pc, #336]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 8005584:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800558a:	4618      	mov	r0, r3
 800558c:	f7fc fa12 	bl	80019b4 <HAL_DMA_Abort_IT>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	f000 8096 	beq.w	80056c4 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800559e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 80055a8:	6878      	ldr	r0, [r7, #4]
 80055aa:	f000 f8a9 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055ae:	e089      	b.n	80056c4 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 80055b0:	6878      	ldr	r0, [r7, #4]
 80055b2:	f7ff fdd7 	bl	8005164 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f8a2 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055bc:	e082      	b.n	80056c4 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f003 0304 	and.w	r3, r3, #4
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d061      	beq.n	800568c <HAL_SAI_IRQHandler+0x2fc>
 80055c8:	693b      	ldr	r3, [r7, #16]
 80055ca:	f003 0304 	and.w	r3, r3, #4
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d05c      	beq.n	800568c <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2204      	movs	r2, #4
 80055d8:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80055e0:	f043 0220 	orr.w	r2, r3, #32
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d036      	beq.n	8005662 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d016      	beq.n	800562a <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005600:	4a34      	ldr	r2, [pc, #208]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005608:	4618      	mov	r0, r3
 800560a:	f7fc f9d3 	bl	80019b4 <HAL_DMA_Abort_IT>
 800560e:	4603      	mov	r3, r0
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800561a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005624:	6878      	ldr	r0, [r7, #4]
 8005626:	f000 f86b 	bl	8005700 <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	2b00      	cmp	r3, #0
 8005630:	d04a      	beq.n	80056c8 <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005636:	4a27      	ldr	r2, [pc, #156]	@ (80056d4 <HAL_SAI_IRQHandler+0x344>)
 8005638:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563e:	4618      	mov	r0, r3
 8005640:	f7fc f9b8 	bl	80019b4 <HAL_DMA_Abort_IT>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d03e      	beq.n	80056c8 <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005650:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 f850 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005660:	e032      	b.n	80056c8 <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	2200      	movs	r2, #0
 8005668:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f04f 32ff 	mov.w	r2, #4294967295
 8005672:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2201      	movs	r2, #1
 8005678:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f000 f83b 	bl	8005700 <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800568a:	e01d      	b.n	80056c8 <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	f003 0310 	and.w	r3, r3, #16
 8005692:	2b00      	cmp	r3, #0
 8005694:	d019      	beq.n	80056ca <HAL_SAI_IRQHandler+0x33a>
 8005696:	693b      	ldr	r3, [r7, #16]
 8005698:	f003 0310 	and.w	r3, r3, #16
 800569c:	2b00      	cmp	r3, #0
 800569e:	d014      	beq.n	80056ca <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	2210      	movs	r2, #16
 80056a6:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80056ae:	f043 0210 	orr.w	r2, r3, #16
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f821 	bl	8005700 <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80056be:	e004      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056c0:	bf00      	nop
 80056c2:	e002      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056c4:	bf00      	nop
 80056c6:	e000      	b.n	80056ca <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80056c8:	bf00      	nop
}
 80056ca:	bf00      	nop
 80056cc:	3718      	adds	r7, #24
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	08005b2d 	.word	0x08005b2d

080056d8 <HAL_SAI_TxCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxCpltCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_SAI_TxHalfCpltCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_TxHalfCpltCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005714:	b480      	push	{r7}
 8005716:	b087      	sub	sp, #28
 8005718:	af00      	add	r7, sp, #0
 800571a:	60f8      	str	r0, [r7, #12]
 800571c:	60b9      	str	r1, [r7, #8]
 800571e:	607a      	str	r2, [r7, #4]
 8005720:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005722:	2300      	movs	r3, #0
 8005724:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2200      	movs	r2, #0
 8005730:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d003      	beq.n	8005742 <SAI_InitI2S+0x2e>
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	2b02      	cmp	r3, #2
 8005740:	d103      	bne.n	800574a <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005748:	e002      	b.n	8005750 <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2201      	movs	r2, #1
 800574e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005756:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800575e:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	2200      	movs	r2, #0
 8005764:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	f003 0301 	and.w	r3, r3, #1
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005776:	2301      	movs	r3, #1
 8005778:	e077      	b.n	800586a <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d107      	bne.n	8005790 <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	2200      	movs	r2, #0
 8005784:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800578c:	651a      	str	r2, [r3, #80]	@ 0x50
 800578e:	e006      	b.n	800579e <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005796:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2200      	movs	r2, #0
 800579c:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b03      	cmp	r3, #3
 80057a2:	d84f      	bhi.n	8005844 <SAI_InitI2S+0x130>
 80057a4:	a201      	add	r2, pc, #4	@ (adr r2, 80057ac <SAI_InitI2S+0x98>)
 80057a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057aa:	bf00      	nop
 80057ac:	080057bd 	.word	0x080057bd
 80057b0:	080057df 	.word	0x080057df
 80057b4:	08005801 	.word	0x08005801
 80057b8:	08005823 	.word	0x08005823
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2280      	movs	r2, #128	@ 0x80
 80057c0:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	085b      	lsrs	r3, r3, #1
 80057c6:	015a      	lsls	r2, r3, #5
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	085b      	lsrs	r3, r3, #1
 80057d0:	011a      	lsls	r2, r3, #4
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	2240      	movs	r2, #64	@ 0x40
 80057da:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80057dc:	e035      	b.n	800584a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	2280      	movs	r2, #128	@ 0x80
 80057e2:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	019a      	lsls	r2, r3, #6
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	085b      	lsrs	r3, r3, #1
 80057f2:	015a      	lsls	r2, r3, #5
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2280      	movs	r2, #128	@ 0x80
 80057fc:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80057fe:	e024      	b.n	800584a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	22c0      	movs	r2, #192	@ 0xc0
 8005804:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	085b      	lsrs	r3, r3, #1
 800580a:	019a      	lsls	r2, r3, #6
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	085b      	lsrs	r3, r3, #1
 8005814:	015a      	lsls	r2, r3, #5
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2280      	movs	r2, #128	@ 0x80
 800581e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005820:	e013      	b.n	800584a <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	22e0      	movs	r2, #224	@ 0xe0
 8005826:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	085b      	lsrs	r3, r3, #1
 800582c:	019a      	lsls	r2, r3, #6
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	015a      	lsls	r2, r3, #5
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	2280      	movs	r2, #128	@ 0x80
 8005840:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005842:	e002      	b.n	800584a <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005844:	2301      	movs	r3, #1
 8005846:	75fb      	strb	r3, [r7, #23]
      break;
 8005848:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800584a:	68bb      	ldr	r3, [r7, #8]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d10b      	bne.n	8005868 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d102      	bne.n	800585c <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2210      	movs	r2, #16
 800585a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d102      	bne.n	8005868 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	2208      	movs	r2, #8
 8005866:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005868:	7dfb      	ldrb	r3, [r7, #23]
}
 800586a:	4618      	mov	r0, r3
 800586c:	371c      	adds	r7, #28
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop

08005878 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005878:	b480      	push	{r7}
 800587a:	b087      	sub	sp, #28
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
 8005884:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005886:	2300      	movs	r3, #0
 8005888:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	2200      	movs	r2, #0
 800588e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	2200      	movs	r2, #0
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d003      	beq.n	80058a6 <SAI_InitPCM+0x2e>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d103      	bne.n	80058ae <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2201      	movs	r2, #1
 80058aa:	63da      	str	r2, [r3, #60]	@ 0x3c
 80058ac:	e002      	b.n	80058b4 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2200      	movs	r2, #0
 80058b2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80058c0:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80058c8:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80058dc:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b04      	cmp	r3, #4
 80058e2:	d103      	bne.n	80058ec <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2201      	movs	r2, #1
 80058e8:	645a      	str	r2, [r3, #68]	@ 0x44
 80058ea:	e002      	b.n	80058f2 <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	220d      	movs	r2, #13
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d837      	bhi.n	8005968 <SAI_InitPCM+0xf0>
 80058f8:	a201      	add	r2, pc, #4	@ (adr r2, 8005900 <SAI_InitPCM+0x88>)
 80058fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058fe:	bf00      	nop
 8005900:	08005911 	.word	0x08005911
 8005904:	08005927 	.word	0x08005927
 8005908:	0800593d 	.word	0x0800593d
 800590c:	08005953 	.word	0x08005953
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	2280      	movs	r2, #128	@ 0x80
 8005914:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005916:	683b      	ldr	r3, [r7, #0]
 8005918:	011a      	lsls	r2, r3, #4
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2240      	movs	r2, #64	@ 0x40
 8005922:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005924:	e023      	b.n	800596e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	2280      	movs	r2, #128	@ 0x80
 800592a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	015a      	lsls	r2, r3, #5
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2280      	movs	r2, #128	@ 0x80
 8005938:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800593a:	e018      	b.n	800596e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	22c0      	movs	r2, #192	@ 0xc0
 8005940:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	015a      	lsls	r2, r3, #5
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2280      	movs	r2, #128	@ 0x80
 800594e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005950:	e00d      	b.n	800596e <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	22e0      	movs	r2, #224	@ 0xe0
 8005956:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	015a      	lsls	r2, r3, #5
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2280      	movs	r2, #128	@ 0x80
 8005964:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005966:	e002      	b.n	800596e <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	75fb      	strb	r3, [r7, #23]
      break;
 800596c:	bf00      	nop
  }

  return status;
 800596e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005970:	4618      	mov	r0, r3
 8005972:	371c      	adds	r7, #28
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 800597c:	b480      	push	{r7}
 800597e:	b085      	sub	sp, #20
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	460b      	mov	r3, r1
 8005986:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8005988:	2301      	movs	r3, #1
 800598a:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 800598c:	78fb      	ldrb	r3, [r7, #3]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d103      	bne.n	800599a <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f043 0308 	orr.w	r3, r3, #8
 8005998:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599e:	2b08      	cmp	r3, #8
 80059a0:	d10b      	bne.n	80059ba <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80059a6:	2b03      	cmp	r3, #3
 80059a8:	d003      	beq.n	80059b2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	685b      	ldr	r3, [r3, #4]
 80059ae:	2b01      	cmp	r3, #1
 80059b0:	d103      	bne.n	80059ba <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	f043 0310 	orr.w	r3, r3, #16
 80059b8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	685b      	ldr	r3, [r3, #4]
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d003      	beq.n	80059ca <SAI_InterruptFlag+0x4e>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	2b02      	cmp	r3, #2
 80059c8:	d104      	bne.n	80059d4 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80059d0:	60fb      	str	r3, [r7, #12]
 80059d2:	e003      	b.n	80059dc <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	f043 0304 	orr.w	r3, r3, #4
 80059da:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 80059dc:	68fb      	ldr	r3, [r7, #12]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3714      	adds	r7, #20
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr
	...

080059ec <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 80059f4:	4b18      	ldr	r3, [pc, #96]	@ (8005a58 <SAI_Disable+0x6c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4a18      	ldr	r2, [pc, #96]	@ (8005a5c <SAI_Disable+0x70>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	0b1b      	lsrs	r3, r3, #12
 8005a00:	009b      	lsls	r3, r3, #2
 8005a02:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005a04:	2300      	movs	r3, #0
 8005a06:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005a16:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d10a      	bne.n	8005a34 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005a24:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 8005a2e:	2303      	movs	r3, #3
 8005a30:	72fb      	strb	r3, [r7, #11]
      break;
 8005a32:	e009      	b.n	8005a48 <SAI_Disable+0x5c>
    }
    count--;
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	3b01      	subs	r3, #1
 8005a38:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d1e7      	bne.n	8005a18 <SAI_Disable+0x2c>

  return status;
 8005a48:	7afb      	ldrb	r3, [r7, #11]
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a54:	4770      	bx	lr
 8005a56:	bf00      	nop
 8005a58:	20000000 	.word	0x20000000
 8005a5c:	95cbec1b 	.word	0x95cbec1b

08005a60 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b084      	sub	sp, #16
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a6c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d01c      	beq.n	8005ab0 <SAI_DMATxCplt+0x50>
  {
    hsai->XferCount = 0;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005a8c:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8005a8e:	2100      	movs	r1, #0
 8005a90:	68f8      	ldr	r0, [r7, #12]
 8005a92:	f7ff ff73 	bl	800597c <SAI_InterruptFlag>
 8005a96:	4603      	mov	r3, r0
 8005a98:	43d9      	mvns	r1, r3
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	691a      	ldr	r2, [r3, #16]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	400a      	ands	r2, r1
 8005aa6:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8005ab0:	68f8      	ldr	r0, [r7, #12]
 8005ab2:	f7ff fe11 	bl	80056d8 <HAL_SAI_TxCpltCallback>
#endif
}
 8005ab6:	bf00      	nop
 8005ab8:	3710      	adds	r7, #16
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005aca:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8005acc:	68f8      	ldr	r0, [r7, #12]
 8005ace:	f7ff fe0d 	bl	80056ec <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8005ad2:	bf00      	nop
 8005ad4:	3710      	adds	r7, #16
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae6:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005aee:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	681a      	ldr	r2, [r3, #0]
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b06:	601a      	str	r2, [r3, #0]

  /* Disable SAI peripheral */
  /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
  (void) SAI_Disable(hsai);
 8005b08:	68f8      	ldr	r0, [r7, #12]
 8005b0a:	f7ff ff6f 	bl	80059ec <SAI_Disable>

  /* Set the SAI state ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	2201      	movs	r2, #1
 8005b12:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f7ff fdee 	bl	8005700 <HAL_SAI_ErrorCallback>
#endif
}
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b38:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	681a      	ldr	r2, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005b48:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f04f 32ff 	mov.w	r2, #4294967295
 8005b5a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005b62:	2b20      	cmp	r3, #32
 8005b64:	d00a      	beq.n	8005b7c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005b66:	68f8      	ldr	r0, [r7, #12]
 8005b68:	f7ff ff40 	bl	80059ec <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	685a      	ldr	r2, [r3, #4]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f042 0208 	orr.w	r2, r2, #8
 8005b7a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2201      	movs	r2, #1
 8005b80:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8005b8c:	68f8      	ldr	r0, [r7, #12]
 8005b8e:	f7ff fdb7 	bl	8005700 <HAL_SAI_ErrorCallback>
#endif
}
 8005b92:	bf00      	nop
 8005b94:	3710      	adds	r7, #16
 8005b96:	46bd      	mov	sp, r7
 8005b98:	bd80      	pop	{r7, pc}

08005b9a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e095      	b.n	8005cd8 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d108      	bne.n	8005bc6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	685b      	ldr	r3, [r3, #4]
 8005bb8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bbc:	d009      	beq.n	8005bd2 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	61da      	str	r2, [r3, #28]
 8005bc4:	e005      	b.n	8005bd2 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2200      	movs	r2, #0
 8005bd0:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	2200      	movs	r2, #0
 8005bd6:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d106      	bne.n	8005bf2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2200      	movs	r2, #0
 8005be8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f7fb f8f3 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2202      	movs	r2, #2
 8005bf6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c08:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	68db      	ldr	r3, [r3, #12]
 8005c0e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c12:	d902      	bls.n	8005c1a <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005c14:	2300      	movs	r3, #0
 8005c16:	60fb      	str	r3, [r7, #12]
 8005c18:	e002      	b.n	8005c20 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005c1a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005c1e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	68db      	ldr	r3, [r3, #12]
 8005c24:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8005c28:	d007      	beq.n	8005c3a <HAL_SPI_Init+0xa0>
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005c32:	d002      	beq.n	8005c3a <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2200      	movs	r2, #0
 8005c38:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	689b      	ldr	r3, [r3, #8]
 8005c46:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005c4a:	431a      	orrs	r2, r3
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	691b      	ldr	r3, [r3, #16]
 8005c50:	f003 0302 	and.w	r3, r3, #2
 8005c54:	431a      	orrs	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	431a      	orrs	r2, r3
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	699b      	ldr	r3, [r3, #24]
 8005c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005c68:	431a      	orrs	r2, r3
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	69db      	ldr	r3, [r3, #28]
 8005c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005c72:	431a      	orrs	r2, r3
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6a1b      	ldr	r3, [r3, #32]
 8005c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7c:	ea42 0103 	orr.w	r1, r2, r3
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	430a      	orrs	r2, r1
 8005c8e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	699b      	ldr	r3, [r3, #24]
 8005c94:	0c1b      	lsrs	r3, r3, #16
 8005c96:	f003 0204 	and.w	r2, r3, #4
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9e:	f003 0310 	and.w	r3, r3, #16
 8005ca2:	431a      	orrs	r2, r3
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005ca8:	f003 0308 	and.w	r3, r3, #8
 8005cac:	431a      	orrs	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005cb6:	ea42 0103 	orr.w	r1, r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	430a      	orrs	r2, r1
 8005cc6:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005cd6:	2300      	movs	r3, #0
}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	3710      	adds	r7, #16
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	bd80      	pop	{r7, pc}

08005ce0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b088      	sub	sp, #32
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	60f8      	str	r0, [r7, #12]
 8005ce8:	60b9      	str	r1, [r7, #8]
 8005cea:	603b      	str	r3, [r7, #0]
 8005cec:	4613      	mov	r3, r2
 8005cee:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005cf0:	f7fb fbc8 	bl	8001484 <HAL_GetTick>
 8005cf4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005cf6:	88fb      	ldrh	r3, [r7, #6]
 8005cf8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8005d00:	b2db      	uxtb	r3, r3
 8005d02:	2b01      	cmp	r3, #1
 8005d04:	d001      	beq.n	8005d0a <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
 8005d08:	e15c      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d002      	beq.n	8005d16 <HAL_SPI_Transmit+0x36>
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e154      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d101      	bne.n	8005d28 <HAL_SPI_Transmit+0x48>
 8005d24:	2302      	movs	r3, #2
 8005d26:	e14d      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2203      	movs	r2, #3
 8005d34:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2200      	movs	r2, #0
 8005d3c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	68ba      	ldr	r2, [r7, #8]
 8005d42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	88fa      	ldrh	r2, [r7, #6]
 8005d48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	88fa      	ldrh	r2, [r7, #6]
 8005d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2200      	movs	r2, #0
 8005d54:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	2200      	movs	r2, #0
 8005d62:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d7a:	d10f      	bne.n	8005d9c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d8a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d9a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005da6:	2b40      	cmp	r3, #64	@ 0x40
 8005da8:	d007      	beq.n	8005dba <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005dc2:	d952      	bls.n	8005e6a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d002      	beq.n	8005dd2 <HAL_SPI_Transmit+0xf2>
 8005dcc:	8b7b      	ldrh	r3, [r7, #26]
 8005dce:	2b01      	cmp	r3, #1
 8005dd0:	d145      	bne.n	8005e5e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd6:	881a      	ldrh	r2, [r3, #0]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005de2:	1c9a      	adds	r2, r3, #2
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005dec:	b29b      	uxth	r3, r3
 8005dee:	3b01      	subs	r3, #1
 8005df0:	b29a      	uxth	r2, r3
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005df6:	e032      	b.n	8005e5e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	689b      	ldr	r3, [r3, #8]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d112      	bne.n	8005e2c <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e0a:	881a      	ldrh	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e16:	1c9a      	adds	r2, r3, #2
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e20:	b29b      	uxth	r3, r3
 8005e22:	3b01      	subs	r3, #1
 8005e24:	b29a      	uxth	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005e2a:	e018      	b.n	8005e5e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005e2c:	f7fb fb2a 	bl	8001484 <HAL_GetTick>
 8005e30:	4602      	mov	r2, r0
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	1ad3      	subs	r3, r2, r3
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d803      	bhi.n	8005e44 <HAL_SPI_Transmit+0x164>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e42:	d102      	bne.n	8005e4a <HAL_SPI_Transmit+0x16a>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e0b2      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e62:	b29b      	uxth	r3, r3
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d1c7      	bne.n	8005df8 <HAL_SPI_Transmit+0x118>
 8005e68:	e083      	b.n	8005f72 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <HAL_SPI_Transmit+0x198>
 8005e72:	8b7b      	ldrh	r3, [r7, #26]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d177      	bne.n	8005f68 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b01      	cmp	r3, #1
 8005e80:	d912      	bls.n	8005ea8 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	881a      	ldrh	r2, [r3, #0]
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e92:	1c9a      	adds	r2, r3, #2
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b02      	subs	r3, #2
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ea6:	e05f      	b.n	8005f68 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	330c      	adds	r3, #12
 8005eb2:	7812      	ldrb	r2, [r2, #0]
 8005eb4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eba:	1c5a      	adds	r2, r3, #1
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ec4:	b29b      	uxth	r3, r3
 8005ec6:	3b01      	subs	r3, #1
 8005ec8:	b29a      	uxth	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005ece:	e04b      	b.n	8005f68 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	689b      	ldr	r3, [r3, #8]
 8005ed6:	f003 0302 	and.w	r3, r3, #2
 8005eda:	2b02      	cmp	r3, #2
 8005edc:	d12b      	bne.n	8005f36 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d912      	bls.n	8005f0e <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eec:	881a      	ldrh	r2, [r3, #0]
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b02      	subs	r3, #2
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f0c:	e02c      	b.n	8005f68 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	330c      	adds	r3, #12
 8005f18:	7812      	ldrb	r2, [r2, #0]
 8005f1a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f20:	1c5a      	adds	r2, r3, #1
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	3b01      	subs	r3, #1
 8005f2e:	b29a      	uxth	r2, r3
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005f34:	e018      	b.n	8005f68 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f36:	f7fb faa5 	bl	8001484 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	69fb      	ldr	r3, [r7, #28]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	683a      	ldr	r2, [r7, #0]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d803      	bhi.n	8005f4e <HAL_SPI_Transmit+0x26e>
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f4c:	d102      	bne.n	8005f54 <HAL_SPI_Transmit+0x274>
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d109      	bne.n	8005f68 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	2200      	movs	r2, #0
 8005f60:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e02d      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d1ae      	bne.n	8005ed0 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005f72:	69fa      	ldr	r2, [r7, #28]
 8005f74:	6839      	ldr	r1, [r7, #0]
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 f946 	bl	8006208 <SPI_EndRxTxTransaction>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d002      	beq.n	8005f88 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	2220      	movs	r2, #32
 8005f86:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d10a      	bne.n	8005fa6 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005f90:	2300      	movs	r3, #0
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68db      	ldr	r3, [r3, #12]
 8005f9a:	617b      	str	r3, [r7, #20]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	617b      	str	r3, [r7, #20]
 8005fa4:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2201      	movs	r2, #1
 8005faa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d001      	beq.n	8005fc2 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e000      	b.n	8005fc4 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
  }
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3720      	adds	r7, #32
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b088      	sub	sp, #32
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	60f8      	str	r0, [r7, #12]
 8005fd4:	60b9      	str	r1, [r7, #8]
 8005fd6:	603b      	str	r3, [r7, #0]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005fdc:	f7fb fa52 	bl	8001484 <HAL_GetTick>
 8005fe0:	4602      	mov	r2, r0
 8005fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fe4:	1a9b      	subs	r3, r3, r2
 8005fe6:	683a      	ldr	r2, [r7, #0]
 8005fe8:	4413      	add	r3, r2
 8005fea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005fec:	f7fb fa4a 	bl	8001484 <HAL_GetTick>
 8005ff0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005ff2:	4b39      	ldr	r3, [pc, #228]	@ (80060d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	015b      	lsls	r3, r3, #5
 8005ff8:	0d1b      	lsrs	r3, r3, #20
 8005ffa:	69fa      	ldr	r2, [r7, #28]
 8005ffc:	fb02 f303 	mul.w	r3, r2, r3
 8006000:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006002:	e054      	b.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800600a:	d050      	beq.n	80060ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800600c:	f7fb fa3a 	bl	8001484 <HAL_GetTick>
 8006010:	4602      	mov	r2, r0
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	69fa      	ldr	r2, [r7, #28]
 8006018:	429a      	cmp	r2, r3
 800601a:	d902      	bls.n	8006022 <SPI_WaitFlagStateUntilTimeout+0x56>
 800601c:	69fb      	ldr	r3, [r7, #28]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d13d      	bne.n	800609e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006030:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	685b      	ldr	r3, [r3, #4]
 8006036:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800603a:	d111      	bne.n	8006060 <SPI_WaitFlagStateUntilTimeout+0x94>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	689b      	ldr	r3, [r3, #8]
 8006040:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006044:	d004      	beq.n	8006050 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	689b      	ldr	r3, [r3, #8]
 800604a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800604e:	d107      	bne.n	8006060 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	681a      	ldr	r2, [r3, #0]
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800605e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006064:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006068:	d10f      	bne.n	800608a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006078:	601a      	str	r2, [r3, #0]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006088:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2201      	movs	r2, #1
 800608e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e017      	b.n	80060ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d101      	bne.n	80060a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80060a4:	2300      	movs	r3, #0
 80060a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80060a8:	697b      	ldr	r3, [r7, #20]
 80060aa:	3b01      	subs	r3, #1
 80060ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	689a      	ldr	r2, [r3, #8]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	4013      	ands	r3, r2
 80060b8:	68ba      	ldr	r2, [r7, #8]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	bf0c      	ite	eq
 80060be:	2301      	moveq	r3, #1
 80060c0:	2300      	movne	r3, #0
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	461a      	mov	r2, r3
 80060c6:	79fb      	ldrb	r3, [r7, #7]
 80060c8:	429a      	cmp	r2, r3
 80060ca:	d19b      	bne.n	8006004 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80060cc:	2300      	movs	r3, #0
}
 80060ce:	4618      	mov	r0, r3
 80060d0:	3720      	adds	r7, #32
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop
 80060d8:	20000000 	.word	0x20000000

080060dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b08a      	sub	sp, #40	@ 0x28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80060ea:	2300      	movs	r3, #0
 80060ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80060ee:	f7fb f9c9 	bl	8001484 <HAL_GetTick>
 80060f2:	4602      	mov	r2, r0
 80060f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060f6:	1a9b      	subs	r3, r3, r2
 80060f8:	683a      	ldr	r2, [r7, #0]
 80060fa:	4413      	add	r3, r2
 80060fc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80060fe:	f7fb f9c1 	bl	8001484 <HAL_GetTick>
 8006102:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	330c      	adds	r3, #12
 800610a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800610c:	4b3d      	ldr	r3, [pc, #244]	@ (8006204 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800610e:	681a      	ldr	r2, [r3, #0]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	00da      	lsls	r2, r3, #3
 8006118:	1ad3      	subs	r3, r2, r3
 800611a:	0d1b      	lsrs	r3, r3, #20
 800611c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800611e:	fb02 f303 	mul.w	r3, r2, r3
 8006122:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006124:	e060      	b.n	80061e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800612c:	d107      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0x62>
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d104      	bne.n	800613e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	781b      	ldrb	r3, [r3, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800613c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006144:	d050      	beq.n	80061e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006146:	f7fb f99d 	bl	8001484 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	6a3b      	ldr	r3, [r7, #32]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006152:	429a      	cmp	r2, r3
 8006154:	d902      	bls.n	800615c <SPI_WaitFifoStateUntilTimeout+0x80>
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	2b00      	cmp	r3, #0
 800615a:	d13d      	bne.n	80061d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	685a      	ldr	r2, [r3, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800616a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	685b      	ldr	r3, [r3, #4]
 8006170:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006174:	d111      	bne.n	800619a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	689b      	ldr	r3, [r3, #8]
 800617a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800617e:	d004      	beq.n	800618a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006188:	d107      	bne.n	800619a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006198:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800619e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061a2:	d10f      	bne.n	80061c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061b2:	601a      	str	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2200      	movs	r2, #0
 80061d0:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80061d4:	2303      	movs	r3, #3
 80061d6:	e010      	b.n	80061fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061d8:	69bb      	ldr	r3, [r7, #24]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80061de:	2300      	movs	r3, #0
 80061e0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	3b01      	subs	r3, #1
 80061e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	689a      	ldr	r2, [r3, #8]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	4013      	ands	r3, r2
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d196      	bne.n	8006126 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80061f8:	2300      	movs	r3, #0
}
 80061fa:	4618      	mov	r0, r3
 80061fc:	3728      	adds	r7, #40	@ 0x28
 80061fe:	46bd      	mov	sp, r7
 8006200:	bd80      	pop	{r7, pc}
 8006202:	bf00      	nop
 8006204:	20000000 	.word	0x20000000

08006208 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af02      	add	r7, sp, #8
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	9300      	str	r3, [sp, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2200      	movs	r2, #0
 800621c:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f7ff ff5b 	bl	80060dc <SPI_WaitFifoStateUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d007      	beq.n	800623c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006230:	f043 0220 	orr.w	r2, r3, #32
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006238:	2303      	movs	r3, #3
 800623a:	e027      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	9300      	str	r3, [sp, #0]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	2200      	movs	r2, #0
 8006244:	2180      	movs	r1, #128	@ 0x80
 8006246:	68f8      	ldr	r0, [r7, #12]
 8006248:	f7ff fec0 	bl	8005fcc <SPI_WaitFlagStateUntilTimeout>
 800624c:	4603      	mov	r3, r0
 800624e:	2b00      	cmp	r3, #0
 8006250:	d007      	beq.n	8006262 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006256:	f043 0220 	orr.w	r2, r3, #32
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800625e:	2303      	movs	r3, #3
 8006260:	e014      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	9300      	str	r3, [sp, #0]
 8006266:	68bb      	ldr	r3, [r7, #8]
 8006268:	2200      	movs	r2, #0
 800626a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 800626e:	68f8      	ldr	r0, [r7, #12]
 8006270:	f7ff ff34 	bl	80060dc <SPI_WaitFifoStateUntilTimeout>
 8006274:	4603      	mov	r3, r0
 8006276:	2b00      	cmp	r3, #0
 8006278:	d007      	beq.n	800628a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800627e:	f043 0220 	orr.w	r2, r3, #32
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8006286:	2303      	movs	r3, #3
 8006288:	e000      	b.n	800628c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800628a:	2300      	movs	r3, #0
}
 800628c:	4618      	mov	r0, r3
 800628e:	3710      	adds	r7, #16
 8006290:	46bd      	mov	sp, r7
 8006292:	bd80      	pop	{r7, pc}

08006294 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006294:	b580      	push	{r7, lr}
 8006296:	b082      	sub	sp, #8
 8006298:	af00      	add	r7, sp, #0
 800629a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d101      	bne.n	80062a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062a2:	2301      	movs	r3, #1
 80062a4:	e040      	b.n	8006328 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d106      	bne.n	80062bc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f7fa fdf0 	bl	8000e9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2224      	movs	r2, #36	@ 0x24
 80062c0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	681a      	ldr	r2, [r3, #0]
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f022 0201 	bic.w	r2, r2, #1
 80062d0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d002      	beq.n	80062e0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fe90 	bl	8007000 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fbd5 	bl	8006a90 <UART_SetConfig>
 80062e6:	4603      	mov	r3, r0
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d101      	bne.n	80062f0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80062ec:	2301      	movs	r3, #1
 80062ee:	e01b      	b.n	8006328 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	685a      	ldr	r2, [r3, #4]
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80062fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	689a      	ldr	r2, [r3, #8]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800630e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	681a      	ldr	r2, [r3, #0]
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	f042 0201 	orr.w	r2, r2, #1
 800631e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f000 ff0f 	bl	8007144 <UART_CheckIdleState>
 8006326:	4603      	mov	r3, r0
}
 8006328:	4618      	mov	r0, r3
 800632a:	3708      	adds	r7, #8
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08a      	sub	sp, #40	@ 0x28
 8006334:	af02      	add	r7, sp, #8
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8006344:	2b20      	cmp	r3, #32
 8006346:	d177      	bne.n	8006438 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d002      	beq.n	8006354 <HAL_UART_Transmit+0x24>
 800634e:	88fb      	ldrh	r3, [r7, #6]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d101      	bne.n	8006358 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006354:	2301      	movs	r3, #1
 8006356:	e070      	b.n	800643a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2221      	movs	r2, #33	@ 0x21
 8006364:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006366:	f7fb f88d 	bl	8001484 <HAL_GetTick>
 800636a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	88fa      	ldrh	r2, [r7, #6]
 8006370:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	88fa      	ldrh	r2, [r7, #6]
 8006378:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006384:	d108      	bne.n	8006398 <HAL_UART_Transmit+0x68>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	691b      	ldr	r3, [r3, #16]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d104      	bne.n	8006398 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006392:	68bb      	ldr	r3, [r7, #8]
 8006394:	61bb      	str	r3, [r7, #24]
 8006396:	e003      	b.n	80063a0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800639c:	2300      	movs	r3, #0
 800639e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80063a0:	e02f      	b.n	8006402 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	9300      	str	r3, [sp, #0]
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	2200      	movs	r2, #0
 80063aa:	2180      	movs	r1, #128	@ 0x80
 80063ac:	68f8      	ldr	r0, [r7, #12]
 80063ae:	f000 ff71 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 80063b2:	4603      	mov	r3, r0
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	d004      	beq.n	80063c2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	2220      	movs	r2, #32
 80063bc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80063be:	2303      	movs	r3, #3
 80063c0:	e03b      	b.n	800643a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 80063c2:	69fb      	ldr	r3, [r7, #28]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d10b      	bne.n	80063e0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80063c8:	69bb      	ldr	r3, [r7, #24]
 80063ca:	881a      	ldrh	r2, [r3, #0]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80063d4:	b292      	uxth	r2, r2
 80063d6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	3302      	adds	r3, #2
 80063dc:	61bb      	str	r3, [r7, #24]
 80063de:	e007      	b.n	80063f0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	781a      	ldrb	r2, [r3, #0]
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3301      	adds	r3, #1
 80063ee:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 80063f6:	b29b      	uxth	r3, r3
 80063f8:	3b01      	subs	r3, #1
 80063fa:	b29a      	uxth	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8006408:	b29b      	uxth	r3, r3
 800640a:	2b00      	cmp	r3, #0
 800640c:	d1c9      	bne.n	80063a2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	9300      	str	r3, [sp, #0]
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	2200      	movs	r2, #0
 8006416:	2140      	movs	r1, #64	@ 0x40
 8006418:	68f8      	ldr	r0, [r7, #12]
 800641a:	f000 ff3b 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d004      	beq.n	800642e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	2220      	movs	r2, #32
 8006428:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e005      	b.n	800643a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2220      	movs	r2, #32
 8006432:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8006434:	2300      	movs	r3, #0
 8006436:	e000      	b.n	800643a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8006438:	2302      	movs	r3, #2
  }
}
 800643a:	4618      	mov	r0, r3
 800643c:	3720      	adds	r7, #32
 800643e:	46bd      	mov	sp, r7
 8006440:	bd80      	pop	{r7, pc}
	...

08006444 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006444:	b580      	push	{r7, lr}
 8006446:	b0ba      	sub	sp, #232	@ 0xe8
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	69db      	ldr	r3, [r3, #28]
 8006452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800646a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800646e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8006472:	4013      	ands	r3, r2
 8006474:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8006478:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800647c:	2b00      	cmp	r3, #0
 800647e:	d115      	bne.n	80064ac <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006480:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006484:	f003 0320 	and.w	r3, r3, #32
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00f      	beq.n	80064ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800648c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d009      	beq.n	80064ac <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800649c:	2b00      	cmp	r3, #0
 800649e:	f000 82ca 	beq.w	8006a36 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
      }
      return;
 80064aa:	e2c4      	b.n	8006a36 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80064ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	f000 8117 	beq.w	80066e4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80064b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80064ba:	f003 0301 	and.w	r3, r3, #1
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d106      	bne.n	80064d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80064c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80064c6:	4b85      	ldr	r3, [pc, #532]	@ (80066dc <HAL_UART_IRQHandler+0x298>)
 80064c8:	4013      	ands	r3, r2
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	f000 810a 	beq.w	80066e4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80064d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d011      	beq.n	8006500 <HAL_UART_IRQHandler+0xbc>
 80064dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80064e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d00b      	beq.n	8006500 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	2201      	movs	r2, #1
 80064ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80064f6:	f043 0201 	orr.w	r2, r3, #1
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006500:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006504:	f003 0302 	and.w	r3, r3, #2
 8006508:	2b00      	cmp	r3, #0
 800650a:	d011      	beq.n	8006530 <HAL_UART_IRQHandler+0xec>
 800650c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006510:	f003 0301 	and.w	r3, r3, #1
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00b      	beq.n	8006530 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2202      	movs	r2, #2
 800651e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006526:	f043 0204 	orr.w	r2, r3, #4
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d011      	beq.n	8006560 <HAL_UART_IRQHandler+0x11c>
 800653c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006540:	f003 0301 	and.w	r3, r3, #1
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2204      	movs	r2, #4
 800654e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006556:	f043 0202 	orr.w	r2, r3, #2
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006560:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006564:	f003 0308 	and.w	r3, r3, #8
 8006568:	2b00      	cmp	r3, #0
 800656a:	d017      	beq.n	800659c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800656c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006570:	f003 0320 	and.w	r3, r3, #32
 8006574:	2b00      	cmp	r3, #0
 8006576:	d105      	bne.n	8006584 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006578:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800657c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006580:	2b00      	cmp	r3, #0
 8006582:	d00b      	beq.n	800659c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	2208      	movs	r2, #8
 800658a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006592:	f043 0208 	orr.w	r2, r3, #8
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800659c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d012      	beq.n	80065ce <HAL_UART_IRQHandler+0x18a>
 80065a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ac:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d00c      	beq.n	80065ce <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80065bc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065c4:	f043 0220 	orr.w	r2, r3, #32
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f000 8230 	beq.w	8006a3a <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80065da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80065de:	f003 0320 	and.w	r3, r3, #32
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d00d      	beq.n	8006602 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80065e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80065ea:	f003 0320 	and.w	r3, r3, #32
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d007      	beq.n	8006602 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d003      	beq.n	8006602 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006608:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006616:	2b40      	cmp	r3, #64	@ 0x40
 8006618:	d005      	beq.n	8006626 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800661a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800661e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006622:	2b00      	cmp	r3, #0
 8006624:	d04f      	beq.n	80066c6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006626:	6878      	ldr	r0, [r7, #4]
 8006628:	f000 fea1 	bl	800736e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	689b      	ldr	r3, [r3, #8]
 8006632:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006636:	2b40      	cmp	r3, #64	@ 0x40
 8006638:	d141      	bne.n	80066be <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	3308      	adds	r3, #8
 8006640:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006644:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006650:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006654:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006658:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	3308      	adds	r3, #8
 8006662:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006666:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800666a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800666e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006672:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8006676:	e841 2300 	strex	r3, r2, [r1]
 800667a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800667e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1d9      	bne.n	800663a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800668a:	2b00      	cmp	r3, #0
 800668c:	d013      	beq.n	80066b6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006692:	4a13      	ldr	r2, [pc, #76]	@ (80066e0 <HAL_UART_IRQHandler+0x29c>)
 8006694:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800669a:	4618      	mov	r0, r3
 800669c:	f7fb f98a 	bl	80019b4 <HAL_DMA_Abort_IT>
 80066a0:	4603      	mov	r3, r0
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d017      	beq.n	80066d6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80066b0:	4610      	mov	r0, r2
 80066b2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066b4:	e00f      	b.n	80066d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f9d4 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066bc:	e00b      	b.n	80066d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 f9d0 	bl	8006a64 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066c4:	e007      	b.n	80066d6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80066c6:	6878      	ldr	r0, [r7, #4]
 80066c8:	f000 f9cc 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80066d4:	e1b1      	b.n	8006a3a <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80066d6:	bf00      	nop
    return;
 80066d8:	e1af      	b.n	8006a3a <HAL_UART_IRQHandler+0x5f6>
 80066da:	bf00      	nop
 80066dc:	04000120 	.word	0x04000120
 80066e0:	08007437 	.word	0x08007437

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80066e8:	2b01      	cmp	r3, #1
 80066ea:	f040 816a 	bne.w	80069c2 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80066ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066f2:	f003 0310 	and.w	r3, r3, #16
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	f000 8163 	beq.w	80069c2 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80066fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	f000 815c 	beq.w	80069c2 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2210      	movs	r2, #16
 8006710:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	689b      	ldr	r3, [r3, #8]
 8006718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800671c:	2b40      	cmp	r3, #64	@ 0x40
 800671e:	f040 80d4 	bne.w	80068ca <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	685b      	ldr	r3, [r3, #4]
 800672a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800672e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 80ad 	beq.w	8006892 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800673e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006742:	429a      	cmp	r2, r3
 8006744:	f080 80a5 	bcs.w	8006892 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800674e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f003 0320 	and.w	r3, r3, #32
 800675e:	2b00      	cmp	r3, #0
 8006760:	f040 8086 	bne.w	8006870 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800676c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006770:	e853 3f00 	ldrex	r3, [r3]
 8006774:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006778:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800677c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006780:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	461a      	mov	r2, r3
 800678a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800678e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006792:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006796:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800679a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800679e:	e841 2300 	strex	r3, r2, [r1]
 80067a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80067a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d1da      	bne.n	8006764 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	3308      	adds	r3, #8
 80067b4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067b6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80067b8:	e853 3f00 	ldrex	r3, [r3]
 80067bc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80067be:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80067c0:	f023 0301 	bic.w	r3, r3, #1
 80067c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	3308      	adds	r3, #8
 80067ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80067d2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80067d6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067d8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80067da:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80067e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e1      	bne.n	80067ae <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	3308      	adds	r3, #8
 80067f0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067f2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80067f4:	e853 3f00 	ldrex	r3, [r3]
 80067f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80067fa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80067fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006800:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	3308      	adds	r3, #8
 800680a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800680e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006810:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006812:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006814:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006816:	e841 2300 	strex	r3, r2, [r1]
 800681a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800681c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800681e:	2b00      	cmp	r3, #0
 8006820:	d1e3      	bne.n	80067ea <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2220      	movs	r2, #32
 8006826:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006836:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006838:	e853 3f00 	ldrex	r3, [r3]
 800683c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800683e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006840:	f023 0310 	bic.w	r3, r3, #16
 8006844:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	461a      	mov	r2, r3
 800684e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006852:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006854:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006856:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006858:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800685a:	e841 2300 	strex	r3, r2, [r1]
 800685e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006860:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006862:	2b00      	cmp	r3, #0
 8006864:	d1e4      	bne.n	8006830 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800686a:	4618      	mov	r0, r3
 800686c:	f7fb f864 	bl	8001938 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2202      	movs	r2, #2
 8006874:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006882:	b29b      	uxth	r3, r3
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	b29b      	uxth	r3, r3
 8006888:	4619      	mov	r1, r3
 800688a:	6878      	ldr	r0, [r7, #4]
 800688c:	f000 f8f4 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006890:	e0d5      	b.n	8006a3e <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006898:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800689c:	429a      	cmp	r2, r3
 800689e:	f040 80ce 	bne.w	8006a3e <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0320 	and.w	r3, r3, #32
 80068ae:	2b20      	cmp	r3, #32
 80068b0:	f040 80c5 	bne.w	8006a3e <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	2202      	movs	r2, #2
 80068b8:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80068c0:	4619      	mov	r1, r3
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f8d8 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
      return;
 80068c8:	e0b9      	b.n	8006a3e <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80068e4:	b29b      	uxth	r3, r3
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f000 80ab 	beq.w	8006a42 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80068ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f000 80a6 	beq.w	8006a42 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068fe:	e853 3f00 	ldrex	r3, [r3]
 8006902:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006904:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006906:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800690a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	461a      	mov	r2, r3
 8006914:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006918:	647b      	str	r3, [r7, #68]	@ 0x44
 800691a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800691c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800691e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006920:	e841 2300 	strex	r3, r2, [r1]
 8006924:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006926:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006928:	2b00      	cmp	r3, #0
 800692a:	d1e4      	bne.n	80068f6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3308      	adds	r3, #8
 8006932:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006936:	e853 3f00 	ldrex	r3, [r3]
 800693a:	623b      	str	r3, [r7, #32]
   return(result);
 800693c:	6a3b      	ldr	r3, [r7, #32]
 800693e:	f023 0301 	bic.w	r3, r3, #1
 8006942:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	3308      	adds	r3, #8
 800694c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006950:	633a      	str	r2, [r7, #48]	@ 0x30
 8006952:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006954:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006956:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006958:	e841 2300 	strex	r3, r2, [r1]
 800695c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800695e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1e3      	bne.n	800692c <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	2220      	movs	r2, #32
 8006968:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	2200      	movs	r2, #0
 8006970:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2200      	movs	r2, #0
 8006976:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	60fb      	str	r3, [r7, #12]
   return(result);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f023 0310 	bic.w	r3, r3, #16
 800698c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	461a      	mov	r2, r3
 8006996:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800699a:	61fb      	str	r3, [r7, #28]
 800699c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69b9      	ldr	r1, [r7, #24]
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	617b      	str	r3, [r7, #20]
   return(result);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e4      	bne.n	8006978 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2202      	movs	r2, #2
 80069b2:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80069b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f000 f85c 	bl	8006a78 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80069c0:	e03f      	b.n	8006a42 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80069c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d00e      	beq.n	80069ec <HAL_UART_IRQHandler+0x5a8>
 80069ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80069d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d008      	beq.n	80069ec <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80069e2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fd66 	bl	80074b6 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80069ea:	e02d      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80069ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80069f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d00e      	beq.n	8006a16 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80069f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80069fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d008      	beq.n	8006a16 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d01c      	beq.n	8006a46 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006a10:	6878      	ldr	r0, [r7, #4]
 8006a12:	4798      	blx	r3
    }
    return;
 8006a14:	e017      	b.n	8006a46 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006a1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d012      	beq.n	8006a48 <HAL_UART_IRQHandler+0x604>
 8006a22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006a26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d00c      	beq.n	8006a48 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fd17 	bl	8007462 <UART_EndTransmit_IT>
    return;
 8006a34:	e008      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
      return;
 8006a36:	bf00      	nop
 8006a38:	e006      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
    return;
 8006a3a:	bf00      	nop
 8006a3c:	e004      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
      return;
 8006a3e:	bf00      	nop
 8006a40:	e002      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
      return;
 8006a42:	bf00      	nop
 8006a44:	e000      	b.n	8006a48 <HAL_UART_IRQHandler+0x604>
    return;
 8006a46:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006a48:	37e8      	adds	r7, #232	@ 0xe8
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop

08006a50 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006a50:	b480      	push	{r7}
 8006a52:	b083      	sub	sp, #12
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006a58:	bf00      	nop
 8006a5a:	370c      	adds	r7, #12
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a62:	4770      	bx	lr

08006a64 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006a6c:	bf00      	nop
 8006a6e:	370c      	adds	r7, #12
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr

08006a78 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	460b      	mov	r3, r1
 8006a82:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006a84:	bf00      	nop
 8006a86:	370c      	adds	r7, #12
 8006a88:	46bd      	mov	sp, r7
 8006a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8e:	4770      	bx	lr

08006a90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006a90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006a94:	b08a      	sub	sp, #40	@ 0x28
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	689a      	ldr	r2, [r3, #8]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	691b      	ldr	r3, [r3, #16]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	431a      	orrs	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	69db      	ldr	r3, [r3, #28]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	4ba4      	ldr	r3, [pc, #656]	@ (8006d50 <UART_SetConfig+0x2c0>)
 8006ac0:	4013      	ands	r3, r2
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	6812      	ldr	r2, [r2, #0]
 8006ac6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006ac8:	430b      	orrs	r3, r1
 8006aca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	68da      	ldr	r2, [r3, #12]
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	430a      	orrs	r2, r1
 8006ae0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	699b      	ldr	r3, [r3, #24]
 8006ae6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	4a99      	ldr	r2, [pc, #612]	@ (8006d54 <UART_SetConfig+0x2c4>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d004      	beq.n	8006afc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006af8:	4313      	orrs	r3, r2
 8006afa:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	689b      	ldr	r3, [r3, #8]
 8006b02:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b0c:	430a      	orrs	r2, r1
 8006b0e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	4a90      	ldr	r2, [pc, #576]	@ (8006d58 <UART_SetConfig+0x2c8>)
 8006b16:	4293      	cmp	r3, r2
 8006b18:	d126      	bne.n	8006b68 <UART_SetConfig+0xd8>
 8006b1a:	4b90      	ldr	r3, [pc, #576]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006b1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b20:	f003 0303 	and.w	r3, r3, #3
 8006b24:	2b03      	cmp	r3, #3
 8006b26:	d81b      	bhi.n	8006b60 <UART_SetConfig+0xd0>
 8006b28:	a201      	add	r2, pc, #4	@ (adr r2, 8006b30 <UART_SetConfig+0xa0>)
 8006b2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b2e:	bf00      	nop
 8006b30:	08006b41 	.word	0x08006b41
 8006b34:	08006b51 	.word	0x08006b51
 8006b38:	08006b49 	.word	0x08006b49
 8006b3c:	08006b59 	.word	0x08006b59
 8006b40:	2301      	movs	r3, #1
 8006b42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b46:	e116      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b48:	2302      	movs	r3, #2
 8006b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b4e:	e112      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b50:	2304      	movs	r3, #4
 8006b52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b56:	e10e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b58:	2308      	movs	r3, #8
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b5e:	e10a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b60:	2310      	movs	r3, #16
 8006b62:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006b66:	e106      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a7c      	ldr	r2, [pc, #496]	@ (8006d60 <UART_SetConfig+0x2d0>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d138      	bne.n	8006be4 <UART_SetConfig+0x154>
 8006b72:	4b7a      	ldr	r3, [pc, #488]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006b74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006b78:	f003 030c 	and.w	r3, r3, #12
 8006b7c:	2b0c      	cmp	r3, #12
 8006b7e:	d82d      	bhi.n	8006bdc <UART_SetConfig+0x14c>
 8006b80:	a201      	add	r2, pc, #4	@ (adr r2, 8006b88 <UART_SetConfig+0xf8>)
 8006b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b86:	bf00      	nop
 8006b88:	08006bbd 	.word	0x08006bbd
 8006b8c:	08006bdd 	.word	0x08006bdd
 8006b90:	08006bdd 	.word	0x08006bdd
 8006b94:	08006bdd 	.word	0x08006bdd
 8006b98:	08006bcd 	.word	0x08006bcd
 8006b9c:	08006bdd 	.word	0x08006bdd
 8006ba0:	08006bdd 	.word	0x08006bdd
 8006ba4:	08006bdd 	.word	0x08006bdd
 8006ba8:	08006bc5 	.word	0x08006bc5
 8006bac:	08006bdd 	.word	0x08006bdd
 8006bb0:	08006bdd 	.word	0x08006bdd
 8006bb4:	08006bdd 	.word	0x08006bdd
 8006bb8:	08006bd5 	.word	0x08006bd5
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bc2:	e0d8      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bc4:	2302      	movs	r3, #2
 8006bc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bca:	e0d4      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bcc:	2304      	movs	r3, #4
 8006bce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bd2:	e0d0      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bd4:	2308      	movs	r3, #8
 8006bd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006bda:	e0cc      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006bdc:	2310      	movs	r3, #16
 8006bde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006be2:	e0c8      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a5e      	ldr	r2, [pc, #376]	@ (8006d64 <UART_SetConfig+0x2d4>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d125      	bne.n	8006c3a <UART_SetConfig+0x1aa>
 8006bee:	4b5b      	ldr	r3, [pc, #364]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006bf4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006bf8:	2b30      	cmp	r3, #48	@ 0x30
 8006bfa:	d016      	beq.n	8006c2a <UART_SetConfig+0x19a>
 8006bfc:	2b30      	cmp	r3, #48	@ 0x30
 8006bfe:	d818      	bhi.n	8006c32 <UART_SetConfig+0x1a2>
 8006c00:	2b20      	cmp	r3, #32
 8006c02:	d00a      	beq.n	8006c1a <UART_SetConfig+0x18a>
 8006c04:	2b20      	cmp	r3, #32
 8006c06:	d814      	bhi.n	8006c32 <UART_SetConfig+0x1a2>
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d002      	beq.n	8006c12 <UART_SetConfig+0x182>
 8006c0c:	2b10      	cmp	r3, #16
 8006c0e:	d008      	beq.n	8006c22 <UART_SetConfig+0x192>
 8006c10:	e00f      	b.n	8006c32 <UART_SetConfig+0x1a2>
 8006c12:	2300      	movs	r3, #0
 8006c14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c18:	e0ad      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c20:	e0a9      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c22:	2304      	movs	r3, #4
 8006c24:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c28:	e0a5      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c2a:	2308      	movs	r3, #8
 8006c2c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c30:	e0a1      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c32:	2310      	movs	r3, #16
 8006c34:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c38:	e09d      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d68 <UART_SetConfig+0x2d8>)
 8006c40:	4293      	cmp	r3, r2
 8006c42:	d125      	bne.n	8006c90 <UART_SetConfig+0x200>
 8006c44:	4b45      	ldr	r3, [pc, #276]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006c4a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006c4e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c50:	d016      	beq.n	8006c80 <UART_SetConfig+0x1f0>
 8006c52:	2bc0      	cmp	r3, #192	@ 0xc0
 8006c54:	d818      	bhi.n	8006c88 <UART_SetConfig+0x1f8>
 8006c56:	2b80      	cmp	r3, #128	@ 0x80
 8006c58:	d00a      	beq.n	8006c70 <UART_SetConfig+0x1e0>
 8006c5a:	2b80      	cmp	r3, #128	@ 0x80
 8006c5c:	d814      	bhi.n	8006c88 <UART_SetConfig+0x1f8>
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d002      	beq.n	8006c68 <UART_SetConfig+0x1d8>
 8006c62:	2b40      	cmp	r3, #64	@ 0x40
 8006c64:	d008      	beq.n	8006c78 <UART_SetConfig+0x1e8>
 8006c66:	e00f      	b.n	8006c88 <UART_SetConfig+0x1f8>
 8006c68:	2300      	movs	r3, #0
 8006c6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c6e:	e082      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c70:	2302      	movs	r3, #2
 8006c72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c76:	e07e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c78:	2304      	movs	r3, #4
 8006c7a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c7e:	e07a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c80:	2308      	movs	r3, #8
 8006c82:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c86:	e076      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c88:	2310      	movs	r3, #16
 8006c8a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006c8e:	e072      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a35      	ldr	r2, [pc, #212]	@ (8006d6c <UART_SetConfig+0x2dc>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d12a      	bne.n	8006cf0 <UART_SetConfig+0x260>
 8006c9a:	4b30      	ldr	r3, [pc, #192]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006c9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ca0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ca4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006ca8:	d01a      	beq.n	8006ce0 <UART_SetConfig+0x250>
 8006caa:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006cae:	d81b      	bhi.n	8006ce8 <UART_SetConfig+0x258>
 8006cb0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cb4:	d00c      	beq.n	8006cd0 <UART_SetConfig+0x240>
 8006cb6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006cba:	d815      	bhi.n	8006ce8 <UART_SetConfig+0x258>
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d003      	beq.n	8006cc8 <UART_SetConfig+0x238>
 8006cc0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006cc4:	d008      	beq.n	8006cd8 <UART_SetConfig+0x248>
 8006cc6:	e00f      	b.n	8006ce8 <UART_SetConfig+0x258>
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cce:	e052      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cd6:	e04e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cd8:	2304      	movs	r3, #4
 8006cda:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cde:	e04a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006ce0:	2308      	movs	r3, #8
 8006ce2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006ce6:	e046      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006ce8:	2310      	movs	r3, #16
 8006cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006cee:	e042      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a17      	ldr	r2, [pc, #92]	@ (8006d54 <UART_SetConfig+0x2c4>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d13a      	bne.n	8006d70 <UART_SetConfig+0x2e0>
 8006cfa:	4b18      	ldr	r3, [pc, #96]	@ (8006d5c <UART_SetConfig+0x2cc>)
 8006cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006d00:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006d04:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d08:	d01a      	beq.n	8006d40 <UART_SetConfig+0x2b0>
 8006d0a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006d0e:	d81b      	bhi.n	8006d48 <UART_SetConfig+0x2b8>
 8006d10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d14:	d00c      	beq.n	8006d30 <UART_SetConfig+0x2a0>
 8006d16:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d1a:	d815      	bhi.n	8006d48 <UART_SetConfig+0x2b8>
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d003      	beq.n	8006d28 <UART_SetConfig+0x298>
 8006d20:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006d24:	d008      	beq.n	8006d38 <UART_SetConfig+0x2a8>
 8006d26:	e00f      	b.n	8006d48 <UART_SetConfig+0x2b8>
 8006d28:	2300      	movs	r3, #0
 8006d2a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d2e:	e022      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d30:	2302      	movs	r3, #2
 8006d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d36:	e01e      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d38:	2304      	movs	r3, #4
 8006d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d3e:	e01a      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d40:	2308      	movs	r3, #8
 8006d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d46:	e016      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d48:	2310      	movs	r3, #16
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006d4e:	e012      	b.n	8006d76 <UART_SetConfig+0x2e6>
 8006d50:	efff69f3 	.word	0xefff69f3
 8006d54:	40008000 	.word	0x40008000
 8006d58:	40013800 	.word	0x40013800
 8006d5c:	40021000 	.word	0x40021000
 8006d60:	40004400 	.word	0x40004400
 8006d64:	40004800 	.word	0x40004800
 8006d68:	40004c00 	.word	0x40004c00
 8006d6c:	40005000 	.word	0x40005000
 8006d70:	2310      	movs	r3, #16
 8006d72:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	4a9f      	ldr	r2, [pc, #636]	@ (8006ff8 <UART_SetConfig+0x568>)
 8006d7c:	4293      	cmp	r3, r2
 8006d7e:	d17a      	bne.n	8006e76 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006d80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006d84:	2b08      	cmp	r3, #8
 8006d86:	d824      	bhi.n	8006dd2 <UART_SetConfig+0x342>
 8006d88:	a201      	add	r2, pc, #4	@ (adr r2, 8006d90 <UART_SetConfig+0x300>)
 8006d8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d8e:	bf00      	nop
 8006d90:	08006db5 	.word	0x08006db5
 8006d94:	08006dd3 	.word	0x08006dd3
 8006d98:	08006dbd 	.word	0x08006dbd
 8006d9c:	08006dd3 	.word	0x08006dd3
 8006da0:	08006dc3 	.word	0x08006dc3
 8006da4:	08006dd3 	.word	0x08006dd3
 8006da8:	08006dd3 	.word	0x08006dd3
 8006dac:	08006dd3 	.word	0x08006dd3
 8006db0:	08006dcb 	.word	0x08006dcb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006db4:	f7fc fc8c 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8006db8:	61f8      	str	r0, [r7, #28]
        break;
 8006dba:	e010      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006dbc:	4b8f      	ldr	r3, [pc, #572]	@ (8006ffc <UART_SetConfig+0x56c>)
 8006dbe:	61fb      	str	r3, [r7, #28]
        break;
 8006dc0:	e00d      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006dc2:	f7fc fbed 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8006dc6:	61f8      	str	r0, [r7, #28]
        break;
 8006dc8:	e009      	b.n	8006dde <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006dca:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006dce:	61fb      	str	r3, [r7, #28]
        break;
 8006dd0:	e005      	b.n	8006dde <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ddc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006dde:	69fb      	ldr	r3, [r7, #28]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	f000 80fb 	beq.w	8006fdc <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	685a      	ldr	r2, [r3, #4]
 8006dea:	4613      	mov	r3, r2
 8006dec:	005b      	lsls	r3, r3, #1
 8006dee:	4413      	add	r3, r2
 8006df0:	69fa      	ldr	r2, [r7, #28]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d305      	bcc.n	8006e02 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	685b      	ldr	r3, [r3, #4]
 8006dfa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006dfc:	69fa      	ldr	r2, [r7, #28]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d903      	bls.n	8006e0a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8006e02:	2301      	movs	r3, #1
 8006e04:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e08:	e0e8      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	461c      	mov	r4, r3
 8006e10:	4615      	mov	r5, r2
 8006e12:	f04f 0200 	mov.w	r2, #0
 8006e16:	f04f 0300 	mov.w	r3, #0
 8006e1a:	022b      	lsls	r3, r5, #8
 8006e1c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8006e20:	0222      	lsls	r2, r4, #8
 8006e22:	68f9      	ldr	r1, [r7, #12]
 8006e24:	6849      	ldr	r1, [r1, #4]
 8006e26:	0849      	lsrs	r1, r1, #1
 8006e28:	2000      	movs	r0, #0
 8006e2a:	4688      	mov	r8, r1
 8006e2c:	4681      	mov	r9, r0
 8006e2e:	eb12 0a08 	adds.w	sl, r2, r8
 8006e32:	eb43 0b09 	adc.w	fp, r3, r9
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	685b      	ldr	r3, [r3, #4]
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	603b      	str	r3, [r7, #0]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e44:	4650      	mov	r0, sl
 8006e46:	4659      	mov	r1, fp
 8006e48:	f7f9 fa12 	bl	8000270 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4613      	mov	r3, r2
 8006e52:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006e5a:	d308      	bcc.n	8006e6e <UART_SetConfig+0x3de>
 8006e5c:	69bb      	ldr	r3, [r7, #24]
 8006e5e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006e62:	d204      	bcs.n	8006e6e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	60da      	str	r2, [r3, #12]
 8006e6c:	e0b6      	b.n	8006fdc <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8006e6e:	2301      	movs	r3, #1
 8006e70:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006e74:	e0b2      	b.n	8006fdc <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	69db      	ldr	r3, [r3, #28]
 8006e7a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006e7e:	d15e      	bne.n	8006f3e <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006e80:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006e84:	2b08      	cmp	r3, #8
 8006e86:	d828      	bhi.n	8006eda <UART_SetConfig+0x44a>
 8006e88:	a201      	add	r2, pc, #4	@ (adr r2, 8006e90 <UART_SetConfig+0x400>)
 8006e8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e8e:	bf00      	nop
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006edb 	.word	0x08006edb
 8006ea0:	08006ecb 	.word	0x08006ecb
 8006ea4:	08006edb 	.word	0x08006edb
 8006ea8:	08006edb 	.word	0x08006edb
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006ed3 	.word	0x08006ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb4:	f7fc fc0c 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	61f8      	str	r0, [r7, #28]
        break;
 8006eba:	e014      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ebc:	f7fc fc1e 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8006ec0:	61f8      	str	r0, [r7, #28]
        break;
 8006ec2:	e010      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec4:	4b4d      	ldr	r3, [pc, #308]	@ (8006ffc <UART_SetConfig+0x56c>)
 8006ec6:	61fb      	str	r3, [r7, #28]
        break;
 8006ec8:	e00d      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fc fb69 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8006ece:	61f8      	str	r0, [r7, #28]
        break;
 8006ed0:	e009      	b.n	8006ee6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006ed6:	61fb      	str	r3, [r7, #28]
        break;
 8006ed8:	e005      	b.n	8006ee6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ee6:	69fb      	ldr	r3, [r7, #28]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d077      	beq.n	8006fdc <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eec:	69fb      	ldr	r3, [r7, #28]
 8006eee:	005a      	lsls	r2, r3, #1
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	085b      	lsrs	r3, r3, #1
 8006ef6:	441a      	add	r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	2b0f      	cmp	r3, #15
 8006f06:	d916      	bls.n	8006f36 <UART_SetConfig+0x4a6>
 8006f08:	69bb      	ldr	r3, [r7, #24]
 8006f0a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006f0e:	d212      	bcs.n	8006f36 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f10:	69bb      	ldr	r3, [r7, #24]
 8006f12:	b29b      	uxth	r3, r3
 8006f14:	f023 030f 	bic.w	r3, r3, #15
 8006f18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f1a:	69bb      	ldr	r3, [r7, #24]
 8006f1c:	085b      	lsrs	r3, r3, #1
 8006f1e:	b29b      	uxth	r3, r3
 8006f20:	f003 0307 	and.w	r3, r3, #7
 8006f24:	b29a      	uxth	r2, r3
 8006f26:	8afb      	ldrh	r3, [r7, #22]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	8afa      	ldrh	r2, [r7, #22]
 8006f32:	60da      	str	r2, [r3, #12]
 8006f34:	e052      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006f36:	2301      	movs	r3, #1
 8006f38:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006f3c:	e04e      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006f42:	2b08      	cmp	r3, #8
 8006f44:	d827      	bhi.n	8006f96 <UART_SetConfig+0x506>
 8006f46:	a201      	add	r2, pc, #4	@ (adr r2, 8006f4c <UART_SetConfig+0x4bc>)
 8006f48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4c:	08006f71 	.word	0x08006f71
 8006f50:	08006f79 	.word	0x08006f79
 8006f54:	08006f81 	.word	0x08006f81
 8006f58:	08006f97 	.word	0x08006f97
 8006f5c:	08006f87 	.word	0x08006f87
 8006f60:	08006f97 	.word	0x08006f97
 8006f64:	08006f97 	.word	0x08006f97
 8006f68:	08006f97 	.word	0x08006f97
 8006f6c:	08006f8f 	.word	0x08006f8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f70:	f7fc fbae 	bl	80036d0 <HAL_RCC_GetPCLK1Freq>
 8006f74:	61f8      	str	r0, [r7, #28]
        break;
 8006f76:	e014      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f78:	f7fc fbc0 	bl	80036fc <HAL_RCC_GetPCLK2Freq>
 8006f7c:	61f8      	str	r0, [r7, #28]
        break;
 8006f7e:	e010      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f80:	4b1e      	ldr	r3, [pc, #120]	@ (8006ffc <UART_SetConfig+0x56c>)
 8006f82:	61fb      	str	r3, [r7, #28]
        break;
 8006f84:	e00d      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f86:	f7fc fb0b 	bl	80035a0 <HAL_RCC_GetSysClockFreq>
 8006f8a:	61f8      	str	r0, [r7, #28]
        break;
 8006f8c:	e009      	b.n	8006fa2 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006f92:	61fb      	str	r3, [r7, #28]
        break;
 8006f94:	e005      	b.n	8006fa2 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006f96:	2300      	movs	r3, #0
 8006f98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006f9a:	2301      	movs	r3, #1
 8006f9c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006fa0:	bf00      	nop
    }

    if (pclk != 0U)
 8006fa2:	69fb      	ldr	r3, [r7, #28]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d019      	beq.n	8006fdc <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	085a      	lsrs	r2, r3, #1
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	441a      	add	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fbc:	69bb      	ldr	r3, [r7, #24]
 8006fbe:	2b0f      	cmp	r3, #15
 8006fc0:	d909      	bls.n	8006fd6 <UART_SetConfig+0x546>
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006fc8:	d205      	bcs.n	8006fd6 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	b29a      	uxth	r2, r3
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	60da      	str	r2, [r3, #12]
 8006fd4:	e002      	b.n	8006fdc <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8006fe8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 8006fec:	4618      	mov	r0, r3
 8006fee:	3728      	adds	r7, #40	@ 0x28
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006ff6:	bf00      	nop
 8006ff8:	40008000 	.word	0x40008000
 8006ffc:	00f42400 	.word	0x00f42400

08007000 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800700c:	f003 0308 	and.w	r3, r3, #8
 8007010:	2b00      	cmp	r3, #0
 8007012:	d00a      	beq.n	800702a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	430a      	orrs	r2, r1
 8007028:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800702e:	f003 0301 	and.w	r3, r3, #1
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00a      	beq.n	800704c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	430a      	orrs	r2, r1
 800704a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007050:	f003 0302 	and.w	r3, r3, #2
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00a      	beq.n	800706e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	685b      	ldr	r3, [r3, #4]
 800705e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	430a      	orrs	r2, r1
 800706c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007072:	f003 0304 	and.w	r3, r3, #4
 8007076:	2b00      	cmp	r3, #0
 8007078:	d00a      	beq.n	8007090 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	430a      	orrs	r2, r1
 800708e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007094:	f003 0310 	and.w	r3, r3, #16
 8007098:	2b00      	cmp	r3, #0
 800709a:	d00a      	beq.n	80070b2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689b      	ldr	r3, [r3, #8]
 80070a2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	430a      	orrs	r2, r1
 80070b0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b6:	f003 0320 	and.w	r3, r3, #32
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d00a      	beq.n	80070d4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	689b      	ldr	r3, [r3, #8]
 80070c4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	430a      	orrs	r2, r1
 80070d2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d01a      	beq.n	8007116 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	685b      	ldr	r3, [r3, #4]
 80070e6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	430a      	orrs	r2, r1
 80070f4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80070fe:	d10a      	bne.n	8007116 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	430a      	orrs	r2, r1
 8007114:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00a      	beq.n	8007138 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	685b      	ldr	r3, [r3, #4]
 8007128:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	430a      	orrs	r2, r1
 8007136:	605a      	str	r2, [r3, #4]
  }
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b098      	sub	sp, #96	@ 0x60
 8007148:	af02      	add	r7, sp, #8
 800714a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2200      	movs	r2, #0
 8007150:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007154:	f7fa f996 	bl	8001484 <HAL_GetTick>
 8007158:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0308 	and.w	r3, r3, #8
 8007164:	2b08      	cmp	r3, #8
 8007166:	d12e      	bne.n	80071c6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007168:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800716c:	9300      	str	r3, [sp, #0]
 800716e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007170:	2200      	movs	r2, #0
 8007172:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 f88c 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 800717c:	4603      	mov	r3, r0
 800717e:	2b00      	cmp	r3, #0
 8007180:	d021      	beq.n	80071c6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007188:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800718a:	e853 3f00 	ldrex	r3, [r3]
 800718e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007192:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007196:	653b      	str	r3, [r7, #80]	@ 0x50
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	461a      	mov	r2, r3
 800719e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80071a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80071a2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071a4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80071a6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80071a8:	e841 2300 	strex	r3, r2, [r1]
 80071ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80071ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d1e6      	bne.n	8007182 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2220      	movs	r2, #32
 80071b8:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2200      	movs	r2, #0
 80071be:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071c2:	2303      	movs	r3, #3
 80071c4:	e062      	b.n	800728c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 0304 	and.w	r3, r3, #4
 80071d0:	2b04      	cmp	r3, #4
 80071d2:	d149      	bne.n	8007268 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80071d4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80071dc:	2200      	movs	r2, #0
 80071de:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f856 	bl	8007294 <UART_WaitOnFlagUntilTimeout>
 80071e8:	4603      	mov	r3, r0
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d03c      	beq.n	8007268 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071f6:	e853 3f00 	ldrex	r3, [r3]
 80071fa:	623b      	str	r3, [r7, #32]
   return(result);
 80071fc:	6a3b      	ldr	r3, [r7, #32]
 80071fe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007202:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	461a      	mov	r2, r3
 800720a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800720c:	633b      	str	r3, [r7, #48]	@ 0x30
 800720e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007210:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007212:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007214:	e841 2300 	strex	r3, r2, [r1]
 8007218:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800721a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800721c:	2b00      	cmp	r3, #0
 800721e:	d1e6      	bne.n	80071ee <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	3308      	adds	r3, #8
 8007226:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007228:	693b      	ldr	r3, [r7, #16]
 800722a:	e853 3f00 	ldrex	r3, [r3]
 800722e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	f023 0301 	bic.w	r3, r3, #1
 8007236:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	3308      	adds	r3, #8
 800723e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007240:	61fa      	str	r2, [r7, #28]
 8007242:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007244:	69b9      	ldr	r1, [r7, #24]
 8007246:	69fa      	ldr	r2, [r7, #28]
 8007248:	e841 2300 	strex	r3, r2, [r1]
 800724c:	617b      	str	r3, [r7, #20]
   return(result);
 800724e:	697b      	ldr	r3, [r7, #20]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d1e5      	bne.n	8007220 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2220      	movs	r2, #32
 8007258:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2200      	movs	r2, #0
 8007260:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007264:	2303      	movs	r3, #3
 8007266:	e011      	b.n	800728c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	2220      	movs	r2, #32
 800726c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	2220      	movs	r2, #32
 8007272:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	2200      	movs	r2, #0
 800727a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2200      	movs	r2, #0
 8007280:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800728a:	2300      	movs	r3, #0
}
 800728c:	4618      	mov	r0, r3
 800728e:	3758      	adds	r7, #88	@ 0x58
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	b084      	sub	sp, #16
 8007298:	af00      	add	r7, sp, #0
 800729a:	60f8      	str	r0, [r7, #12]
 800729c:	60b9      	str	r1, [r7, #8]
 800729e:	603b      	str	r3, [r7, #0]
 80072a0:	4613      	mov	r3, r2
 80072a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80072a4:	e04f      	b.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80072a6:	69bb      	ldr	r3, [r7, #24]
 80072a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ac:	d04b      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80072ae:	f7fa f8e9 	bl	8001484 <HAL_GetTick>
 80072b2:	4602      	mov	r2, r0
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	1ad3      	subs	r3, r2, r3
 80072b8:	69ba      	ldr	r2, [r7, #24]
 80072ba:	429a      	cmp	r2, r3
 80072bc:	d302      	bcc.n	80072c4 <UART_WaitOnFlagUntilTimeout+0x30>
 80072be:	69bb      	ldr	r3, [r7, #24]
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d101      	bne.n	80072c8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80072c4:	2303      	movs	r3, #3
 80072c6:	e04e      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f003 0304 	and.w	r3, r3, #4
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d037      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	2b80      	cmp	r3, #128	@ 0x80
 80072da:	d034      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
 80072dc:	68bb      	ldr	r3, [r7, #8]
 80072de:	2b40      	cmp	r3, #64	@ 0x40
 80072e0:	d031      	beq.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	69db      	ldr	r3, [r3, #28]
 80072e8:	f003 0308 	and.w	r3, r3, #8
 80072ec:	2b08      	cmp	r3, #8
 80072ee:	d110      	bne.n	8007312 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	2208      	movs	r2, #8
 80072f6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80072f8:	68f8      	ldr	r0, [r7, #12]
 80072fa:	f000 f838 	bl	800736e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2208      	movs	r2, #8
 8007302:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800730e:	2301      	movs	r3, #1
 8007310:	e029      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	681b      	ldr	r3, [r3, #0]
 8007316:	69db      	ldr	r3, [r3, #28]
 8007318:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800731c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007320:	d111      	bne.n	8007346 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800732a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800732c:	68f8      	ldr	r0, [r7, #12]
 800732e:	f000 f81e 	bl	800736e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	2220      	movs	r2, #32
 8007336:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	2200      	movs	r2, #0
 800733e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8007342:	2303      	movs	r3, #3
 8007344:	e00f      	b.n	8007366 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	69da      	ldr	r2, [r3, #28]
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	4013      	ands	r3, r2
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	429a      	cmp	r2, r3
 8007354:	bf0c      	ite	eq
 8007356:	2301      	moveq	r3, #1
 8007358:	2300      	movne	r3, #0
 800735a:	b2db      	uxtb	r3, r3
 800735c:	461a      	mov	r2, r3
 800735e:	79fb      	ldrb	r3, [r7, #7]
 8007360:	429a      	cmp	r2, r3
 8007362:	d0a0      	beq.n	80072a6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007364:	2300      	movs	r3, #0
}
 8007366:	4618      	mov	r0, r3
 8007368:	3710      	adds	r7, #16
 800736a:	46bd      	mov	sp, r7
 800736c:	bd80      	pop	{r7, pc}

0800736e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800736e:	b480      	push	{r7}
 8007370:	b095      	sub	sp, #84	@ 0x54
 8007372:	af00      	add	r7, sp, #0
 8007374:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800737c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800737e:	e853 3f00 	ldrex	r3, [r3]
 8007382:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007386:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800738a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	461a      	mov	r2, r3
 8007392:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007394:	643b      	str	r3, [r7, #64]	@ 0x40
 8007396:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007398:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800739a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800739c:	e841 2300 	strex	r3, r2, [r1]
 80073a0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80073a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d1e6      	bne.n	8007376 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	3308      	adds	r3, #8
 80073ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073b0:	6a3b      	ldr	r3, [r7, #32]
 80073b2:	e853 3f00 	ldrex	r3, [r3]
 80073b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80073b8:	69fb      	ldr	r3, [r7, #28]
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	64bb      	str	r3, [r7, #72]	@ 0x48
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	3308      	adds	r3, #8
 80073c6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80073c8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80073ca:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073cc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80073ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073d0:	e841 2300 	strex	r3, r2, [r1]
 80073d4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d1e5      	bne.n	80073a8 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d118      	bne.n	8007416 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	e853 3f00 	ldrex	r3, [r3]
 80073f0:	60bb      	str	r3, [r7, #8]
   return(result);
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	f023 0310 	bic.w	r3, r3, #16
 80073f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007402:	61bb      	str	r3, [r7, #24]
 8007404:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007406:	6979      	ldr	r1, [r7, #20]
 8007408:	69ba      	ldr	r2, [r7, #24]
 800740a:	e841 2300 	strex	r3, r2, [r1]
 800740e:	613b      	str	r3, [r7, #16]
   return(result);
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	2b00      	cmp	r3, #0
 8007414:	d1e6      	bne.n	80073e4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	2220      	movs	r2, #32
 800741a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2200      	movs	r2, #0
 8007428:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800742a:	bf00      	nop
 800742c:	3754      	adds	r7, #84	@ 0x54
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr

08007436 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007436:	b580      	push	{r7, lr}
 8007438:	b084      	sub	sp, #16
 800743a:	af00      	add	r7, sp, #0
 800743c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007442:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2200      	movs	r2, #0
 8007448:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2200      	movs	r2, #0
 8007450:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f7ff fb05 	bl	8006a64 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800745a:	bf00      	nop
 800745c:	3710      	adds	r7, #16
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b088      	sub	sp, #32
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	e853 3f00 	ldrex	r3, [r3]
 8007476:	60bb      	str	r3, [r7, #8]
   return(result);
 8007478:	68bb      	ldr	r3, [r7, #8]
 800747a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	461a      	mov	r2, r3
 8007486:	69fb      	ldr	r3, [r7, #28]
 8007488:	61bb      	str	r3, [r7, #24]
 800748a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800748c:	6979      	ldr	r1, [r7, #20]
 800748e:	69ba      	ldr	r2, [r7, #24]
 8007490:	e841 2300 	strex	r3, r2, [r1]
 8007494:	613b      	str	r3, [r7, #16]
   return(result);
 8007496:	693b      	ldr	r3, [r7, #16]
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1e6      	bne.n	800746a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2220      	movs	r2, #32
 80074a0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f7ff fad1 	bl	8006a50 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074ae:	bf00      	nop
 80074b0:	3720      	adds	r7, #32
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}

080074b6 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80074b6:	b480      	push	{r7}
 80074b8:	b083      	sub	sp, #12
 80074ba:	af00      	add	r7, sp, #0
 80074bc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80074be:	bf00      	nop
 80074c0:	370c      	adds	r7, #12
 80074c2:	46bd      	mov	sp, r7
 80074c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c8:	4770      	bx	lr
	...

080074cc <std>:
 80074cc:	2300      	movs	r3, #0
 80074ce:	b510      	push	{r4, lr}
 80074d0:	4604      	mov	r4, r0
 80074d2:	e9c0 3300 	strd	r3, r3, [r0]
 80074d6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074da:	6083      	str	r3, [r0, #8]
 80074dc:	8181      	strh	r1, [r0, #12]
 80074de:	6643      	str	r3, [r0, #100]	@ 0x64
 80074e0:	81c2      	strh	r2, [r0, #14]
 80074e2:	6183      	str	r3, [r0, #24]
 80074e4:	4619      	mov	r1, r3
 80074e6:	2208      	movs	r2, #8
 80074e8:	305c      	adds	r0, #92	@ 0x5c
 80074ea:	f000 f9f9 	bl	80078e0 <memset>
 80074ee:	4b0d      	ldr	r3, [pc, #52]	@ (8007524 <std+0x58>)
 80074f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80074f2:	4b0d      	ldr	r3, [pc, #52]	@ (8007528 <std+0x5c>)
 80074f4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80074f6:	4b0d      	ldr	r3, [pc, #52]	@ (800752c <std+0x60>)
 80074f8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80074fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007530 <std+0x64>)
 80074fc:	6323      	str	r3, [r4, #48]	@ 0x30
 80074fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007534 <std+0x68>)
 8007500:	6224      	str	r4, [r4, #32]
 8007502:	429c      	cmp	r4, r3
 8007504:	d006      	beq.n	8007514 <std+0x48>
 8007506:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800750a:	4294      	cmp	r4, r2
 800750c:	d002      	beq.n	8007514 <std+0x48>
 800750e:	33d0      	adds	r3, #208	@ 0xd0
 8007510:	429c      	cmp	r4, r3
 8007512:	d105      	bne.n	8007520 <std+0x54>
 8007514:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800751c:	f000 ba58 	b.w	80079d0 <__retarget_lock_init_recursive>
 8007520:	bd10      	pop	{r4, pc}
 8007522:	bf00      	nop
 8007524:	08007731 	.word	0x08007731
 8007528:	08007753 	.word	0x08007753
 800752c:	0800778b 	.word	0x0800778b
 8007530:	080077af 	.word	0x080077af
 8007534:	20000500 	.word	0x20000500

08007538 <stdio_exit_handler>:
 8007538:	4a02      	ldr	r2, [pc, #8]	@ (8007544 <stdio_exit_handler+0xc>)
 800753a:	4903      	ldr	r1, [pc, #12]	@ (8007548 <stdio_exit_handler+0x10>)
 800753c:	4803      	ldr	r0, [pc, #12]	@ (800754c <stdio_exit_handler+0x14>)
 800753e:	f000 b869 	b.w	8007614 <_fwalk_sglue>
 8007542:	bf00      	nop
 8007544:	2000000c 	.word	0x2000000c
 8007548:	08008271 	.word	0x08008271
 800754c:	2000001c 	.word	0x2000001c

08007550 <cleanup_stdio>:
 8007550:	6841      	ldr	r1, [r0, #4]
 8007552:	4b0c      	ldr	r3, [pc, #48]	@ (8007584 <cleanup_stdio+0x34>)
 8007554:	4299      	cmp	r1, r3
 8007556:	b510      	push	{r4, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	d001      	beq.n	8007560 <cleanup_stdio+0x10>
 800755c:	f000 fe88 	bl	8008270 <_fflush_r>
 8007560:	68a1      	ldr	r1, [r4, #8]
 8007562:	4b09      	ldr	r3, [pc, #36]	@ (8007588 <cleanup_stdio+0x38>)
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <cleanup_stdio+0x1e>
 8007568:	4620      	mov	r0, r4
 800756a:	f000 fe81 	bl	8008270 <_fflush_r>
 800756e:	68e1      	ldr	r1, [r4, #12]
 8007570:	4b06      	ldr	r3, [pc, #24]	@ (800758c <cleanup_stdio+0x3c>)
 8007572:	4299      	cmp	r1, r3
 8007574:	d004      	beq.n	8007580 <cleanup_stdio+0x30>
 8007576:	4620      	mov	r0, r4
 8007578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800757c:	f000 be78 	b.w	8008270 <_fflush_r>
 8007580:	bd10      	pop	{r4, pc}
 8007582:	bf00      	nop
 8007584:	20000500 	.word	0x20000500
 8007588:	20000568 	.word	0x20000568
 800758c:	200005d0 	.word	0x200005d0

08007590 <global_stdio_init.part.0>:
 8007590:	b510      	push	{r4, lr}
 8007592:	4b0b      	ldr	r3, [pc, #44]	@ (80075c0 <global_stdio_init.part.0+0x30>)
 8007594:	4c0b      	ldr	r4, [pc, #44]	@ (80075c4 <global_stdio_init.part.0+0x34>)
 8007596:	4a0c      	ldr	r2, [pc, #48]	@ (80075c8 <global_stdio_init.part.0+0x38>)
 8007598:	601a      	str	r2, [r3, #0]
 800759a:	4620      	mov	r0, r4
 800759c:	2200      	movs	r2, #0
 800759e:	2104      	movs	r1, #4
 80075a0:	f7ff ff94 	bl	80074cc <std>
 80075a4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80075a8:	2201      	movs	r2, #1
 80075aa:	2109      	movs	r1, #9
 80075ac:	f7ff ff8e 	bl	80074cc <std>
 80075b0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80075b4:	2202      	movs	r2, #2
 80075b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075ba:	2112      	movs	r1, #18
 80075bc:	f7ff bf86 	b.w	80074cc <std>
 80075c0:	20000638 	.word	0x20000638
 80075c4:	20000500 	.word	0x20000500
 80075c8:	08007539 	.word	0x08007539

080075cc <__sfp_lock_acquire>:
 80075cc:	4801      	ldr	r0, [pc, #4]	@ (80075d4 <__sfp_lock_acquire+0x8>)
 80075ce:	f000 ba00 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 80075d2:	bf00      	nop
 80075d4:	20000641 	.word	0x20000641

080075d8 <__sfp_lock_release>:
 80075d8:	4801      	ldr	r0, [pc, #4]	@ (80075e0 <__sfp_lock_release+0x8>)
 80075da:	f000 b9fb 	b.w	80079d4 <__retarget_lock_release_recursive>
 80075de:	bf00      	nop
 80075e0:	20000641 	.word	0x20000641

080075e4 <__sinit>:
 80075e4:	b510      	push	{r4, lr}
 80075e6:	4604      	mov	r4, r0
 80075e8:	f7ff fff0 	bl	80075cc <__sfp_lock_acquire>
 80075ec:	6a23      	ldr	r3, [r4, #32]
 80075ee:	b11b      	cbz	r3, 80075f8 <__sinit+0x14>
 80075f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80075f4:	f7ff bff0 	b.w	80075d8 <__sfp_lock_release>
 80075f8:	4b04      	ldr	r3, [pc, #16]	@ (800760c <__sinit+0x28>)
 80075fa:	6223      	str	r3, [r4, #32]
 80075fc:	4b04      	ldr	r3, [pc, #16]	@ (8007610 <__sinit+0x2c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d1f5      	bne.n	80075f0 <__sinit+0xc>
 8007604:	f7ff ffc4 	bl	8007590 <global_stdio_init.part.0>
 8007608:	e7f2      	b.n	80075f0 <__sinit+0xc>
 800760a:	bf00      	nop
 800760c:	08007551 	.word	0x08007551
 8007610:	20000638 	.word	0x20000638

08007614 <_fwalk_sglue>:
 8007614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007618:	4607      	mov	r7, r0
 800761a:	4688      	mov	r8, r1
 800761c:	4614      	mov	r4, r2
 800761e:	2600      	movs	r6, #0
 8007620:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007624:	f1b9 0901 	subs.w	r9, r9, #1
 8007628:	d505      	bpl.n	8007636 <_fwalk_sglue+0x22>
 800762a:	6824      	ldr	r4, [r4, #0]
 800762c:	2c00      	cmp	r4, #0
 800762e:	d1f7      	bne.n	8007620 <_fwalk_sglue+0xc>
 8007630:	4630      	mov	r0, r6
 8007632:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007636:	89ab      	ldrh	r3, [r5, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d907      	bls.n	800764c <_fwalk_sglue+0x38>
 800763c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007640:	3301      	adds	r3, #1
 8007642:	d003      	beq.n	800764c <_fwalk_sglue+0x38>
 8007644:	4629      	mov	r1, r5
 8007646:	4638      	mov	r0, r7
 8007648:	47c0      	blx	r8
 800764a:	4306      	orrs	r6, r0
 800764c:	3568      	adds	r5, #104	@ 0x68
 800764e:	e7e9      	b.n	8007624 <_fwalk_sglue+0x10>

08007650 <iprintf>:
 8007650:	b40f      	push	{r0, r1, r2, r3}
 8007652:	b507      	push	{r0, r1, r2, lr}
 8007654:	4906      	ldr	r1, [pc, #24]	@ (8007670 <iprintf+0x20>)
 8007656:	ab04      	add	r3, sp, #16
 8007658:	6808      	ldr	r0, [r1, #0]
 800765a:	f853 2b04 	ldr.w	r2, [r3], #4
 800765e:	6881      	ldr	r1, [r0, #8]
 8007660:	9301      	str	r3, [sp, #4]
 8007662:	f000 fadb 	bl	8007c1c <_vfiprintf_r>
 8007666:	b003      	add	sp, #12
 8007668:	f85d eb04 	ldr.w	lr, [sp], #4
 800766c:	b004      	add	sp, #16
 800766e:	4770      	bx	lr
 8007670:	20000018 	.word	0x20000018

08007674 <_puts_r>:
 8007674:	6a03      	ldr	r3, [r0, #32]
 8007676:	b570      	push	{r4, r5, r6, lr}
 8007678:	6884      	ldr	r4, [r0, #8]
 800767a:	4605      	mov	r5, r0
 800767c:	460e      	mov	r6, r1
 800767e:	b90b      	cbnz	r3, 8007684 <_puts_r+0x10>
 8007680:	f7ff ffb0 	bl	80075e4 <__sinit>
 8007684:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007686:	07db      	lsls	r3, r3, #31
 8007688:	d405      	bmi.n	8007696 <_puts_r+0x22>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	0598      	lsls	r0, r3, #22
 800768e:	d402      	bmi.n	8007696 <_puts_r+0x22>
 8007690:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007692:	f000 f99e 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8007696:	89a3      	ldrh	r3, [r4, #12]
 8007698:	0719      	lsls	r1, r3, #28
 800769a:	d502      	bpl.n	80076a2 <_puts_r+0x2e>
 800769c:	6923      	ldr	r3, [r4, #16]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d135      	bne.n	800770e <_puts_r+0x9a>
 80076a2:	4621      	mov	r1, r4
 80076a4:	4628      	mov	r0, r5
 80076a6:	f000 f8c5 	bl	8007834 <__swsetup_r>
 80076aa:	b380      	cbz	r0, 800770e <_puts_r+0x9a>
 80076ac:	f04f 35ff 	mov.w	r5, #4294967295
 80076b0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80076b2:	07da      	lsls	r2, r3, #31
 80076b4:	d405      	bmi.n	80076c2 <_puts_r+0x4e>
 80076b6:	89a3      	ldrh	r3, [r4, #12]
 80076b8:	059b      	lsls	r3, r3, #22
 80076ba:	d402      	bmi.n	80076c2 <_puts_r+0x4e>
 80076bc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80076be:	f000 f989 	bl	80079d4 <__retarget_lock_release_recursive>
 80076c2:	4628      	mov	r0, r5
 80076c4:	bd70      	pop	{r4, r5, r6, pc}
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	da04      	bge.n	80076d4 <_puts_r+0x60>
 80076ca:	69a2      	ldr	r2, [r4, #24]
 80076cc:	429a      	cmp	r2, r3
 80076ce:	dc17      	bgt.n	8007700 <_puts_r+0x8c>
 80076d0:	290a      	cmp	r1, #10
 80076d2:	d015      	beq.n	8007700 <_puts_r+0x8c>
 80076d4:	6823      	ldr	r3, [r4, #0]
 80076d6:	1c5a      	adds	r2, r3, #1
 80076d8:	6022      	str	r2, [r4, #0]
 80076da:	7019      	strb	r1, [r3, #0]
 80076dc:	68a3      	ldr	r3, [r4, #8]
 80076de:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80076e2:	3b01      	subs	r3, #1
 80076e4:	60a3      	str	r3, [r4, #8]
 80076e6:	2900      	cmp	r1, #0
 80076e8:	d1ed      	bne.n	80076c6 <_puts_r+0x52>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	da11      	bge.n	8007712 <_puts_r+0x9e>
 80076ee:	4622      	mov	r2, r4
 80076f0:	210a      	movs	r1, #10
 80076f2:	4628      	mov	r0, r5
 80076f4:	f000 f85f 	bl	80077b6 <__swbuf_r>
 80076f8:	3001      	adds	r0, #1
 80076fa:	d0d7      	beq.n	80076ac <_puts_r+0x38>
 80076fc:	250a      	movs	r5, #10
 80076fe:	e7d7      	b.n	80076b0 <_puts_r+0x3c>
 8007700:	4622      	mov	r2, r4
 8007702:	4628      	mov	r0, r5
 8007704:	f000 f857 	bl	80077b6 <__swbuf_r>
 8007708:	3001      	adds	r0, #1
 800770a:	d1e7      	bne.n	80076dc <_puts_r+0x68>
 800770c:	e7ce      	b.n	80076ac <_puts_r+0x38>
 800770e:	3e01      	subs	r6, #1
 8007710:	e7e4      	b.n	80076dc <_puts_r+0x68>
 8007712:	6823      	ldr	r3, [r4, #0]
 8007714:	1c5a      	adds	r2, r3, #1
 8007716:	6022      	str	r2, [r4, #0]
 8007718:	220a      	movs	r2, #10
 800771a:	701a      	strb	r2, [r3, #0]
 800771c:	e7ee      	b.n	80076fc <_puts_r+0x88>
	...

08007720 <puts>:
 8007720:	4b02      	ldr	r3, [pc, #8]	@ (800772c <puts+0xc>)
 8007722:	4601      	mov	r1, r0
 8007724:	6818      	ldr	r0, [r3, #0]
 8007726:	f7ff bfa5 	b.w	8007674 <_puts_r>
 800772a:	bf00      	nop
 800772c:	20000018 	.word	0x20000018

08007730 <__sread>:
 8007730:	b510      	push	{r4, lr}
 8007732:	460c      	mov	r4, r1
 8007734:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007738:	f000 f8fc 	bl	8007934 <_read_r>
 800773c:	2800      	cmp	r0, #0
 800773e:	bfab      	itete	ge
 8007740:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007742:	89a3      	ldrhlt	r3, [r4, #12]
 8007744:	181b      	addge	r3, r3, r0
 8007746:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800774a:	bfac      	ite	ge
 800774c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800774e:	81a3      	strhlt	r3, [r4, #12]
 8007750:	bd10      	pop	{r4, pc}

08007752 <__swrite>:
 8007752:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007756:	461f      	mov	r7, r3
 8007758:	898b      	ldrh	r3, [r1, #12]
 800775a:	05db      	lsls	r3, r3, #23
 800775c:	4605      	mov	r5, r0
 800775e:	460c      	mov	r4, r1
 8007760:	4616      	mov	r6, r2
 8007762:	d505      	bpl.n	8007770 <__swrite+0x1e>
 8007764:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007768:	2302      	movs	r3, #2
 800776a:	2200      	movs	r2, #0
 800776c:	f000 f8d0 	bl	8007910 <_lseek_r>
 8007770:	89a3      	ldrh	r3, [r4, #12]
 8007772:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007776:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800777a:	81a3      	strh	r3, [r4, #12]
 800777c:	4632      	mov	r2, r6
 800777e:	463b      	mov	r3, r7
 8007780:	4628      	mov	r0, r5
 8007782:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007786:	f000 b8e7 	b.w	8007958 <_write_r>

0800778a <__sseek>:
 800778a:	b510      	push	{r4, lr}
 800778c:	460c      	mov	r4, r1
 800778e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007792:	f000 f8bd 	bl	8007910 <_lseek_r>
 8007796:	1c43      	adds	r3, r0, #1
 8007798:	89a3      	ldrh	r3, [r4, #12]
 800779a:	bf15      	itete	ne
 800779c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800779e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80077a2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80077a6:	81a3      	strheq	r3, [r4, #12]
 80077a8:	bf18      	it	ne
 80077aa:	81a3      	strhne	r3, [r4, #12]
 80077ac:	bd10      	pop	{r4, pc}

080077ae <__sclose>:
 80077ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80077b2:	f000 b89d 	b.w	80078f0 <_close_r>

080077b6 <__swbuf_r>:
 80077b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077b8:	460e      	mov	r6, r1
 80077ba:	4614      	mov	r4, r2
 80077bc:	4605      	mov	r5, r0
 80077be:	b118      	cbz	r0, 80077c8 <__swbuf_r+0x12>
 80077c0:	6a03      	ldr	r3, [r0, #32]
 80077c2:	b90b      	cbnz	r3, 80077c8 <__swbuf_r+0x12>
 80077c4:	f7ff ff0e 	bl	80075e4 <__sinit>
 80077c8:	69a3      	ldr	r3, [r4, #24]
 80077ca:	60a3      	str	r3, [r4, #8]
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	071a      	lsls	r2, r3, #28
 80077d0:	d501      	bpl.n	80077d6 <__swbuf_r+0x20>
 80077d2:	6923      	ldr	r3, [r4, #16]
 80077d4:	b943      	cbnz	r3, 80077e8 <__swbuf_r+0x32>
 80077d6:	4621      	mov	r1, r4
 80077d8:	4628      	mov	r0, r5
 80077da:	f000 f82b 	bl	8007834 <__swsetup_r>
 80077de:	b118      	cbz	r0, 80077e8 <__swbuf_r+0x32>
 80077e0:	f04f 37ff 	mov.w	r7, #4294967295
 80077e4:	4638      	mov	r0, r7
 80077e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077e8:	6823      	ldr	r3, [r4, #0]
 80077ea:	6922      	ldr	r2, [r4, #16]
 80077ec:	1a98      	subs	r0, r3, r2
 80077ee:	6963      	ldr	r3, [r4, #20]
 80077f0:	b2f6      	uxtb	r6, r6
 80077f2:	4283      	cmp	r3, r0
 80077f4:	4637      	mov	r7, r6
 80077f6:	dc05      	bgt.n	8007804 <__swbuf_r+0x4e>
 80077f8:	4621      	mov	r1, r4
 80077fa:	4628      	mov	r0, r5
 80077fc:	f000 fd38 	bl	8008270 <_fflush_r>
 8007800:	2800      	cmp	r0, #0
 8007802:	d1ed      	bne.n	80077e0 <__swbuf_r+0x2a>
 8007804:	68a3      	ldr	r3, [r4, #8]
 8007806:	3b01      	subs	r3, #1
 8007808:	60a3      	str	r3, [r4, #8]
 800780a:	6823      	ldr	r3, [r4, #0]
 800780c:	1c5a      	adds	r2, r3, #1
 800780e:	6022      	str	r2, [r4, #0]
 8007810:	701e      	strb	r6, [r3, #0]
 8007812:	6962      	ldr	r2, [r4, #20]
 8007814:	1c43      	adds	r3, r0, #1
 8007816:	429a      	cmp	r2, r3
 8007818:	d004      	beq.n	8007824 <__swbuf_r+0x6e>
 800781a:	89a3      	ldrh	r3, [r4, #12]
 800781c:	07db      	lsls	r3, r3, #31
 800781e:	d5e1      	bpl.n	80077e4 <__swbuf_r+0x2e>
 8007820:	2e0a      	cmp	r6, #10
 8007822:	d1df      	bne.n	80077e4 <__swbuf_r+0x2e>
 8007824:	4621      	mov	r1, r4
 8007826:	4628      	mov	r0, r5
 8007828:	f000 fd22 	bl	8008270 <_fflush_r>
 800782c:	2800      	cmp	r0, #0
 800782e:	d0d9      	beq.n	80077e4 <__swbuf_r+0x2e>
 8007830:	e7d6      	b.n	80077e0 <__swbuf_r+0x2a>
	...

08007834 <__swsetup_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4b29      	ldr	r3, [pc, #164]	@ (80078dc <__swsetup_r+0xa8>)
 8007838:	4605      	mov	r5, r0
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	460c      	mov	r4, r1
 800783e:	b118      	cbz	r0, 8007848 <__swsetup_r+0x14>
 8007840:	6a03      	ldr	r3, [r0, #32]
 8007842:	b90b      	cbnz	r3, 8007848 <__swsetup_r+0x14>
 8007844:	f7ff fece 	bl	80075e4 <__sinit>
 8007848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784c:	0719      	lsls	r1, r3, #28
 800784e:	d422      	bmi.n	8007896 <__swsetup_r+0x62>
 8007850:	06da      	lsls	r2, r3, #27
 8007852:	d407      	bmi.n	8007864 <__swsetup_r+0x30>
 8007854:	2209      	movs	r2, #9
 8007856:	602a      	str	r2, [r5, #0]
 8007858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	e033      	b.n	80078cc <__swsetup_r+0x98>
 8007864:	0758      	lsls	r0, r3, #29
 8007866:	d512      	bpl.n	800788e <__swsetup_r+0x5a>
 8007868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786a:	b141      	cbz	r1, 800787e <__swsetup_r+0x4a>
 800786c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <__swsetup_r+0x46>
 8007874:	4628      	mov	r0, r5
 8007876:	f000 f8af 	bl	80079d8 <_free_r>
 800787a:	2300      	movs	r3, #0
 800787c:	6363      	str	r3, [r4, #52]	@ 0x34
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	b94b      	cbnz	r3, 80078ae <__swsetup_r+0x7a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	d003      	beq.n	80078ae <__swsetup_r+0x7a>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 fd2f 	bl	800830c <__smakebuf_r>
 80078ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b2:	f013 0201 	ands.w	r2, r3, #1
 80078b6:	d00a      	beq.n	80078ce <__swsetup_r+0x9a>
 80078b8:	2200      	movs	r2, #0
 80078ba:	60a2      	str	r2, [r4, #8]
 80078bc:	6962      	ldr	r2, [r4, #20]
 80078be:	4252      	negs	r2, r2
 80078c0:	61a2      	str	r2, [r4, #24]
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	b942      	cbnz	r2, 80078d8 <__swsetup_r+0xa4>
 80078c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ca:	d1c5      	bne.n	8007858 <__swsetup_r+0x24>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	0799      	lsls	r1, r3, #30
 80078d0:	bf58      	it	pl
 80078d2:	6962      	ldrpl	r2, [r4, #20]
 80078d4:	60a2      	str	r2, [r4, #8]
 80078d6:	e7f4      	b.n	80078c2 <__swsetup_r+0x8e>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7f7      	b.n	80078cc <__swsetup_r+0x98>
 80078dc:	20000018 	.word	0x20000018

080078e0 <memset>:
 80078e0:	4402      	add	r2, r0
 80078e2:	4603      	mov	r3, r0
 80078e4:	4293      	cmp	r3, r2
 80078e6:	d100      	bne.n	80078ea <memset+0xa>
 80078e8:	4770      	bx	lr
 80078ea:	f803 1b01 	strb.w	r1, [r3], #1
 80078ee:	e7f9      	b.n	80078e4 <memset+0x4>

080078f0 <_close_r>:
 80078f0:	b538      	push	{r3, r4, r5, lr}
 80078f2:	4d06      	ldr	r5, [pc, #24]	@ (800790c <_close_r+0x1c>)
 80078f4:	2300      	movs	r3, #0
 80078f6:	4604      	mov	r4, r0
 80078f8:	4608      	mov	r0, r1
 80078fa:	602b      	str	r3, [r5, #0]
 80078fc:	f7f9 fcab 	bl	8001256 <_close>
 8007900:	1c43      	adds	r3, r0, #1
 8007902:	d102      	bne.n	800790a <_close_r+0x1a>
 8007904:	682b      	ldr	r3, [r5, #0]
 8007906:	b103      	cbz	r3, 800790a <_close_r+0x1a>
 8007908:	6023      	str	r3, [r4, #0]
 800790a:	bd38      	pop	{r3, r4, r5, pc}
 800790c:	2000063c 	.word	0x2000063c

08007910 <_lseek_r>:
 8007910:	b538      	push	{r3, r4, r5, lr}
 8007912:	4d07      	ldr	r5, [pc, #28]	@ (8007930 <_lseek_r+0x20>)
 8007914:	4604      	mov	r4, r0
 8007916:	4608      	mov	r0, r1
 8007918:	4611      	mov	r1, r2
 800791a:	2200      	movs	r2, #0
 800791c:	602a      	str	r2, [r5, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f7f9 fcc0 	bl	80012a4 <_lseek>
 8007924:	1c43      	adds	r3, r0, #1
 8007926:	d102      	bne.n	800792e <_lseek_r+0x1e>
 8007928:	682b      	ldr	r3, [r5, #0]
 800792a:	b103      	cbz	r3, 800792e <_lseek_r+0x1e>
 800792c:	6023      	str	r3, [r4, #0]
 800792e:	bd38      	pop	{r3, r4, r5, pc}
 8007930:	2000063c 	.word	0x2000063c

08007934 <_read_r>:
 8007934:	b538      	push	{r3, r4, r5, lr}
 8007936:	4d07      	ldr	r5, [pc, #28]	@ (8007954 <_read_r+0x20>)
 8007938:	4604      	mov	r4, r0
 800793a:	4608      	mov	r0, r1
 800793c:	4611      	mov	r1, r2
 800793e:	2200      	movs	r2, #0
 8007940:	602a      	str	r2, [r5, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	f7f9 fc4e 	bl	80011e4 <_read>
 8007948:	1c43      	adds	r3, r0, #1
 800794a:	d102      	bne.n	8007952 <_read_r+0x1e>
 800794c:	682b      	ldr	r3, [r5, #0]
 800794e:	b103      	cbz	r3, 8007952 <_read_r+0x1e>
 8007950:	6023      	str	r3, [r4, #0]
 8007952:	bd38      	pop	{r3, r4, r5, pc}
 8007954:	2000063c 	.word	0x2000063c

08007958 <_write_r>:
 8007958:	b538      	push	{r3, r4, r5, lr}
 800795a:	4d07      	ldr	r5, [pc, #28]	@ (8007978 <_write_r+0x20>)
 800795c:	4604      	mov	r4, r0
 800795e:	4608      	mov	r0, r1
 8007960:	4611      	mov	r1, r2
 8007962:	2200      	movs	r2, #0
 8007964:	602a      	str	r2, [r5, #0]
 8007966:	461a      	mov	r2, r3
 8007968:	f7f9 fc59 	bl	800121e <_write>
 800796c:	1c43      	adds	r3, r0, #1
 800796e:	d102      	bne.n	8007976 <_write_r+0x1e>
 8007970:	682b      	ldr	r3, [r5, #0]
 8007972:	b103      	cbz	r3, 8007976 <_write_r+0x1e>
 8007974:	6023      	str	r3, [r4, #0]
 8007976:	bd38      	pop	{r3, r4, r5, pc}
 8007978:	2000063c 	.word	0x2000063c

0800797c <__errno>:
 800797c:	4b01      	ldr	r3, [pc, #4]	@ (8007984 <__errno+0x8>)
 800797e:	6818      	ldr	r0, [r3, #0]
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	20000018 	.word	0x20000018

08007988 <__libc_init_array>:
 8007988:	b570      	push	{r4, r5, r6, lr}
 800798a:	4d0d      	ldr	r5, [pc, #52]	@ (80079c0 <__libc_init_array+0x38>)
 800798c:	4c0d      	ldr	r4, [pc, #52]	@ (80079c4 <__libc_init_array+0x3c>)
 800798e:	1b64      	subs	r4, r4, r5
 8007990:	10a4      	asrs	r4, r4, #2
 8007992:	2600      	movs	r6, #0
 8007994:	42a6      	cmp	r6, r4
 8007996:	d109      	bne.n	80079ac <__libc_init_array+0x24>
 8007998:	4d0b      	ldr	r5, [pc, #44]	@ (80079c8 <__libc_init_array+0x40>)
 800799a:	4c0c      	ldr	r4, [pc, #48]	@ (80079cc <__libc_init_array+0x44>)
 800799c:	f000 fd24 	bl	80083e8 <_init>
 80079a0:	1b64      	subs	r4, r4, r5
 80079a2:	10a4      	asrs	r4, r4, #2
 80079a4:	2600      	movs	r6, #0
 80079a6:	42a6      	cmp	r6, r4
 80079a8:	d105      	bne.n	80079b6 <__libc_init_array+0x2e>
 80079aa:	bd70      	pop	{r4, r5, r6, pc}
 80079ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80079b0:	4798      	blx	r3
 80079b2:	3601      	adds	r6, #1
 80079b4:	e7ee      	b.n	8007994 <__libc_init_array+0xc>
 80079b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80079ba:	4798      	blx	r3
 80079bc:	3601      	adds	r6, #1
 80079be:	e7f2      	b.n	80079a6 <__libc_init_array+0x1e>
 80079c0:	08008500 	.word	0x08008500
 80079c4:	08008500 	.word	0x08008500
 80079c8:	08008500 	.word	0x08008500
 80079cc:	08008504 	.word	0x08008504

080079d0 <__retarget_lock_init_recursive>:
 80079d0:	4770      	bx	lr

080079d2 <__retarget_lock_acquire_recursive>:
 80079d2:	4770      	bx	lr

080079d4 <__retarget_lock_release_recursive>:
 80079d4:	4770      	bx	lr
	...

080079d8 <_free_r>:
 80079d8:	b538      	push	{r3, r4, r5, lr}
 80079da:	4605      	mov	r5, r0
 80079dc:	2900      	cmp	r1, #0
 80079de:	d041      	beq.n	8007a64 <_free_r+0x8c>
 80079e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80079e4:	1f0c      	subs	r4, r1, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	bfb8      	it	lt
 80079ea:	18e4      	addlt	r4, r4, r3
 80079ec:	f000 f8e0 	bl	8007bb0 <__malloc_lock>
 80079f0:	4a1d      	ldr	r2, [pc, #116]	@ (8007a68 <_free_r+0x90>)
 80079f2:	6813      	ldr	r3, [r2, #0]
 80079f4:	b933      	cbnz	r3, 8007a04 <_free_r+0x2c>
 80079f6:	6063      	str	r3, [r4, #4]
 80079f8:	6014      	str	r4, [r2, #0]
 80079fa:	4628      	mov	r0, r5
 80079fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a00:	f000 b8dc 	b.w	8007bbc <__malloc_unlock>
 8007a04:	42a3      	cmp	r3, r4
 8007a06:	d908      	bls.n	8007a1a <_free_r+0x42>
 8007a08:	6820      	ldr	r0, [r4, #0]
 8007a0a:	1821      	adds	r1, r4, r0
 8007a0c:	428b      	cmp	r3, r1
 8007a0e:	bf01      	itttt	eq
 8007a10:	6819      	ldreq	r1, [r3, #0]
 8007a12:	685b      	ldreq	r3, [r3, #4]
 8007a14:	1809      	addeq	r1, r1, r0
 8007a16:	6021      	streq	r1, [r4, #0]
 8007a18:	e7ed      	b.n	80079f6 <_free_r+0x1e>
 8007a1a:	461a      	mov	r2, r3
 8007a1c:	685b      	ldr	r3, [r3, #4]
 8007a1e:	b10b      	cbz	r3, 8007a24 <_free_r+0x4c>
 8007a20:	42a3      	cmp	r3, r4
 8007a22:	d9fa      	bls.n	8007a1a <_free_r+0x42>
 8007a24:	6811      	ldr	r1, [r2, #0]
 8007a26:	1850      	adds	r0, r2, r1
 8007a28:	42a0      	cmp	r0, r4
 8007a2a:	d10b      	bne.n	8007a44 <_free_r+0x6c>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	4401      	add	r1, r0
 8007a30:	1850      	adds	r0, r2, r1
 8007a32:	4283      	cmp	r3, r0
 8007a34:	6011      	str	r1, [r2, #0]
 8007a36:	d1e0      	bne.n	80079fa <_free_r+0x22>
 8007a38:	6818      	ldr	r0, [r3, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	6053      	str	r3, [r2, #4]
 8007a3e:	4408      	add	r0, r1
 8007a40:	6010      	str	r0, [r2, #0]
 8007a42:	e7da      	b.n	80079fa <_free_r+0x22>
 8007a44:	d902      	bls.n	8007a4c <_free_r+0x74>
 8007a46:	230c      	movs	r3, #12
 8007a48:	602b      	str	r3, [r5, #0]
 8007a4a:	e7d6      	b.n	80079fa <_free_r+0x22>
 8007a4c:	6820      	ldr	r0, [r4, #0]
 8007a4e:	1821      	adds	r1, r4, r0
 8007a50:	428b      	cmp	r3, r1
 8007a52:	bf04      	itt	eq
 8007a54:	6819      	ldreq	r1, [r3, #0]
 8007a56:	685b      	ldreq	r3, [r3, #4]
 8007a58:	6063      	str	r3, [r4, #4]
 8007a5a:	bf04      	itt	eq
 8007a5c:	1809      	addeq	r1, r1, r0
 8007a5e:	6021      	streq	r1, [r4, #0]
 8007a60:	6054      	str	r4, [r2, #4]
 8007a62:	e7ca      	b.n	80079fa <_free_r+0x22>
 8007a64:	bd38      	pop	{r3, r4, r5, pc}
 8007a66:	bf00      	nop
 8007a68:	20000648 	.word	0x20000648

08007a6c <sbrk_aligned>:
 8007a6c:	b570      	push	{r4, r5, r6, lr}
 8007a6e:	4e0f      	ldr	r6, [pc, #60]	@ (8007aac <sbrk_aligned+0x40>)
 8007a70:	460c      	mov	r4, r1
 8007a72:	6831      	ldr	r1, [r6, #0]
 8007a74:	4605      	mov	r5, r0
 8007a76:	b911      	cbnz	r1, 8007a7e <sbrk_aligned+0x12>
 8007a78:	f000 fca6 	bl	80083c8 <_sbrk_r>
 8007a7c:	6030      	str	r0, [r6, #0]
 8007a7e:	4621      	mov	r1, r4
 8007a80:	4628      	mov	r0, r5
 8007a82:	f000 fca1 	bl	80083c8 <_sbrk_r>
 8007a86:	1c43      	adds	r3, r0, #1
 8007a88:	d103      	bne.n	8007a92 <sbrk_aligned+0x26>
 8007a8a:	f04f 34ff 	mov.w	r4, #4294967295
 8007a8e:	4620      	mov	r0, r4
 8007a90:	bd70      	pop	{r4, r5, r6, pc}
 8007a92:	1cc4      	adds	r4, r0, #3
 8007a94:	f024 0403 	bic.w	r4, r4, #3
 8007a98:	42a0      	cmp	r0, r4
 8007a9a:	d0f8      	beq.n	8007a8e <sbrk_aligned+0x22>
 8007a9c:	1a21      	subs	r1, r4, r0
 8007a9e:	4628      	mov	r0, r5
 8007aa0:	f000 fc92 	bl	80083c8 <_sbrk_r>
 8007aa4:	3001      	adds	r0, #1
 8007aa6:	d1f2      	bne.n	8007a8e <sbrk_aligned+0x22>
 8007aa8:	e7ef      	b.n	8007a8a <sbrk_aligned+0x1e>
 8007aaa:	bf00      	nop
 8007aac:	20000644 	.word	0x20000644

08007ab0 <_malloc_r>:
 8007ab0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ab4:	1ccd      	adds	r5, r1, #3
 8007ab6:	f025 0503 	bic.w	r5, r5, #3
 8007aba:	3508      	adds	r5, #8
 8007abc:	2d0c      	cmp	r5, #12
 8007abe:	bf38      	it	cc
 8007ac0:	250c      	movcc	r5, #12
 8007ac2:	2d00      	cmp	r5, #0
 8007ac4:	4606      	mov	r6, r0
 8007ac6:	db01      	blt.n	8007acc <_malloc_r+0x1c>
 8007ac8:	42a9      	cmp	r1, r5
 8007aca:	d904      	bls.n	8007ad6 <_malloc_r+0x26>
 8007acc:	230c      	movs	r3, #12
 8007ace:	6033      	str	r3, [r6, #0]
 8007ad0:	2000      	movs	r0, #0
 8007ad2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ad6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bac <_malloc_r+0xfc>
 8007ada:	f000 f869 	bl	8007bb0 <__malloc_lock>
 8007ade:	f8d8 3000 	ldr.w	r3, [r8]
 8007ae2:	461c      	mov	r4, r3
 8007ae4:	bb44      	cbnz	r4, 8007b38 <_malloc_r+0x88>
 8007ae6:	4629      	mov	r1, r5
 8007ae8:	4630      	mov	r0, r6
 8007aea:	f7ff ffbf 	bl	8007a6c <sbrk_aligned>
 8007aee:	1c43      	adds	r3, r0, #1
 8007af0:	4604      	mov	r4, r0
 8007af2:	d158      	bne.n	8007ba6 <_malloc_r+0xf6>
 8007af4:	f8d8 4000 	ldr.w	r4, [r8]
 8007af8:	4627      	mov	r7, r4
 8007afa:	2f00      	cmp	r7, #0
 8007afc:	d143      	bne.n	8007b86 <_malloc_r+0xd6>
 8007afe:	2c00      	cmp	r4, #0
 8007b00:	d04b      	beq.n	8007b9a <_malloc_r+0xea>
 8007b02:	6823      	ldr	r3, [r4, #0]
 8007b04:	4639      	mov	r1, r7
 8007b06:	4630      	mov	r0, r6
 8007b08:	eb04 0903 	add.w	r9, r4, r3
 8007b0c:	f000 fc5c 	bl	80083c8 <_sbrk_r>
 8007b10:	4581      	cmp	r9, r0
 8007b12:	d142      	bne.n	8007b9a <_malloc_r+0xea>
 8007b14:	6821      	ldr	r1, [r4, #0]
 8007b16:	1a6d      	subs	r5, r5, r1
 8007b18:	4629      	mov	r1, r5
 8007b1a:	4630      	mov	r0, r6
 8007b1c:	f7ff ffa6 	bl	8007a6c <sbrk_aligned>
 8007b20:	3001      	adds	r0, #1
 8007b22:	d03a      	beq.n	8007b9a <_malloc_r+0xea>
 8007b24:	6823      	ldr	r3, [r4, #0]
 8007b26:	442b      	add	r3, r5
 8007b28:	6023      	str	r3, [r4, #0]
 8007b2a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b2e:	685a      	ldr	r2, [r3, #4]
 8007b30:	bb62      	cbnz	r2, 8007b8c <_malloc_r+0xdc>
 8007b32:	f8c8 7000 	str.w	r7, [r8]
 8007b36:	e00f      	b.n	8007b58 <_malloc_r+0xa8>
 8007b38:	6822      	ldr	r2, [r4, #0]
 8007b3a:	1b52      	subs	r2, r2, r5
 8007b3c:	d420      	bmi.n	8007b80 <_malloc_r+0xd0>
 8007b3e:	2a0b      	cmp	r2, #11
 8007b40:	d917      	bls.n	8007b72 <_malloc_r+0xc2>
 8007b42:	1961      	adds	r1, r4, r5
 8007b44:	42a3      	cmp	r3, r4
 8007b46:	6025      	str	r5, [r4, #0]
 8007b48:	bf18      	it	ne
 8007b4a:	6059      	strne	r1, [r3, #4]
 8007b4c:	6863      	ldr	r3, [r4, #4]
 8007b4e:	bf08      	it	eq
 8007b50:	f8c8 1000 	streq.w	r1, [r8]
 8007b54:	5162      	str	r2, [r4, r5]
 8007b56:	604b      	str	r3, [r1, #4]
 8007b58:	4630      	mov	r0, r6
 8007b5a:	f000 f82f 	bl	8007bbc <__malloc_unlock>
 8007b5e:	f104 000b 	add.w	r0, r4, #11
 8007b62:	1d23      	adds	r3, r4, #4
 8007b64:	f020 0007 	bic.w	r0, r0, #7
 8007b68:	1ac2      	subs	r2, r0, r3
 8007b6a:	bf1c      	itt	ne
 8007b6c:	1a1b      	subne	r3, r3, r0
 8007b6e:	50a3      	strne	r3, [r4, r2]
 8007b70:	e7af      	b.n	8007ad2 <_malloc_r+0x22>
 8007b72:	6862      	ldr	r2, [r4, #4]
 8007b74:	42a3      	cmp	r3, r4
 8007b76:	bf0c      	ite	eq
 8007b78:	f8c8 2000 	streq.w	r2, [r8]
 8007b7c:	605a      	strne	r2, [r3, #4]
 8007b7e:	e7eb      	b.n	8007b58 <_malloc_r+0xa8>
 8007b80:	4623      	mov	r3, r4
 8007b82:	6864      	ldr	r4, [r4, #4]
 8007b84:	e7ae      	b.n	8007ae4 <_malloc_r+0x34>
 8007b86:	463c      	mov	r4, r7
 8007b88:	687f      	ldr	r7, [r7, #4]
 8007b8a:	e7b6      	b.n	8007afa <_malloc_r+0x4a>
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	42a3      	cmp	r3, r4
 8007b92:	d1fb      	bne.n	8007b8c <_malloc_r+0xdc>
 8007b94:	2300      	movs	r3, #0
 8007b96:	6053      	str	r3, [r2, #4]
 8007b98:	e7de      	b.n	8007b58 <_malloc_r+0xa8>
 8007b9a:	230c      	movs	r3, #12
 8007b9c:	6033      	str	r3, [r6, #0]
 8007b9e:	4630      	mov	r0, r6
 8007ba0:	f000 f80c 	bl	8007bbc <__malloc_unlock>
 8007ba4:	e794      	b.n	8007ad0 <_malloc_r+0x20>
 8007ba6:	6005      	str	r5, [r0, #0]
 8007ba8:	e7d6      	b.n	8007b58 <_malloc_r+0xa8>
 8007baa:	bf00      	nop
 8007bac:	20000648 	.word	0x20000648

08007bb0 <__malloc_lock>:
 8007bb0:	4801      	ldr	r0, [pc, #4]	@ (8007bb8 <__malloc_lock+0x8>)
 8007bb2:	f7ff bf0e 	b.w	80079d2 <__retarget_lock_acquire_recursive>
 8007bb6:	bf00      	nop
 8007bb8:	20000640 	.word	0x20000640

08007bbc <__malloc_unlock>:
 8007bbc:	4801      	ldr	r0, [pc, #4]	@ (8007bc4 <__malloc_unlock+0x8>)
 8007bbe:	f7ff bf09 	b.w	80079d4 <__retarget_lock_release_recursive>
 8007bc2:	bf00      	nop
 8007bc4:	20000640 	.word	0x20000640

08007bc8 <__sfputc_r>:
 8007bc8:	6893      	ldr	r3, [r2, #8]
 8007bca:	3b01      	subs	r3, #1
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	b410      	push	{r4}
 8007bd0:	6093      	str	r3, [r2, #8]
 8007bd2:	da08      	bge.n	8007be6 <__sfputc_r+0x1e>
 8007bd4:	6994      	ldr	r4, [r2, #24]
 8007bd6:	42a3      	cmp	r3, r4
 8007bd8:	db01      	blt.n	8007bde <__sfputc_r+0x16>
 8007bda:	290a      	cmp	r1, #10
 8007bdc:	d103      	bne.n	8007be6 <__sfputc_r+0x1e>
 8007bde:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007be2:	f7ff bde8 	b.w	80077b6 <__swbuf_r>
 8007be6:	6813      	ldr	r3, [r2, #0]
 8007be8:	1c58      	adds	r0, r3, #1
 8007bea:	6010      	str	r0, [r2, #0]
 8007bec:	7019      	strb	r1, [r3, #0]
 8007bee:	4608      	mov	r0, r1
 8007bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007bf4:	4770      	bx	lr

08007bf6 <__sfputs_r>:
 8007bf6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bf8:	4606      	mov	r6, r0
 8007bfa:	460f      	mov	r7, r1
 8007bfc:	4614      	mov	r4, r2
 8007bfe:	18d5      	adds	r5, r2, r3
 8007c00:	42ac      	cmp	r4, r5
 8007c02:	d101      	bne.n	8007c08 <__sfputs_r+0x12>
 8007c04:	2000      	movs	r0, #0
 8007c06:	e007      	b.n	8007c18 <__sfputs_r+0x22>
 8007c08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c0c:	463a      	mov	r2, r7
 8007c0e:	4630      	mov	r0, r6
 8007c10:	f7ff ffda 	bl	8007bc8 <__sfputc_r>
 8007c14:	1c43      	adds	r3, r0, #1
 8007c16:	d1f3      	bne.n	8007c00 <__sfputs_r+0xa>
 8007c18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007c1c <_vfiprintf_r>:
 8007c1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c20:	460d      	mov	r5, r1
 8007c22:	b09d      	sub	sp, #116	@ 0x74
 8007c24:	4614      	mov	r4, r2
 8007c26:	4698      	mov	r8, r3
 8007c28:	4606      	mov	r6, r0
 8007c2a:	b118      	cbz	r0, 8007c34 <_vfiprintf_r+0x18>
 8007c2c:	6a03      	ldr	r3, [r0, #32]
 8007c2e:	b90b      	cbnz	r3, 8007c34 <_vfiprintf_r+0x18>
 8007c30:	f7ff fcd8 	bl	80075e4 <__sinit>
 8007c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c36:	07d9      	lsls	r1, r3, #31
 8007c38:	d405      	bmi.n	8007c46 <_vfiprintf_r+0x2a>
 8007c3a:	89ab      	ldrh	r3, [r5, #12]
 8007c3c:	059a      	lsls	r2, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_vfiprintf_r+0x2a>
 8007c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c42:	f7ff fec6 	bl	80079d2 <__retarget_lock_acquire_recursive>
 8007c46:	89ab      	ldrh	r3, [r5, #12]
 8007c48:	071b      	lsls	r3, r3, #28
 8007c4a:	d501      	bpl.n	8007c50 <_vfiprintf_r+0x34>
 8007c4c:	692b      	ldr	r3, [r5, #16]
 8007c4e:	b99b      	cbnz	r3, 8007c78 <_vfiprintf_r+0x5c>
 8007c50:	4629      	mov	r1, r5
 8007c52:	4630      	mov	r0, r6
 8007c54:	f7ff fdee 	bl	8007834 <__swsetup_r>
 8007c58:	b170      	cbz	r0, 8007c78 <_vfiprintf_r+0x5c>
 8007c5a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007c5c:	07dc      	lsls	r4, r3, #31
 8007c5e:	d504      	bpl.n	8007c6a <_vfiprintf_r+0x4e>
 8007c60:	f04f 30ff 	mov.w	r0, #4294967295
 8007c64:	b01d      	add	sp, #116	@ 0x74
 8007c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c6a:	89ab      	ldrh	r3, [r5, #12]
 8007c6c:	0598      	lsls	r0, r3, #22
 8007c6e:	d4f7      	bmi.n	8007c60 <_vfiprintf_r+0x44>
 8007c70:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007c72:	f7ff feaf 	bl	80079d4 <__retarget_lock_release_recursive>
 8007c76:	e7f3      	b.n	8007c60 <_vfiprintf_r+0x44>
 8007c78:	2300      	movs	r3, #0
 8007c7a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007c7c:	2320      	movs	r3, #32
 8007c7e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007c82:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c86:	2330      	movs	r3, #48	@ 0x30
 8007c88:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007e38 <_vfiprintf_r+0x21c>
 8007c8c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c90:	f04f 0901 	mov.w	r9, #1
 8007c94:	4623      	mov	r3, r4
 8007c96:	469a      	mov	sl, r3
 8007c98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c9c:	b10a      	cbz	r2, 8007ca2 <_vfiprintf_r+0x86>
 8007c9e:	2a25      	cmp	r2, #37	@ 0x25
 8007ca0:	d1f9      	bne.n	8007c96 <_vfiprintf_r+0x7a>
 8007ca2:	ebba 0b04 	subs.w	fp, sl, r4
 8007ca6:	d00b      	beq.n	8007cc0 <_vfiprintf_r+0xa4>
 8007ca8:	465b      	mov	r3, fp
 8007caa:	4622      	mov	r2, r4
 8007cac:	4629      	mov	r1, r5
 8007cae:	4630      	mov	r0, r6
 8007cb0:	f7ff ffa1 	bl	8007bf6 <__sfputs_r>
 8007cb4:	3001      	adds	r0, #1
 8007cb6:	f000 80a7 	beq.w	8007e08 <_vfiprintf_r+0x1ec>
 8007cba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007cbc:	445a      	add	r2, fp
 8007cbe:	9209      	str	r2, [sp, #36]	@ 0x24
 8007cc0:	f89a 3000 	ldrb.w	r3, [sl]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 809f 	beq.w	8007e08 <_vfiprintf_r+0x1ec>
 8007cca:	2300      	movs	r3, #0
 8007ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007cd4:	f10a 0a01 	add.w	sl, sl, #1
 8007cd8:	9304      	str	r3, [sp, #16]
 8007cda:	9307      	str	r3, [sp, #28]
 8007cdc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ce0:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ce2:	4654      	mov	r4, sl
 8007ce4:	2205      	movs	r2, #5
 8007ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cea:	4853      	ldr	r0, [pc, #332]	@ (8007e38 <_vfiprintf_r+0x21c>)
 8007cec:	f7f8 fa70 	bl	80001d0 <memchr>
 8007cf0:	9a04      	ldr	r2, [sp, #16]
 8007cf2:	b9d8      	cbnz	r0, 8007d2c <_vfiprintf_r+0x110>
 8007cf4:	06d1      	lsls	r1, r2, #27
 8007cf6:	bf44      	itt	mi
 8007cf8:	2320      	movmi	r3, #32
 8007cfa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007cfe:	0713      	lsls	r3, r2, #28
 8007d00:	bf44      	itt	mi
 8007d02:	232b      	movmi	r3, #43	@ 0x2b
 8007d04:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d08:	f89a 3000 	ldrb.w	r3, [sl]
 8007d0c:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d0e:	d015      	beq.n	8007d3c <_vfiprintf_r+0x120>
 8007d10:	9a07      	ldr	r2, [sp, #28]
 8007d12:	4654      	mov	r4, sl
 8007d14:	2000      	movs	r0, #0
 8007d16:	f04f 0c0a 	mov.w	ip, #10
 8007d1a:	4621      	mov	r1, r4
 8007d1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d20:	3b30      	subs	r3, #48	@ 0x30
 8007d22:	2b09      	cmp	r3, #9
 8007d24:	d94b      	bls.n	8007dbe <_vfiprintf_r+0x1a2>
 8007d26:	b1b0      	cbz	r0, 8007d56 <_vfiprintf_r+0x13a>
 8007d28:	9207      	str	r2, [sp, #28]
 8007d2a:	e014      	b.n	8007d56 <_vfiprintf_r+0x13a>
 8007d2c:	eba0 0308 	sub.w	r3, r0, r8
 8007d30:	fa09 f303 	lsl.w	r3, r9, r3
 8007d34:	4313      	orrs	r3, r2
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	46a2      	mov	sl, r4
 8007d3a:	e7d2      	b.n	8007ce2 <_vfiprintf_r+0xc6>
 8007d3c:	9b03      	ldr	r3, [sp, #12]
 8007d3e:	1d19      	adds	r1, r3, #4
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	9103      	str	r1, [sp, #12]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	bfbb      	ittet	lt
 8007d48:	425b      	neglt	r3, r3
 8007d4a:	f042 0202 	orrlt.w	r2, r2, #2
 8007d4e:	9307      	strge	r3, [sp, #28]
 8007d50:	9307      	strlt	r3, [sp, #28]
 8007d52:	bfb8      	it	lt
 8007d54:	9204      	strlt	r2, [sp, #16]
 8007d56:	7823      	ldrb	r3, [r4, #0]
 8007d58:	2b2e      	cmp	r3, #46	@ 0x2e
 8007d5a:	d10a      	bne.n	8007d72 <_vfiprintf_r+0x156>
 8007d5c:	7863      	ldrb	r3, [r4, #1]
 8007d5e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d60:	d132      	bne.n	8007dc8 <_vfiprintf_r+0x1ac>
 8007d62:	9b03      	ldr	r3, [sp, #12]
 8007d64:	1d1a      	adds	r2, r3, #4
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	9203      	str	r2, [sp, #12]
 8007d6a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007d6e:	3402      	adds	r4, #2
 8007d70:	9305      	str	r3, [sp, #20]
 8007d72:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007e48 <_vfiprintf_r+0x22c>
 8007d76:	7821      	ldrb	r1, [r4, #0]
 8007d78:	2203      	movs	r2, #3
 8007d7a:	4650      	mov	r0, sl
 8007d7c:	f7f8 fa28 	bl	80001d0 <memchr>
 8007d80:	b138      	cbz	r0, 8007d92 <_vfiprintf_r+0x176>
 8007d82:	9b04      	ldr	r3, [sp, #16]
 8007d84:	eba0 000a 	sub.w	r0, r0, sl
 8007d88:	2240      	movs	r2, #64	@ 0x40
 8007d8a:	4082      	lsls	r2, r0
 8007d8c:	4313      	orrs	r3, r2
 8007d8e:	3401      	adds	r4, #1
 8007d90:	9304      	str	r3, [sp, #16]
 8007d92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d96:	4829      	ldr	r0, [pc, #164]	@ (8007e3c <_vfiprintf_r+0x220>)
 8007d98:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d9c:	2206      	movs	r2, #6
 8007d9e:	f7f8 fa17 	bl	80001d0 <memchr>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d03f      	beq.n	8007e26 <_vfiprintf_r+0x20a>
 8007da6:	4b26      	ldr	r3, [pc, #152]	@ (8007e40 <_vfiprintf_r+0x224>)
 8007da8:	bb1b      	cbnz	r3, 8007df2 <_vfiprintf_r+0x1d6>
 8007daa:	9b03      	ldr	r3, [sp, #12]
 8007dac:	3307      	adds	r3, #7
 8007dae:	f023 0307 	bic.w	r3, r3, #7
 8007db2:	3308      	adds	r3, #8
 8007db4:	9303      	str	r3, [sp, #12]
 8007db6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007db8:	443b      	add	r3, r7
 8007dba:	9309      	str	r3, [sp, #36]	@ 0x24
 8007dbc:	e76a      	b.n	8007c94 <_vfiprintf_r+0x78>
 8007dbe:	fb0c 3202 	mla	r2, ip, r2, r3
 8007dc2:	460c      	mov	r4, r1
 8007dc4:	2001      	movs	r0, #1
 8007dc6:	e7a8      	b.n	8007d1a <_vfiprintf_r+0xfe>
 8007dc8:	2300      	movs	r3, #0
 8007dca:	3401      	adds	r4, #1
 8007dcc:	9305      	str	r3, [sp, #20]
 8007dce:	4619      	mov	r1, r3
 8007dd0:	f04f 0c0a 	mov.w	ip, #10
 8007dd4:	4620      	mov	r0, r4
 8007dd6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007dda:	3a30      	subs	r2, #48	@ 0x30
 8007ddc:	2a09      	cmp	r2, #9
 8007dde:	d903      	bls.n	8007de8 <_vfiprintf_r+0x1cc>
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d0c6      	beq.n	8007d72 <_vfiprintf_r+0x156>
 8007de4:	9105      	str	r1, [sp, #20]
 8007de6:	e7c4      	b.n	8007d72 <_vfiprintf_r+0x156>
 8007de8:	fb0c 2101 	mla	r1, ip, r1, r2
 8007dec:	4604      	mov	r4, r0
 8007dee:	2301      	movs	r3, #1
 8007df0:	e7f0      	b.n	8007dd4 <_vfiprintf_r+0x1b8>
 8007df2:	ab03      	add	r3, sp, #12
 8007df4:	9300      	str	r3, [sp, #0]
 8007df6:	462a      	mov	r2, r5
 8007df8:	4b12      	ldr	r3, [pc, #72]	@ (8007e44 <_vfiprintf_r+0x228>)
 8007dfa:	a904      	add	r1, sp, #16
 8007dfc:	4630      	mov	r0, r6
 8007dfe:	f3af 8000 	nop.w
 8007e02:	4607      	mov	r7, r0
 8007e04:	1c78      	adds	r0, r7, #1
 8007e06:	d1d6      	bne.n	8007db6 <_vfiprintf_r+0x19a>
 8007e08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e0a:	07d9      	lsls	r1, r3, #31
 8007e0c:	d405      	bmi.n	8007e1a <_vfiprintf_r+0x1fe>
 8007e0e:	89ab      	ldrh	r3, [r5, #12]
 8007e10:	059a      	lsls	r2, r3, #22
 8007e12:	d402      	bmi.n	8007e1a <_vfiprintf_r+0x1fe>
 8007e14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e16:	f7ff fddd 	bl	80079d4 <__retarget_lock_release_recursive>
 8007e1a:	89ab      	ldrh	r3, [r5, #12]
 8007e1c:	065b      	lsls	r3, r3, #25
 8007e1e:	f53f af1f 	bmi.w	8007c60 <_vfiprintf_r+0x44>
 8007e22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e24:	e71e      	b.n	8007c64 <_vfiprintf_r+0x48>
 8007e26:	ab03      	add	r3, sp, #12
 8007e28:	9300      	str	r3, [sp, #0]
 8007e2a:	462a      	mov	r2, r5
 8007e2c:	4b05      	ldr	r3, [pc, #20]	@ (8007e44 <_vfiprintf_r+0x228>)
 8007e2e:	a904      	add	r1, sp, #16
 8007e30:	4630      	mov	r0, r6
 8007e32:	f000 f879 	bl	8007f28 <_printf_i>
 8007e36:	e7e4      	b.n	8007e02 <_vfiprintf_r+0x1e6>
 8007e38:	080084c4 	.word	0x080084c4
 8007e3c:	080084ce 	.word	0x080084ce
 8007e40:	00000000 	.word	0x00000000
 8007e44:	08007bf7 	.word	0x08007bf7
 8007e48:	080084ca 	.word	0x080084ca

08007e4c <_printf_common>:
 8007e4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e50:	4616      	mov	r6, r2
 8007e52:	4698      	mov	r8, r3
 8007e54:	688a      	ldr	r2, [r1, #8]
 8007e56:	690b      	ldr	r3, [r1, #16]
 8007e58:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	bfb8      	it	lt
 8007e60:	4613      	movlt	r3, r2
 8007e62:	6033      	str	r3, [r6, #0]
 8007e64:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007e68:	4607      	mov	r7, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	b10a      	cbz	r2, 8007e72 <_printf_common+0x26>
 8007e6e:	3301      	adds	r3, #1
 8007e70:	6033      	str	r3, [r6, #0]
 8007e72:	6823      	ldr	r3, [r4, #0]
 8007e74:	0699      	lsls	r1, r3, #26
 8007e76:	bf42      	ittt	mi
 8007e78:	6833      	ldrmi	r3, [r6, #0]
 8007e7a:	3302      	addmi	r3, #2
 8007e7c:	6033      	strmi	r3, [r6, #0]
 8007e7e:	6825      	ldr	r5, [r4, #0]
 8007e80:	f015 0506 	ands.w	r5, r5, #6
 8007e84:	d106      	bne.n	8007e94 <_printf_common+0x48>
 8007e86:	f104 0a19 	add.w	sl, r4, #25
 8007e8a:	68e3      	ldr	r3, [r4, #12]
 8007e8c:	6832      	ldr	r2, [r6, #0]
 8007e8e:	1a9b      	subs	r3, r3, r2
 8007e90:	42ab      	cmp	r3, r5
 8007e92:	dc26      	bgt.n	8007ee2 <_printf_common+0x96>
 8007e94:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007e98:	6822      	ldr	r2, [r4, #0]
 8007e9a:	3b00      	subs	r3, #0
 8007e9c:	bf18      	it	ne
 8007e9e:	2301      	movne	r3, #1
 8007ea0:	0692      	lsls	r2, r2, #26
 8007ea2:	d42b      	bmi.n	8007efc <_printf_common+0xb0>
 8007ea4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ea8:	4641      	mov	r1, r8
 8007eaa:	4638      	mov	r0, r7
 8007eac:	47c8      	blx	r9
 8007eae:	3001      	adds	r0, #1
 8007eb0:	d01e      	beq.n	8007ef0 <_printf_common+0xa4>
 8007eb2:	6823      	ldr	r3, [r4, #0]
 8007eb4:	6922      	ldr	r2, [r4, #16]
 8007eb6:	f003 0306 	and.w	r3, r3, #6
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	bf02      	ittt	eq
 8007ebe:	68e5      	ldreq	r5, [r4, #12]
 8007ec0:	6833      	ldreq	r3, [r6, #0]
 8007ec2:	1aed      	subeq	r5, r5, r3
 8007ec4:	68a3      	ldr	r3, [r4, #8]
 8007ec6:	bf0c      	ite	eq
 8007ec8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ecc:	2500      	movne	r5, #0
 8007ece:	4293      	cmp	r3, r2
 8007ed0:	bfc4      	itt	gt
 8007ed2:	1a9b      	subgt	r3, r3, r2
 8007ed4:	18ed      	addgt	r5, r5, r3
 8007ed6:	2600      	movs	r6, #0
 8007ed8:	341a      	adds	r4, #26
 8007eda:	42b5      	cmp	r5, r6
 8007edc:	d11a      	bne.n	8007f14 <_printf_common+0xc8>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	e008      	b.n	8007ef4 <_printf_common+0xa8>
 8007ee2:	2301      	movs	r3, #1
 8007ee4:	4652      	mov	r2, sl
 8007ee6:	4641      	mov	r1, r8
 8007ee8:	4638      	mov	r0, r7
 8007eea:	47c8      	blx	r9
 8007eec:	3001      	adds	r0, #1
 8007eee:	d103      	bne.n	8007ef8 <_printf_common+0xac>
 8007ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8007ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ef8:	3501      	adds	r5, #1
 8007efa:	e7c6      	b.n	8007e8a <_printf_common+0x3e>
 8007efc:	18e1      	adds	r1, r4, r3
 8007efe:	1c5a      	adds	r2, r3, #1
 8007f00:	2030      	movs	r0, #48	@ 0x30
 8007f02:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f06:	4422      	add	r2, r4
 8007f08:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f0c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f10:	3302      	adds	r3, #2
 8007f12:	e7c7      	b.n	8007ea4 <_printf_common+0x58>
 8007f14:	2301      	movs	r3, #1
 8007f16:	4622      	mov	r2, r4
 8007f18:	4641      	mov	r1, r8
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	47c8      	blx	r9
 8007f1e:	3001      	adds	r0, #1
 8007f20:	d0e6      	beq.n	8007ef0 <_printf_common+0xa4>
 8007f22:	3601      	adds	r6, #1
 8007f24:	e7d9      	b.n	8007eda <_printf_common+0x8e>
	...

08007f28 <_printf_i>:
 8007f28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f2c:	7e0f      	ldrb	r7, [r1, #24]
 8007f2e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f30:	2f78      	cmp	r7, #120	@ 0x78
 8007f32:	4691      	mov	r9, r2
 8007f34:	4680      	mov	r8, r0
 8007f36:	460c      	mov	r4, r1
 8007f38:	469a      	mov	sl, r3
 8007f3a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f3e:	d807      	bhi.n	8007f50 <_printf_i+0x28>
 8007f40:	2f62      	cmp	r7, #98	@ 0x62
 8007f42:	d80a      	bhi.n	8007f5a <_printf_i+0x32>
 8007f44:	2f00      	cmp	r7, #0
 8007f46:	f000 80d2 	beq.w	80080ee <_printf_i+0x1c6>
 8007f4a:	2f58      	cmp	r7, #88	@ 0x58
 8007f4c:	f000 80b9 	beq.w	80080c2 <_printf_i+0x19a>
 8007f50:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007f54:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007f58:	e03a      	b.n	8007fd0 <_printf_i+0xa8>
 8007f5a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007f5e:	2b15      	cmp	r3, #21
 8007f60:	d8f6      	bhi.n	8007f50 <_printf_i+0x28>
 8007f62:	a101      	add	r1, pc, #4	@ (adr r1, 8007f68 <_printf_i+0x40>)
 8007f64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f68:	08007fc1 	.word	0x08007fc1
 8007f6c:	08007fd5 	.word	0x08007fd5
 8007f70:	08007f51 	.word	0x08007f51
 8007f74:	08007f51 	.word	0x08007f51
 8007f78:	08007f51 	.word	0x08007f51
 8007f7c:	08007f51 	.word	0x08007f51
 8007f80:	08007fd5 	.word	0x08007fd5
 8007f84:	08007f51 	.word	0x08007f51
 8007f88:	08007f51 	.word	0x08007f51
 8007f8c:	08007f51 	.word	0x08007f51
 8007f90:	08007f51 	.word	0x08007f51
 8007f94:	080080d5 	.word	0x080080d5
 8007f98:	08007fff 	.word	0x08007fff
 8007f9c:	0800808f 	.word	0x0800808f
 8007fa0:	08007f51 	.word	0x08007f51
 8007fa4:	08007f51 	.word	0x08007f51
 8007fa8:	080080f7 	.word	0x080080f7
 8007fac:	08007f51 	.word	0x08007f51
 8007fb0:	08007fff 	.word	0x08007fff
 8007fb4:	08007f51 	.word	0x08007f51
 8007fb8:	08007f51 	.word	0x08007f51
 8007fbc:	08008097 	.word	0x08008097
 8007fc0:	6833      	ldr	r3, [r6, #0]
 8007fc2:	1d1a      	adds	r2, r3, #4
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	6032      	str	r2, [r6, #0]
 8007fc8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fcc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007fd0:	2301      	movs	r3, #1
 8007fd2:	e09d      	b.n	8008110 <_printf_i+0x1e8>
 8007fd4:	6833      	ldr	r3, [r6, #0]
 8007fd6:	6820      	ldr	r0, [r4, #0]
 8007fd8:	1d19      	adds	r1, r3, #4
 8007fda:	6031      	str	r1, [r6, #0]
 8007fdc:	0606      	lsls	r6, r0, #24
 8007fde:	d501      	bpl.n	8007fe4 <_printf_i+0xbc>
 8007fe0:	681d      	ldr	r5, [r3, #0]
 8007fe2:	e003      	b.n	8007fec <_printf_i+0xc4>
 8007fe4:	0645      	lsls	r5, r0, #25
 8007fe6:	d5fb      	bpl.n	8007fe0 <_printf_i+0xb8>
 8007fe8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007fec:	2d00      	cmp	r5, #0
 8007fee:	da03      	bge.n	8007ff8 <_printf_i+0xd0>
 8007ff0:	232d      	movs	r3, #45	@ 0x2d
 8007ff2:	426d      	negs	r5, r5
 8007ff4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007ff8:	4859      	ldr	r0, [pc, #356]	@ (8008160 <_printf_i+0x238>)
 8007ffa:	230a      	movs	r3, #10
 8007ffc:	e011      	b.n	8008022 <_printf_i+0xfa>
 8007ffe:	6821      	ldr	r1, [r4, #0]
 8008000:	6833      	ldr	r3, [r6, #0]
 8008002:	0608      	lsls	r0, r1, #24
 8008004:	f853 5b04 	ldr.w	r5, [r3], #4
 8008008:	d402      	bmi.n	8008010 <_printf_i+0xe8>
 800800a:	0649      	lsls	r1, r1, #25
 800800c:	bf48      	it	mi
 800800e:	b2ad      	uxthmi	r5, r5
 8008010:	2f6f      	cmp	r7, #111	@ 0x6f
 8008012:	4853      	ldr	r0, [pc, #332]	@ (8008160 <_printf_i+0x238>)
 8008014:	6033      	str	r3, [r6, #0]
 8008016:	bf14      	ite	ne
 8008018:	230a      	movne	r3, #10
 800801a:	2308      	moveq	r3, #8
 800801c:	2100      	movs	r1, #0
 800801e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008022:	6866      	ldr	r6, [r4, #4]
 8008024:	60a6      	str	r6, [r4, #8]
 8008026:	2e00      	cmp	r6, #0
 8008028:	bfa2      	ittt	ge
 800802a:	6821      	ldrge	r1, [r4, #0]
 800802c:	f021 0104 	bicge.w	r1, r1, #4
 8008030:	6021      	strge	r1, [r4, #0]
 8008032:	b90d      	cbnz	r5, 8008038 <_printf_i+0x110>
 8008034:	2e00      	cmp	r6, #0
 8008036:	d04b      	beq.n	80080d0 <_printf_i+0x1a8>
 8008038:	4616      	mov	r6, r2
 800803a:	fbb5 f1f3 	udiv	r1, r5, r3
 800803e:	fb03 5711 	mls	r7, r3, r1, r5
 8008042:	5dc7      	ldrb	r7, [r0, r7]
 8008044:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008048:	462f      	mov	r7, r5
 800804a:	42bb      	cmp	r3, r7
 800804c:	460d      	mov	r5, r1
 800804e:	d9f4      	bls.n	800803a <_printf_i+0x112>
 8008050:	2b08      	cmp	r3, #8
 8008052:	d10b      	bne.n	800806c <_printf_i+0x144>
 8008054:	6823      	ldr	r3, [r4, #0]
 8008056:	07df      	lsls	r7, r3, #31
 8008058:	d508      	bpl.n	800806c <_printf_i+0x144>
 800805a:	6923      	ldr	r3, [r4, #16]
 800805c:	6861      	ldr	r1, [r4, #4]
 800805e:	4299      	cmp	r1, r3
 8008060:	bfde      	ittt	le
 8008062:	2330      	movle	r3, #48	@ 0x30
 8008064:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008068:	f106 36ff 	addle.w	r6, r6, #4294967295
 800806c:	1b92      	subs	r2, r2, r6
 800806e:	6122      	str	r2, [r4, #16]
 8008070:	f8cd a000 	str.w	sl, [sp]
 8008074:	464b      	mov	r3, r9
 8008076:	aa03      	add	r2, sp, #12
 8008078:	4621      	mov	r1, r4
 800807a:	4640      	mov	r0, r8
 800807c:	f7ff fee6 	bl	8007e4c <_printf_common>
 8008080:	3001      	adds	r0, #1
 8008082:	d14a      	bne.n	800811a <_printf_i+0x1f2>
 8008084:	f04f 30ff 	mov.w	r0, #4294967295
 8008088:	b004      	add	sp, #16
 800808a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f043 0320 	orr.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	4833      	ldr	r0, [pc, #204]	@ (8008164 <_printf_i+0x23c>)
 8008098:	2778      	movs	r7, #120	@ 0x78
 800809a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800809e:	6823      	ldr	r3, [r4, #0]
 80080a0:	6831      	ldr	r1, [r6, #0]
 80080a2:	061f      	lsls	r7, r3, #24
 80080a4:	f851 5b04 	ldr.w	r5, [r1], #4
 80080a8:	d402      	bmi.n	80080b0 <_printf_i+0x188>
 80080aa:	065f      	lsls	r7, r3, #25
 80080ac:	bf48      	it	mi
 80080ae:	b2ad      	uxthmi	r5, r5
 80080b0:	6031      	str	r1, [r6, #0]
 80080b2:	07d9      	lsls	r1, r3, #31
 80080b4:	bf44      	itt	mi
 80080b6:	f043 0320 	orrmi.w	r3, r3, #32
 80080ba:	6023      	strmi	r3, [r4, #0]
 80080bc:	b11d      	cbz	r5, 80080c6 <_printf_i+0x19e>
 80080be:	2310      	movs	r3, #16
 80080c0:	e7ac      	b.n	800801c <_printf_i+0xf4>
 80080c2:	4827      	ldr	r0, [pc, #156]	@ (8008160 <_printf_i+0x238>)
 80080c4:	e7e9      	b.n	800809a <_printf_i+0x172>
 80080c6:	6823      	ldr	r3, [r4, #0]
 80080c8:	f023 0320 	bic.w	r3, r3, #32
 80080cc:	6023      	str	r3, [r4, #0]
 80080ce:	e7f6      	b.n	80080be <_printf_i+0x196>
 80080d0:	4616      	mov	r6, r2
 80080d2:	e7bd      	b.n	8008050 <_printf_i+0x128>
 80080d4:	6833      	ldr	r3, [r6, #0]
 80080d6:	6825      	ldr	r5, [r4, #0]
 80080d8:	6961      	ldr	r1, [r4, #20]
 80080da:	1d18      	adds	r0, r3, #4
 80080dc:	6030      	str	r0, [r6, #0]
 80080de:	062e      	lsls	r6, r5, #24
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	d501      	bpl.n	80080e8 <_printf_i+0x1c0>
 80080e4:	6019      	str	r1, [r3, #0]
 80080e6:	e002      	b.n	80080ee <_printf_i+0x1c6>
 80080e8:	0668      	lsls	r0, r5, #25
 80080ea:	d5fb      	bpl.n	80080e4 <_printf_i+0x1bc>
 80080ec:	8019      	strh	r1, [r3, #0]
 80080ee:	2300      	movs	r3, #0
 80080f0:	6123      	str	r3, [r4, #16]
 80080f2:	4616      	mov	r6, r2
 80080f4:	e7bc      	b.n	8008070 <_printf_i+0x148>
 80080f6:	6833      	ldr	r3, [r6, #0]
 80080f8:	1d1a      	adds	r2, r3, #4
 80080fa:	6032      	str	r2, [r6, #0]
 80080fc:	681e      	ldr	r6, [r3, #0]
 80080fe:	6862      	ldr	r2, [r4, #4]
 8008100:	2100      	movs	r1, #0
 8008102:	4630      	mov	r0, r6
 8008104:	f7f8 f864 	bl	80001d0 <memchr>
 8008108:	b108      	cbz	r0, 800810e <_printf_i+0x1e6>
 800810a:	1b80      	subs	r0, r0, r6
 800810c:	6060      	str	r0, [r4, #4]
 800810e:	6863      	ldr	r3, [r4, #4]
 8008110:	6123      	str	r3, [r4, #16]
 8008112:	2300      	movs	r3, #0
 8008114:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008118:	e7aa      	b.n	8008070 <_printf_i+0x148>
 800811a:	6923      	ldr	r3, [r4, #16]
 800811c:	4632      	mov	r2, r6
 800811e:	4649      	mov	r1, r9
 8008120:	4640      	mov	r0, r8
 8008122:	47d0      	blx	sl
 8008124:	3001      	adds	r0, #1
 8008126:	d0ad      	beq.n	8008084 <_printf_i+0x15c>
 8008128:	6823      	ldr	r3, [r4, #0]
 800812a:	079b      	lsls	r3, r3, #30
 800812c:	d413      	bmi.n	8008156 <_printf_i+0x22e>
 800812e:	68e0      	ldr	r0, [r4, #12]
 8008130:	9b03      	ldr	r3, [sp, #12]
 8008132:	4298      	cmp	r0, r3
 8008134:	bfb8      	it	lt
 8008136:	4618      	movlt	r0, r3
 8008138:	e7a6      	b.n	8008088 <_printf_i+0x160>
 800813a:	2301      	movs	r3, #1
 800813c:	4632      	mov	r2, r6
 800813e:	4649      	mov	r1, r9
 8008140:	4640      	mov	r0, r8
 8008142:	47d0      	blx	sl
 8008144:	3001      	adds	r0, #1
 8008146:	d09d      	beq.n	8008084 <_printf_i+0x15c>
 8008148:	3501      	adds	r5, #1
 800814a:	68e3      	ldr	r3, [r4, #12]
 800814c:	9903      	ldr	r1, [sp, #12]
 800814e:	1a5b      	subs	r3, r3, r1
 8008150:	42ab      	cmp	r3, r5
 8008152:	dcf2      	bgt.n	800813a <_printf_i+0x212>
 8008154:	e7eb      	b.n	800812e <_printf_i+0x206>
 8008156:	2500      	movs	r5, #0
 8008158:	f104 0619 	add.w	r6, r4, #25
 800815c:	e7f5      	b.n	800814a <_printf_i+0x222>
 800815e:	bf00      	nop
 8008160:	080084d5 	.word	0x080084d5
 8008164:	080084e6 	.word	0x080084e6

08008168 <__sflush_r>:
 8008168:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800816c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008170:	0716      	lsls	r6, r2, #28
 8008172:	4605      	mov	r5, r0
 8008174:	460c      	mov	r4, r1
 8008176:	d454      	bmi.n	8008222 <__sflush_r+0xba>
 8008178:	684b      	ldr	r3, [r1, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	dc02      	bgt.n	8008184 <__sflush_r+0x1c>
 800817e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	dd48      	ble.n	8008216 <__sflush_r+0xae>
 8008184:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008186:	2e00      	cmp	r6, #0
 8008188:	d045      	beq.n	8008216 <__sflush_r+0xae>
 800818a:	2300      	movs	r3, #0
 800818c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008190:	682f      	ldr	r7, [r5, #0]
 8008192:	6a21      	ldr	r1, [r4, #32]
 8008194:	602b      	str	r3, [r5, #0]
 8008196:	d030      	beq.n	80081fa <__sflush_r+0x92>
 8008198:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800819a:	89a3      	ldrh	r3, [r4, #12]
 800819c:	0759      	lsls	r1, r3, #29
 800819e:	d505      	bpl.n	80081ac <__sflush_r+0x44>
 80081a0:	6863      	ldr	r3, [r4, #4]
 80081a2:	1ad2      	subs	r2, r2, r3
 80081a4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081a6:	b10b      	cbz	r3, 80081ac <__sflush_r+0x44>
 80081a8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081aa:	1ad2      	subs	r2, r2, r3
 80081ac:	2300      	movs	r3, #0
 80081ae:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081b0:	6a21      	ldr	r1, [r4, #32]
 80081b2:	4628      	mov	r0, r5
 80081b4:	47b0      	blx	r6
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	89a3      	ldrh	r3, [r4, #12]
 80081ba:	d106      	bne.n	80081ca <__sflush_r+0x62>
 80081bc:	6829      	ldr	r1, [r5, #0]
 80081be:	291d      	cmp	r1, #29
 80081c0:	d82b      	bhi.n	800821a <__sflush_r+0xb2>
 80081c2:	4a2a      	ldr	r2, [pc, #168]	@ (800826c <__sflush_r+0x104>)
 80081c4:	410a      	asrs	r2, r1
 80081c6:	07d6      	lsls	r6, r2, #31
 80081c8:	d427      	bmi.n	800821a <__sflush_r+0xb2>
 80081ca:	2200      	movs	r2, #0
 80081cc:	6062      	str	r2, [r4, #4]
 80081ce:	04d9      	lsls	r1, r3, #19
 80081d0:	6922      	ldr	r2, [r4, #16]
 80081d2:	6022      	str	r2, [r4, #0]
 80081d4:	d504      	bpl.n	80081e0 <__sflush_r+0x78>
 80081d6:	1c42      	adds	r2, r0, #1
 80081d8:	d101      	bne.n	80081de <__sflush_r+0x76>
 80081da:	682b      	ldr	r3, [r5, #0]
 80081dc:	b903      	cbnz	r3, 80081e0 <__sflush_r+0x78>
 80081de:	6560      	str	r0, [r4, #84]	@ 0x54
 80081e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081e2:	602f      	str	r7, [r5, #0]
 80081e4:	b1b9      	cbz	r1, 8008216 <__sflush_r+0xae>
 80081e6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081ea:	4299      	cmp	r1, r3
 80081ec:	d002      	beq.n	80081f4 <__sflush_r+0x8c>
 80081ee:	4628      	mov	r0, r5
 80081f0:	f7ff fbf2 	bl	80079d8 <_free_r>
 80081f4:	2300      	movs	r3, #0
 80081f6:	6363      	str	r3, [r4, #52]	@ 0x34
 80081f8:	e00d      	b.n	8008216 <__sflush_r+0xae>
 80081fa:	2301      	movs	r3, #1
 80081fc:	4628      	mov	r0, r5
 80081fe:	47b0      	blx	r6
 8008200:	4602      	mov	r2, r0
 8008202:	1c50      	adds	r0, r2, #1
 8008204:	d1c9      	bne.n	800819a <__sflush_r+0x32>
 8008206:	682b      	ldr	r3, [r5, #0]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d0c6      	beq.n	800819a <__sflush_r+0x32>
 800820c:	2b1d      	cmp	r3, #29
 800820e:	d001      	beq.n	8008214 <__sflush_r+0xac>
 8008210:	2b16      	cmp	r3, #22
 8008212:	d11e      	bne.n	8008252 <__sflush_r+0xea>
 8008214:	602f      	str	r7, [r5, #0]
 8008216:	2000      	movs	r0, #0
 8008218:	e022      	b.n	8008260 <__sflush_r+0xf8>
 800821a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800821e:	b21b      	sxth	r3, r3
 8008220:	e01b      	b.n	800825a <__sflush_r+0xf2>
 8008222:	690f      	ldr	r7, [r1, #16]
 8008224:	2f00      	cmp	r7, #0
 8008226:	d0f6      	beq.n	8008216 <__sflush_r+0xae>
 8008228:	0793      	lsls	r3, r2, #30
 800822a:	680e      	ldr	r6, [r1, #0]
 800822c:	bf08      	it	eq
 800822e:	694b      	ldreq	r3, [r1, #20]
 8008230:	600f      	str	r7, [r1, #0]
 8008232:	bf18      	it	ne
 8008234:	2300      	movne	r3, #0
 8008236:	eba6 0807 	sub.w	r8, r6, r7
 800823a:	608b      	str	r3, [r1, #8]
 800823c:	f1b8 0f00 	cmp.w	r8, #0
 8008240:	dde9      	ble.n	8008216 <__sflush_r+0xae>
 8008242:	6a21      	ldr	r1, [r4, #32]
 8008244:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008246:	4643      	mov	r3, r8
 8008248:	463a      	mov	r2, r7
 800824a:	4628      	mov	r0, r5
 800824c:	47b0      	blx	r6
 800824e:	2800      	cmp	r0, #0
 8008250:	dc08      	bgt.n	8008264 <__sflush_r+0xfc>
 8008252:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008256:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800825a:	81a3      	strh	r3, [r4, #12]
 800825c:	f04f 30ff 	mov.w	r0, #4294967295
 8008260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008264:	4407      	add	r7, r0
 8008266:	eba8 0800 	sub.w	r8, r8, r0
 800826a:	e7e7      	b.n	800823c <__sflush_r+0xd4>
 800826c:	dfbffffe 	.word	0xdfbffffe

08008270 <_fflush_r>:
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	690b      	ldr	r3, [r1, #16]
 8008274:	4605      	mov	r5, r0
 8008276:	460c      	mov	r4, r1
 8008278:	b913      	cbnz	r3, 8008280 <_fflush_r+0x10>
 800827a:	2500      	movs	r5, #0
 800827c:	4628      	mov	r0, r5
 800827e:	bd38      	pop	{r3, r4, r5, pc}
 8008280:	b118      	cbz	r0, 800828a <_fflush_r+0x1a>
 8008282:	6a03      	ldr	r3, [r0, #32]
 8008284:	b90b      	cbnz	r3, 800828a <_fflush_r+0x1a>
 8008286:	f7ff f9ad 	bl	80075e4 <__sinit>
 800828a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d0f3      	beq.n	800827a <_fflush_r+0xa>
 8008292:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008294:	07d0      	lsls	r0, r2, #31
 8008296:	d404      	bmi.n	80082a2 <_fflush_r+0x32>
 8008298:	0599      	lsls	r1, r3, #22
 800829a:	d402      	bmi.n	80082a2 <_fflush_r+0x32>
 800829c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800829e:	f7ff fb98 	bl	80079d2 <__retarget_lock_acquire_recursive>
 80082a2:	4628      	mov	r0, r5
 80082a4:	4621      	mov	r1, r4
 80082a6:	f7ff ff5f 	bl	8008168 <__sflush_r>
 80082aa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082ac:	07da      	lsls	r2, r3, #31
 80082ae:	4605      	mov	r5, r0
 80082b0:	d4e4      	bmi.n	800827c <_fflush_r+0xc>
 80082b2:	89a3      	ldrh	r3, [r4, #12]
 80082b4:	059b      	lsls	r3, r3, #22
 80082b6:	d4e1      	bmi.n	800827c <_fflush_r+0xc>
 80082b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ba:	f7ff fb8b 	bl	80079d4 <__retarget_lock_release_recursive>
 80082be:	e7dd      	b.n	800827c <_fflush_r+0xc>

080082c0 <__swhatbuf_r>:
 80082c0:	b570      	push	{r4, r5, r6, lr}
 80082c2:	460c      	mov	r4, r1
 80082c4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082c8:	2900      	cmp	r1, #0
 80082ca:	b096      	sub	sp, #88	@ 0x58
 80082cc:	4615      	mov	r5, r2
 80082ce:	461e      	mov	r6, r3
 80082d0:	da0d      	bge.n	80082ee <__swhatbuf_r+0x2e>
 80082d2:	89a3      	ldrh	r3, [r4, #12]
 80082d4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082d8:	f04f 0100 	mov.w	r1, #0
 80082dc:	bf14      	ite	ne
 80082de:	2340      	movne	r3, #64	@ 0x40
 80082e0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082e4:	2000      	movs	r0, #0
 80082e6:	6031      	str	r1, [r6, #0]
 80082e8:	602b      	str	r3, [r5, #0]
 80082ea:	b016      	add	sp, #88	@ 0x58
 80082ec:	bd70      	pop	{r4, r5, r6, pc}
 80082ee:	466a      	mov	r2, sp
 80082f0:	f000 f848 	bl	8008384 <_fstat_r>
 80082f4:	2800      	cmp	r0, #0
 80082f6:	dbec      	blt.n	80082d2 <__swhatbuf_r+0x12>
 80082f8:	9901      	ldr	r1, [sp, #4]
 80082fa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082fe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008302:	4259      	negs	r1, r3
 8008304:	4159      	adcs	r1, r3
 8008306:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800830a:	e7eb      	b.n	80082e4 <__swhatbuf_r+0x24>

0800830c <__smakebuf_r>:
 800830c:	898b      	ldrh	r3, [r1, #12]
 800830e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008310:	079d      	lsls	r5, r3, #30
 8008312:	4606      	mov	r6, r0
 8008314:	460c      	mov	r4, r1
 8008316:	d507      	bpl.n	8008328 <__smakebuf_r+0x1c>
 8008318:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800831c:	6023      	str	r3, [r4, #0]
 800831e:	6123      	str	r3, [r4, #16]
 8008320:	2301      	movs	r3, #1
 8008322:	6163      	str	r3, [r4, #20]
 8008324:	b003      	add	sp, #12
 8008326:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008328:	ab01      	add	r3, sp, #4
 800832a:	466a      	mov	r2, sp
 800832c:	f7ff ffc8 	bl	80082c0 <__swhatbuf_r>
 8008330:	9f00      	ldr	r7, [sp, #0]
 8008332:	4605      	mov	r5, r0
 8008334:	4639      	mov	r1, r7
 8008336:	4630      	mov	r0, r6
 8008338:	f7ff fbba 	bl	8007ab0 <_malloc_r>
 800833c:	b948      	cbnz	r0, 8008352 <__smakebuf_r+0x46>
 800833e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008342:	059a      	lsls	r2, r3, #22
 8008344:	d4ee      	bmi.n	8008324 <__smakebuf_r+0x18>
 8008346:	f023 0303 	bic.w	r3, r3, #3
 800834a:	f043 0302 	orr.w	r3, r3, #2
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	e7e2      	b.n	8008318 <__smakebuf_r+0xc>
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	6020      	str	r0, [r4, #0]
 8008356:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800835a:	81a3      	strh	r3, [r4, #12]
 800835c:	9b01      	ldr	r3, [sp, #4]
 800835e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008362:	b15b      	cbz	r3, 800837c <__smakebuf_r+0x70>
 8008364:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008368:	4630      	mov	r0, r6
 800836a:	f000 f81d 	bl	80083a8 <_isatty_r>
 800836e:	b128      	cbz	r0, 800837c <__smakebuf_r+0x70>
 8008370:	89a3      	ldrh	r3, [r4, #12]
 8008372:	f023 0303 	bic.w	r3, r3, #3
 8008376:	f043 0301 	orr.w	r3, r3, #1
 800837a:	81a3      	strh	r3, [r4, #12]
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	431d      	orrs	r5, r3
 8008380:	81a5      	strh	r5, [r4, #12]
 8008382:	e7cf      	b.n	8008324 <__smakebuf_r+0x18>

08008384 <_fstat_r>:
 8008384:	b538      	push	{r3, r4, r5, lr}
 8008386:	4d07      	ldr	r5, [pc, #28]	@ (80083a4 <_fstat_r+0x20>)
 8008388:	2300      	movs	r3, #0
 800838a:	4604      	mov	r4, r0
 800838c:	4608      	mov	r0, r1
 800838e:	4611      	mov	r1, r2
 8008390:	602b      	str	r3, [r5, #0]
 8008392:	f7f8 ff6c 	bl	800126e <_fstat>
 8008396:	1c43      	adds	r3, r0, #1
 8008398:	d102      	bne.n	80083a0 <_fstat_r+0x1c>
 800839a:	682b      	ldr	r3, [r5, #0]
 800839c:	b103      	cbz	r3, 80083a0 <_fstat_r+0x1c>
 800839e:	6023      	str	r3, [r4, #0]
 80083a0:	bd38      	pop	{r3, r4, r5, pc}
 80083a2:	bf00      	nop
 80083a4:	2000063c 	.word	0x2000063c

080083a8 <_isatty_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	@ (80083c4 <_isatty_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7f8 ff6b 	bl	800128e <_isatty>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_isatty_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_isatty_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	2000063c 	.word	0x2000063c

080083c8 <_sbrk_r>:
 80083c8:	b538      	push	{r3, r4, r5, lr}
 80083ca:	4d06      	ldr	r5, [pc, #24]	@ (80083e4 <_sbrk_r+0x1c>)
 80083cc:	2300      	movs	r3, #0
 80083ce:	4604      	mov	r4, r0
 80083d0:	4608      	mov	r0, r1
 80083d2:	602b      	str	r3, [r5, #0]
 80083d4:	f7f8 ff74 	bl	80012c0 <_sbrk>
 80083d8:	1c43      	adds	r3, r0, #1
 80083da:	d102      	bne.n	80083e2 <_sbrk_r+0x1a>
 80083dc:	682b      	ldr	r3, [r5, #0]
 80083de:	b103      	cbz	r3, 80083e2 <_sbrk_r+0x1a>
 80083e0:	6023      	str	r3, [r4, #0]
 80083e2:	bd38      	pop	{r3, r4, r5, pc}
 80083e4:	2000063c 	.word	0x2000063c

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
