
TP_microC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f8  08007cc0  08007cc0  00008cc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007db8  08007db8  00009068  2**0
                  CONTENTS
  4 .ARM          00000008  08007db8  08007db8  00008db8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007dc0  08007dc0  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007dc0  08007dc0  00008dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007dc4  08007dc4  00008dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007dc8  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000068  08007e30  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08007e30  000094b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e5e  00000000  00000000  00009098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b5f  00000000  00000000  0001cef6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001188  00000000  00000000  0001fa58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000da7  00000000  00000000  00020be0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00010d00  00000000  00000000  00021987  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0000513b  00000000  00000000  00032687  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000043  00000000  00000000  000377c2  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000050c4  00000000  00000000  00037808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000050  00000000  00000000  0003c8cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007ca8 	.word	0x08007ca8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08007ca8 	.word	0x08007ca8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <MCP23S17_WriteRegister>:

// Déclaration externe du SPI
extern SPI_HandleTypeDef hspi3;

// --- Fonction interne ---
static void MCP23S17_WriteRegister(uint8_t reg, uint8_t value) {
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	4603      	mov	r3, r0
 8000568:	460a      	mov	r2, r1
 800056a:	71fb      	strb	r3, [r7, #7]
 800056c:	4613      	mov	r3, r2
 800056e:	71bb      	strb	r3, [r7, #6]
	// Adresse + bit d'écriture
	uint8_t data[3];
    data[0] = MCP23S17_ADDRESS;
 8000570:	2340      	movs	r3, #64	@ 0x40
 8000572:	733b      	strb	r3, [r7, #12]
    data[1] = reg;
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	737b      	strb	r3, [r7, #13]
    data[2] = value;
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET); // CS LOW
 800057c:	2200      	movs	r2, #0
 800057e:	2180      	movs	r1, #128	@ 0x80
 8000580:	4809      	ldr	r0, [pc, #36]	@ (80005a8 <MCP23S17_WriteRegister+0x48>)
 8000582:	f001 fbbb 	bl	8001cfc <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi3, data, 3, HAL_MAX_DELAY);
 8000586:	f107 010c 	add.w	r1, r7, #12
 800058a:	f04f 33ff 	mov.w	r3, #4294967295
 800058e:	2203      	movs	r2, #3
 8000590:	4806      	ldr	r0, [pc, #24]	@ (80005ac <MCP23S17_WriteRegister+0x4c>)
 8000592:	f005 f805 	bl	80055a0 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);   // CS HIGH
 8000596:	2201      	movs	r2, #1
 8000598:	2180      	movs	r1, #128	@ 0x80
 800059a:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <MCP23S17_WriteRegister+0x48>)
 800059c:	f001 fbae 	bl	8001cfc <HAL_GPIO_WritePin>
}
 80005a0:	bf00      	nop
 80005a2:	3710      	adds	r7, #16
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	48000400 	.word	0x48000400
 80005ac:	20000270 	.word	0x20000270

080005b0 <LED_Driver_Init>:

// --- Fonctions publiques ---

void LED_Driver_Init(void) {
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    // RESET via GPIO
    HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin, GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2101      	movs	r1, #1
 80005b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005bc:	f001 fb9e 	bl	8001cfc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005c0:	200a      	movs	r0, #10
 80005c2:	f000 fed5 	bl	8001370 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2101      	movs	r1, #1
 80005ca:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80005ce:	f001 fb95 	bl	8001cfc <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80005d2:	200a      	movs	r0, #10
 80005d4:	f000 fecc 	bl	8001370 <HAL_Delay>

    // Init MCP23S17
    MCP23S17_WriteRegister(MCP23S17_IOCON, 0x08);  // Mode SPI hardware
 80005d8:	2108      	movs	r1, #8
 80005da:	200a      	movs	r0, #10
 80005dc:	f7ff ffc0 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRA, 0x00); // PORTA en sortie
 80005e0:	2100      	movs	r1, #0
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffbc 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_IODIRB, 0x00); // PORTB en sortie
 80005e8:	2100      	movs	r1, #0
 80005ea:	2001      	movs	r0, #1
 80005ec:	f7ff ffb8 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_GPIOA, 0xFF);  // Éteindre LEDs
 80005f0:	21ff      	movs	r1, #255	@ 0xff
 80005f2:	2012      	movs	r0, #18
 80005f4:	f7ff ffb4 	bl	8000560 <MCP23S17_WriteRegister>
    MCP23S17_WriteRegister(MCP23S17_GPIOB, 0xFF);
 80005f8:	21ff      	movs	r1, #255	@ 0xff
 80005fa:	2013      	movs	r0, #19
 80005fc:	f7ff ffb0 	bl	8000560 <MCP23S17_WriteRegister>
}
 8000600:	bf00      	nop
 8000602:	bd80      	pop	{r7, pc}

08000604 <Chenillard>:
        LED_SetGPIOB(gpioB);
    }
}


void Chenillard(void){
 8000604:	b580      	push	{r7, lr}
 8000606:	b082      	sub	sp, #8
 8000608:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < 16; i++) {
 800060a:	2300      	movs	r3, #0
 800060c:	71fb      	strb	r3, [r7, #7]
 800060e:	e01c      	b.n	800064a <Chenillard+0x46>
		if (i < 8) {
 8000610:	79fb      	ldrb	r3, [r7, #7]
 8000612:	2b07      	cmp	r3, #7
 8000614:	d809      	bhi.n	800062a <Chenillard+0x26>
			// Allumer une LED sur PORTA (GPA0 à GPA7)
			MCP23S17_WriteRegister(MCP23S17_GPIOA, (1 << i)); // Allumer une LED sur PORTA
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2201      	movs	r2, #1
 800061a:	fa02 f303 	lsl.w	r3, r2, r3
 800061e:	b2db      	uxtb	r3, r3
 8000620:	4619      	mov	r1, r3
 8000622:	2012      	movs	r0, #18
 8000624:	f7ff ff9c 	bl	8000560 <MCP23S17_WriteRegister>
 8000628:	e009      	b.n	800063e <Chenillard+0x3a>

		} else {
			// Allumer une LED sur PORTB (GPB0 à GPB7)
			MCP23S17_WriteRegister(MCP23S17_GPIOB, (1 << (i - 8))); // Allumer une LED sur PORTB
 800062a:	79fb      	ldrb	r3, [r7, #7]
 800062c:	3b08      	subs	r3, #8
 800062e:	2201      	movs	r2, #1
 8000630:	fa02 f303 	lsl.w	r3, r2, r3
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	2013      	movs	r0, #19
 800063a:	f7ff ff91 	bl	8000560 <MCP23S17_WriteRegister>
		}
		HAL_Delay(200); // Pause pour l'effet chenillard
 800063e:	20c8      	movs	r0, #200	@ 0xc8
 8000640:	f000 fe96 	bl	8001370 <HAL_Delay>
	for (uint8_t i = 0; i < 16; i++) {
 8000644:	79fb      	ldrb	r3, [r7, #7]
 8000646:	3301      	adds	r3, #1
 8000648:	71fb      	strb	r3, [r7, #7]
 800064a:	79fb      	ldrb	r3, [r7, #7]
 800064c:	2b0f      	cmp	r3, #15
 800064e:	d9df      	bls.n	8000610 <Chenillard+0xc>
	}
}
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
	...

0800065c <__io_putchar>:

/* Private user code ---------------------------------------------------------*/


int __io_putchar(int chr) // redirection de fprint de flux sortant stdout vers usart
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)&chr, 1, HAL_MAX_DELAY);
 8000664:	1d39      	adds	r1, r7, #4
 8000666:	f04f 33ff 	mov.w	r3, #4294967295
 800066a:	2201      	movs	r2, #1
 800066c:	4803      	ldr	r0, [pc, #12]	@ (800067c <__io_putchar+0x20>)
 800066e:	f005 fabf 	bl	8005bf0 <HAL_UART_Transmit>
	return chr;
 8000672:	687b      	ldr	r3, [r7, #4]
}
 8000674:	4618      	mov	r0, r3
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	200002d4 	.word	0x200002d4

08000680 <Read_Chip_ID>:

extern I2C_HandleTypeDef hi2c2; // Assurez-vous que votre handle I2C est défini

uint8_t chip_id[2]; // Tableau pour stocker la valeur lue

HAL_StatusTypeDef Read_Chip_ID(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af04      	add	r7, sp, #16
	HAL_StatusTypeDef status;

	// Lecture de 2 octets depuis le registre CHIP_ID
	status = HAL_I2C_Mem_Read(&hi2c2, (I2C_ADDR_CODEC), REG_CHIP_ID, I2C_MEMADD_SIZE_16BIT, chip_id, 2, HAL_MAX_DELAY);
 8000686:	f04f 33ff 	mov.w	r3, #4294967295
 800068a:	9302      	str	r3, [sp, #8]
 800068c:	2302      	movs	r3, #2
 800068e:	9301      	str	r3, [sp, #4]
 8000690:	4b07      	ldr	r3, [pc, #28]	@ (80006b0 <Read_Chip_ID+0x30>)
 8000692:	9300      	str	r3, [sp, #0]
 8000694:	2302      	movs	r3, #2
 8000696:	2200      	movs	r2, #0
 8000698:	2114      	movs	r1, #20
 800069a:	4806      	ldr	r0, [pc, #24]	@ (80006b4 <Read_Chip_ID+0x34>)
 800069c:	f001 fbe2 	bl	8001e64 <HAL_I2C_Mem_Read>
 80006a0:	4603      	mov	r3, r0
 80006a2:	71fb      	strb	r3, [r7, #7]

	return status;
 80006a4:	79fb      	ldrb	r3, [r7, #7]
}
 80006a6:	4618      	mov	r0, r3
 80006a8:	3708      	adds	r7, #8
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}
 80006ae:	bf00      	nop
 80006b0:	2000035c 	.word	0x2000035c
 80006b4:	20000084 	.word	0x20000084

080006b8 <main>:



int main(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80006bc:	f000 fddc 	bl	8001278 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80006c0:	f000 f840 	bl	8000744 <SystemClock_Config>

	/* Configure the peripherals common clocks */
	PeriphCommonClock_Config();
 80006c4:	f000 f88f 	bl	80007e6 <PeriphCommonClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80006c8:	f000 f9ec 	bl	8000aa4 <MX_GPIO_Init>
	MX_DMA_Init();
 80006cc:	f000 f9c4 	bl	8000a58 <MX_DMA_Init>
	MX_USART2_UART_Init();
 80006d0:	f000 f992 	bl	80009f8 <MX_USART2_UART_Init>
	MX_SPI3_Init();
 80006d4:	f000 f952 	bl	800097c <MX_SPI3_Init>
	MX_I2C2_Init();
 80006d8:	f000 f8b0 	bl	800083c <MX_I2C2_Init>
	MX_SAI2_Init();
 80006dc:	f000 f8ee 	bl	80008bc <MX_SAI2_Init>
	/* USER CODE BEGIN 2 */
	/* USER CODE BEGIN 1 */

	__HAL_SAI_ENABLE(&hsai_BlockA2);
 80006e0:	4b12      	ldr	r3, [pc, #72]	@ (800072c <main+0x74>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	4b11      	ldr	r3, [pc, #68]	@ (800072c <main+0x74>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80006ee:	601a      	str	r2, [r3, #0]

	LED_Driver_Init();
 80006f0:	f7ff ff5e 	bl	80005b0 <LED_Driver_Init>

	//Test printf avec usart
	printf("\r\n==== Systeme microcontroleur ====\r\n");
 80006f4:	480e      	ldr	r0, [pc, #56]	@ (8000730 <main+0x78>)
 80006f6:	f006 fc73 	bl	8006fe0 <puts>
	printf("Bonjour via USART!\n"); // Envoi d'un message via l'USART
 80006fa:	480e      	ldr	r0, [pc, #56]	@ (8000734 <main+0x7c>)
 80006fc:	f006 fc70 	bl	8006fe0 <puts>


	/* USER CODE END 2 */

	if(Read_Chip_ID() == HAL_OK){
 8000700:	f7ff ffbe 	bl	8000680 <Read_Chip_ID>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d109      	bne.n	800071e <main+0x66>
		printf("CHIP_ID: 0x%02X%02X\n", chip_id[0], chip_id[1]);
 800070a:	4b0b      	ldr	r3, [pc, #44]	@ (8000738 <main+0x80>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	4619      	mov	r1, r3
 8000710:	4b09      	ldr	r3, [pc, #36]	@ (8000738 <main+0x80>)
 8000712:	785b      	ldrb	r3, [r3, #1]
 8000714:	461a      	mov	r2, r3
 8000716:	4809      	ldr	r0, [pc, #36]	@ (800073c <main+0x84>)
 8000718:	f006 fbfa 	bl	8006f10 <iprintf>
 800071c:	e002      	b.n	8000724 <main+0x6c>
	} else {
		printf("Erreur lors de la lecture du CHIP_ID\n");
 800071e:	4808      	ldr	r0, [pc, #32]	@ (8000740 <main+0x88>)
 8000720:	f006 fc5e 	bl	8006fe0 <puts>
	{
		 //CHIP_ID: 0xA011
		/* USER CODE END WHILE */

		// test chennilard depuis driver_led
		Chenillard();
 8000724:	f7ff ff6e 	bl	8000604 <Chenillard>
	{
 8000728:	bf00      	nop
 800072a:	e7fb      	b.n	8000724 <main+0x6c>
 800072c:	200000d8 	.word	0x200000d8
 8000730:	08007cc0 	.word	0x08007cc0
 8000734:	08007ce8 	.word	0x08007ce8
 8000738:	2000035c 	.word	0x2000035c
 800073c:	08007cfc 	.word	0x08007cfc
 8000740:	08007d14 	.word	0x08007d14

08000744 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b096      	sub	sp, #88	@ 0x58
 8000748:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800074a:	f107 0314 	add.w	r3, r7, #20
 800074e:	2244      	movs	r2, #68	@ 0x44
 8000750:	2100      	movs	r1, #0
 8000752:	4618      	mov	r0, r3
 8000754:	f006 fd24 	bl	80071a0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000758:	463b      	mov	r3, r7
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
 8000764:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000766:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800076a:	f001 ffa9 	bl	80026c0 <HAL_PWREx_ControlVoltageScaling>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <SystemClock_Config+0x34>
	{
		Error_Handler();
 8000774:	f000 fa12 	bl	8000b9c <Error_Handler>
	}

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000778:	2302      	movs	r3, #2
 800077a:	617b      	str	r3, [r7, #20]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800077c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000780:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000782:	2310      	movs	r3, #16
 8000784:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000786:	2302      	movs	r3, #2
 8000788:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800078a:	2302      	movs	r3, #2
 800078c:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800078e:	2301      	movs	r3, #1
 8000790:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLN = 10;
 8000792:	230a      	movs	r3, #10
 8000794:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000796:	2307      	movs	r3, #7
 8000798:	64fb      	str	r3, [r7, #76]	@ 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800079a:	2302      	movs	r3, #2
 800079c:	653b      	str	r3, [r7, #80]	@ 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800079e:	2302      	movs	r3, #2
 80007a0:	657b      	str	r3, [r7, #84]	@ 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a2:	f107 0314 	add.w	r3, r7, #20
 80007a6:	4618      	mov	r0, r3
 80007a8:	f001 ffe0 	bl	800276c <HAL_RCC_OscConfig>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <SystemClock_Config+0x72>
	{
		Error_Handler();
 80007b2:	f000 f9f3 	bl	8000b9c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007b6:	230f      	movs	r3, #15
 80007b8:	603b      	str	r3, [r7, #0]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007ba:	2303      	movs	r3, #3
 80007bc:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007be:	2300      	movs	r3, #0
 80007c0:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2104      	movs	r1, #4
 80007ce:	4618      	mov	r0, r3
 80007d0:	f002 fba8 	bl	8002f24 <HAL_RCC_ClockConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <SystemClock_Config+0x9a>
	{
		Error_Handler();
 80007da:	f000 f9df 	bl	8000b9c <Error_Handler>
	}
}
 80007de:	bf00      	nop
 80007e0:	3758      	adds	r7, #88	@ 0x58
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b0a2      	sub	sp, #136	@ 0x88
 80007ea:	af00      	add	r7, sp, #0
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007ec:	463b      	mov	r3, r7
 80007ee:	2288      	movs	r2, #136	@ 0x88
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f006 fcd4 	bl	80071a0 <memset>

	/** Initializes the peripherals clock
	 */
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI2;
 80007f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007fc:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Sai2ClockSelection = RCC_SAI2CLKSOURCE_PLLSAI1;
 80007fe:	2300      	movs	r3, #0
 8000800:	66bb      	str	r3, [r7, #104]	@ 0x68
	PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_HSI;
 8000802:	2302      	movs	r3, #2
 8000804:	607b      	str	r3, [r7, #4]
	PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000806:	2301      	movs	r3, #1
 8000808:	60bb      	str	r3, [r7, #8]
	PeriphClkInit.PLLSAI1.PLLSAI1N = 13;
 800080a:	230d      	movs	r3, #13
 800080c:	60fb      	str	r3, [r7, #12]
	PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 800080e:	2311      	movs	r3, #17
 8000810:	613b      	str	r3, [r7, #16]
	PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8000812:	2302      	movs	r3, #2
 8000814:	617b      	str	r3, [r7, #20]
	PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8000816:	2302      	movs	r3, #2
 8000818:	61bb      	str	r3, [r7, #24]
	PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK;
 800081a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800081e:	61fb      	str	r3, [r7, #28]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000820:	463b      	mov	r3, r7
 8000822:	4618      	mov	r0, r3
 8000824:	f002 fda2 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <PeriphCommonClock_Config+0x4c>
	{
		Error_Handler();
 800082e:	f000 f9b5 	bl	8000b9c <Error_Handler>
	}
}
 8000832:	bf00      	nop
 8000834:	3788      	adds	r7, #136	@ 0x88
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <MX_I2C2_Init>:
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8000840:	4b1b      	ldr	r3, [pc, #108]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000842:	4a1c      	ldr	r2, [pc, #112]	@ (80008b4 <MX_I2C2_Init+0x78>)
 8000844:	601a      	str	r2, [r3, #0]
	hi2c2.Init.Timing = 0x10D19CE4;
 8000846:	4b1a      	ldr	r3, [pc, #104]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000848:	4a1b      	ldr	r2, [pc, #108]	@ (80008b8 <MX_I2C2_Init+0x7c>)
 800084a:	605a      	str	r2, [r3, #4]
	hi2c2.Init.OwnAddress1 = 0;
 800084c:	4b18      	ldr	r3, [pc, #96]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000852:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000854:	2201      	movs	r2, #1
 8000856:	60da      	str	r2, [r3, #12]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000858:	4b15      	ldr	r3, [pc, #84]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800085a:	2200      	movs	r2, #0
 800085c:	611a      	str	r2, [r3, #16]
	hi2c2.Init.OwnAddress2 = 0;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000866:	2200      	movs	r2, #0
 8000868:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800086c:	2200      	movs	r2, #0
 800086e:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000872:	2200      	movs	r2, #0
 8000874:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000876:	480e      	ldr	r0, [pc, #56]	@ (80008b0 <MX_I2C2_Init+0x74>)
 8000878:	f001 fa58 	bl	8001d2c <HAL_I2C_Init>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_I2C2_Init+0x4a>
	{
		Error_Handler();
 8000882:	f000 f98b 	bl	8000b9c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000886:	2100      	movs	r1, #0
 8000888:	4809      	ldr	r0, [pc, #36]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800088a:	f001 fe73 	bl	8002574 <HAL_I2CEx_ConfigAnalogFilter>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <MX_I2C2_Init+0x5c>
	{
		Error_Handler();
 8000894:	f000 f982 	bl	8000b9c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000898:	2100      	movs	r1, #0
 800089a:	4805      	ldr	r0, [pc, #20]	@ (80008b0 <MX_I2C2_Init+0x74>)
 800089c:	f001 feb5 	bl	800260a <HAL_I2CEx_ConfigDigitalFilter>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_I2C2_Init+0x6e>
	{
		Error_Handler();
 80008a6:	f000 f979 	bl	8000b9c <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	20000084 	.word	0x20000084
 80008b4:	40005800 	.word	0x40005800
 80008b8:	10d19ce4 	.word	0x10d19ce4

080008bc <MX_SAI2_Init>:
 * @brief SAI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SAI2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
	/* USER CODE END SAI2_Init 0 */

	/* USER CODE BEGIN SAI2_Init 1 */

	/* USER CODE END SAI2_Init 1 */
	hsai_BlockA2.Instance = SAI2_Block_A;
 80008c0:	4b2a      	ldr	r3, [pc, #168]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008c2:	4a2b      	ldr	r2, [pc, #172]	@ (8000970 <MX_SAI2_Init+0xb4>)
 80008c4:	601a      	str	r2, [r3, #0]
	hsai_BlockA2.Init.AudioMode = SAI_MODEMASTER_TX;
 80008c6:	4b29      	ldr	r3, [pc, #164]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
	hsai_BlockA2.Init.Synchro = SAI_ASYNCHRONOUS;
 80008cc:	4b27      	ldr	r3, [pc, #156]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
	hsai_BlockA2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008d2:	4b26      	ldr	r3, [pc, #152]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
	hsai_BlockA2.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 80008d8:	4b24      	ldr	r3, [pc, #144]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
	hsai_BlockA2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008de:	4b23      	ldr	r3, [pc, #140]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	619a      	str	r2, [r3, #24]
	hsai_BlockA2.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 80008e4:	4b21      	ldr	r3, [pc, #132]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008e6:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 80008ea:	61da      	str	r2, [r3, #28]
	hsai_BlockA2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008ec:	4b1f      	ldr	r3, [pc, #124]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]
	hsai_BlockA2.Init.MonoStereoMode = SAI_STEREOMODE;
 80008f2:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockA2.Init.CompandingMode = SAI_NOCOMPANDING;
 80008f8:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <MX_SAI2_Init+0xb0>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockA2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80008fe:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_SAI2_Init+0xb0>)
 8000900:	2200      	movs	r2, #0
 8000902:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockA2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000904:	2302      	movs	r3, #2
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	4818      	ldr	r0, [pc, #96]	@ (800096c <MX_SAI2_Init+0xb0>)
 800090c:	f004 f848 	bl	80049a0 <HAL_SAI_InitProtocol>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_SAI2_Init+0x5e>
	{
		Error_Handler();
 8000916:	f000 f941 	bl	8000b9c <Error_Handler>
	}
	hsai_BlockB2.Instance = SAI2_Block_B;
 800091a:	4b16      	ldr	r3, [pc, #88]	@ (8000974 <MX_SAI2_Init+0xb8>)
 800091c:	4a16      	ldr	r2, [pc, #88]	@ (8000978 <MX_SAI2_Init+0xbc>)
 800091e:	601a      	str	r2, [r3, #0]
	hsai_BlockB2.Init.AudioMode = SAI_MODESLAVE_RX;
 8000920:	4b14      	ldr	r3, [pc, #80]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000922:	2203      	movs	r2, #3
 8000924:	605a      	str	r2, [r3, #4]
	hsai_BlockB2.Init.Synchro = SAI_SYNCHRONOUS;
 8000926:	4b13      	ldr	r3, [pc, #76]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000928:	2201      	movs	r2, #1
 800092a:	609a      	str	r2, [r3, #8]
	hsai_BlockB2.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800092c:	4b11      	ldr	r3, [pc, #68]	@ (8000974 <MX_SAI2_Init+0xb8>)
 800092e:	2200      	movs	r2, #0
 8000930:	611a      	str	r2, [r3, #16]
	hsai_BlockB2.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 8000932:	4b10      	ldr	r3, [pc, #64]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000934:	2200      	movs	r2, #0
 8000936:	619a      	str	r2, [r3, #24]
	hsai_BlockB2.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8000938:	4b0e      	ldr	r3, [pc, #56]	@ (8000974 <MX_SAI2_Init+0xb8>)
 800093a:	2200      	movs	r2, #0
 800093c:	60da      	str	r2, [r3, #12]
	hsai_BlockB2.Init.MonoStereoMode = SAI_STEREOMODE;
 800093e:	4b0d      	ldr	r3, [pc, #52]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000940:	2200      	movs	r2, #0
 8000942:	625a      	str	r2, [r3, #36]	@ 0x24
	hsai_BlockB2.Init.CompandingMode = SAI_NOCOMPANDING;
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000946:	2200      	movs	r2, #0
 8000948:	629a      	str	r2, [r3, #40]	@ 0x28
	hsai_BlockB2.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800094a:	4b0a      	ldr	r3, [pc, #40]	@ (8000974 <MX_SAI2_Init+0xb8>)
 800094c:	2200      	movs	r2, #0
 800094e:	62da      	str	r2, [r3, #44]	@ 0x2c
	if (HAL_SAI_InitProtocol(&hsai_BlockB2, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 8000950:	2302      	movs	r3, #2
 8000952:	2200      	movs	r2, #0
 8000954:	2100      	movs	r1, #0
 8000956:	4807      	ldr	r0, [pc, #28]	@ (8000974 <MX_SAI2_Init+0xb8>)
 8000958:	f004 f822 	bl	80049a0 <HAL_SAI_InitProtocol>
 800095c:	4603      	mov	r3, r0
 800095e:	2b00      	cmp	r3, #0
 8000960:	d001      	beq.n	8000966 <MX_SAI2_Init+0xaa>
	{
		Error_Handler();
 8000962:	f000 f91b 	bl	8000b9c <Error_Handler>
	}
	/* USER CODE BEGIN SAI2_Init 2 */

	/* USER CODE END SAI2_Init 2 */

}
 8000966:	bf00      	nop
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	200000d8 	.word	0x200000d8
 8000970:	40015804 	.word	0x40015804
 8000974:	2000015c 	.word	0x2000015c
 8000978:	40015824 	.word	0x40015824

0800097c <MX_SPI3_Init>:
 * @brief SPI3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI3_Init(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI3_Init 1 */

	/* USER CODE END SPI3_Init 1 */
	/* SPI3 parameter configuration*/
	hspi3.Instance = SPI3;
 8000980:	4b1b      	ldr	r3, [pc, #108]	@ (80009f0 <MX_SPI3_Init+0x74>)
 8000982:	4a1c      	ldr	r2, [pc, #112]	@ (80009f4 <MX_SPI3_Init+0x78>)
 8000984:	601a      	str	r2, [r3, #0]
	hspi3.Init.Mode = SPI_MODE_MASTER;
 8000986:	4b1a      	ldr	r3, [pc, #104]	@ (80009f0 <MX_SPI3_Init+0x74>)
 8000988:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800098c:	605a      	str	r2, [r3, #4]
	hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800098e:	4b18      	ldr	r3, [pc, #96]	@ (80009f0 <MX_SPI3_Init+0x74>)
 8000990:	2200      	movs	r2, #0
 8000992:	609a      	str	r2, [r3, #8]
	hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000994:	4b16      	ldr	r3, [pc, #88]	@ (80009f0 <MX_SPI3_Init+0x74>)
 8000996:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800099a:	60da      	str	r2, [r3, #12]
	hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800099c:	4b14      	ldr	r3, [pc, #80]	@ (80009f0 <MX_SPI3_Init+0x74>)
 800099e:	2200      	movs	r2, #0
 80009a0:	611a      	str	r2, [r3, #16]
	hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009a2:	4b13      	ldr	r3, [pc, #76]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	615a      	str	r2, [r3, #20]
	hspi3.Init.NSS = SPI_NSS_SOFT;
 80009a8:	4b11      	ldr	r3, [pc, #68]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80009ae:	619a      	str	r2, [r3, #24]
	hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	61da      	str	r2, [r3, #28]
	hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	621a      	str	r2, [r3, #32]
	hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009be:	2200      	movs	r2, #0
 80009c0:	625a      	str	r2, [r3, #36]	@ 0x24
	hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009c2:	4b0b      	ldr	r3, [pc, #44]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	629a      	str	r2, [r3, #40]	@ 0x28
	hspi3.Init.CRCPolynomial = 7;
 80009c8:	4b09      	ldr	r3, [pc, #36]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009ca:	2207      	movs	r2, #7
 80009cc:	62da      	str	r2, [r3, #44]	@ 0x2c
	hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009ce:	4b08      	ldr	r3, [pc, #32]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	631a      	str	r2, [r3, #48]	@ 0x30
	hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009d4:	4b06      	ldr	r3, [pc, #24]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009d6:	2208      	movs	r2, #8
 80009d8:	635a      	str	r2, [r3, #52]	@ 0x34
	if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80009da:	4805      	ldr	r0, [pc, #20]	@ (80009f0 <MX_SPI3_Init+0x74>)
 80009dc:	f004 fd3d 	bl	800545a <HAL_SPI_Init>
 80009e0:	4603      	mov	r3, r0
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d001      	beq.n	80009ea <MX_SPI3_Init+0x6e>
	{
		Error_Handler();
 80009e6:	f000 f8d9 	bl	8000b9c <Error_Handler>
	}
	/* USER CODE BEGIN SPI3_Init 2 */

	/* USER CODE END SPI3_Init 2 */

}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000270 	.word	0x20000270
 80009f4:	40003c00 	.word	0x40003c00

080009f8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80009fc:	4b14      	ldr	r3, [pc, #80]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 80009fe:	4a15      	ldr	r2, [pc, #84]	@ (8000a54 <MX_USART2_UART_Init+0x5c>)
 8000a00:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000a02:	4b13      	ldr	r3, [pc, #76]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a08:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a1e:	220c      	movs	r2, #12
 8000a20:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a22:	4b0b      	ldr	r3, [pc, #44]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a28:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a2e:	4b08      	ldr	r3, [pc, #32]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a34:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	625a      	str	r2, [r3, #36]	@ 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a3a:	4805      	ldr	r0, [pc, #20]	@ (8000a50 <MX_USART2_UART_Init+0x58>)
 8000a3c:	f005 f88a 	bl	8005b54 <HAL_UART_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 8000a46:	f000 f8a9 	bl	8000b9c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000a4a:	bf00      	nop
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	200002d4 	.word	0x200002d4
 8000a54:	40004400 	.word	0x40004400

08000a58 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8000a5e:	4b10      	ldr	r3, [pc, #64]	@ (8000aa0 <MX_DMA_Init+0x48>)
 8000a60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a62:	4a0f      	ldr	r2, [pc, #60]	@ (8000aa0 <MX_DMA_Init+0x48>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6493      	str	r3, [r2, #72]	@ 0x48
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <MX_DMA_Init+0x48>)
 8000a6c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2100      	movs	r1, #0
 8000a7a:	2010      	movs	r0, #16
 8000a7c:	f000 fd77 	bl	800156e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000a80:	2010      	movs	r0, #16
 8000a82:	f000 fd90 	bl	80015a6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel7_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2011      	movs	r0, #17
 8000a8c:	f000 fd6f 	bl	800156e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000a90:	2011      	movs	r0, #17
 8000a92:	f000 fd88 	bl	80015a6 <HAL_NVIC_EnableIRQ>

}
 8000a96:	bf00      	nop
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	40021000 	.word	0x40021000

08000aa4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08a      	sub	sp, #40	@ 0x28
 8000aa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000aba:	4b35      	ldr	r3, [pc, #212]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000abc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000abe:	4a34      	ldr	r2, [pc, #208]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000ac0:	f043 0304 	orr.w	r3, r3, #4
 8000ac4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ac6:	4b32      	ldr	r3, [pc, #200]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aca:	f003 0304 	and.w	r3, r3, #4
 8000ace:	613b      	str	r3, [r7, #16]
 8000ad0:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8000ad2:	4b2f      	ldr	r3, [pc, #188]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000ad4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ad6:	4a2e      	ldr	r2, [pc, #184]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000ad8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000adc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000ade:	4b2c      	ldr	r3, [pc, #176]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000ae0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000aea:	4b29      	ldr	r3, [pc, #164]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000aec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000aee:	4a28      	ldr	r2, [pc, #160]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000af0:	f043 0301 	orr.w	r3, r3, #1
 8000af4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000af6:	4b26      	ldr	r3, [pc, #152]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000af8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000afa:	f003 0301 	and.w	r3, r3, #1
 8000afe:	60bb      	str	r3, [r7, #8]
 8000b00:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000b02:	4b23      	ldr	r3, [pc, #140]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000b04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b06:	4a22      	ldr	r2, [pc, #136]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000b08:	f043 0302 	orr.w	r3, r3, #2
 8000b0c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b0e:	4b20      	ldr	r3, [pc, #128]	@ (8000b90 <MX_GPIO_Init+0xec>)
 8000b10:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b12:	f003 0302 	and.w	r3, r3, #2
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, VU_nReset_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2121      	movs	r1, #33	@ 0x21
 8000b1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b22:	f001 f8eb 	bl	8001cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(SPI3_nCS_GPIO_Port, SPI3_nCS_Pin, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	2180      	movs	r1, #128	@ 0x80
 8000b2a:	481a      	ldr	r0, [pc, #104]	@ (8000b94 <MX_GPIO_Init+0xf0>)
 8000b2c:	f001 f8e6 	bl	8001cfc <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000b30:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000b34:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000b36:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000b3a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	4814      	ldr	r0, [pc, #80]	@ (8000b98 <MX_GPIO_Init+0xf4>)
 8000b48:	f000 ff2e 	bl	80019a8 <HAL_GPIO_Init>

	/*Configure GPIO pins : VU_nReset_Pin LD2_Pin */
	GPIO_InitStruct.Pin = VU_nReset_Pin|LD2_Pin;
 8000b4c:	2321      	movs	r3, #33	@ 0x21
 8000b4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b50:	2301      	movs	r3, #1
 8000b52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b54:	2300      	movs	r3, #0
 8000b56:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4619      	mov	r1, r3
 8000b62:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b66:	f000 ff1f 	bl	80019a8 <HAL_GPIO_Init>

	/*Configure GPIO pin : SPI3_nCS_Pin */
	GPIO_InitStruct.Pin = SPI3_nCS_Pin;
 8000b6a:	2380      	movs	r3, #128	@ 0x80
 8000b6c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6e:	2301      	movs	r3, #1
 8000b70:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b76:	2300      	movs	r3, #0
 8000b78:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SPI3_nCS_GPIO_Port, &GPIO_InitStruct);
 8000b7a:	f107 0314 	add.w	r3, r7, #20
 8000b7e:	4619      	mov	r1, r3
 8000b80:	4804      	ldr	r0, [pc, #16]	@ (8000b94 <MX_GPIO_Init+0xf0>)
 8000b82:	f000 ff11 	bl	80019a8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	@ 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40021000 	.word	0x40021000
 8000b94:	48000400 	.word	0x48000400
 8000b98:	48000800 	.word	0x48000800

08000b9c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba0:	b672      	cpsid	i
}
 8000ba2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <Error_Handler+0x8>

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	b083      	sub	sp, #12
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b0f      	ldr	r3, [pc, #60]	@ (8000bec <HAL_MspInit+0x44>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bb2:	4a0e      	ldr	r2, [pc, #56]	@ (8000bec <HAL_MspInit+0x44>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	@ 0x60
 8000bba:	4b0c      	ldr	r3, [pc, #48]	@ (8000bec <HAL_MspInit+0x44>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b09      	ldr	r3, [pc, #36]	@ (8000bec <HAL_MspInit+0x44>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bca:	4a08      	ldr	r2, [pc, #32]	@ (8000bec <HAL_MspInit+0x44>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000bd2:	4b06      	ldr	r3, [pc, #24]	@ (8000bec <HAL_MspInit+0x44>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	370c      	adds	r7, #12
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000

08000bf0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0ac      	sub	sp, #176	@ 0xb0
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	601a      	str	r2, [r3, #0]
 8000c00:	605a      	str	r2, [r3, #4]
 8000c02:	609a      	str	r2, [r3, #8]
 8000c04:	60da      	str	r2, [r3, #12]
 8000c06:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c08:	f107 0314 	add.w	r3, r7, #20
 8000c0c:	2288      	movs	r2, #136	@ 0x88
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4618      	mov	r0, r3
 8000c12:	f006 fac5 	bl	80071a0 <memset>
  if(hi2c->Instance==I2C2)
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a21      	ldr	r2, [pc, #132]	@ (8000ca0 <HAL_I2C_MspInit+0xb0>)
 8000c1c:	4293      	cmp	r3, r2
 8000c1e:	d13b      	bne.n	8000c98 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000c20:	2380      	movs	r3, #128	@ 0x80
 8000c22:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c28:	f107 0314 	add.w	r3, r7, #20
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f002 fb9d 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000c32:	4603      	mov	r3, r0
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d001      	beq.n	8000c3c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c38:	f7ff ffb0 	bl	8000b9c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c3c:	4b19      	ldr	r3, [pc, #100]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c40:	4a18      	ldr	r2, [pc, #96]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c42:	f043 0302 	orr.w	r3, r3, #2
 8000c46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c48:	4b16      	ldr	r3, [pc, #88]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c4c:	f003 0302 	and.w	r3, r3, #2
 8000c50:	613b      	str	r3, [r7, #16]
 8000c52:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000c54:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000c58:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c5c:	2312      	movs	r3, #18
 8000c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000c6e:	2304      	movs	r3, #4
 8000c70:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c74:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c78:	4619      	mov	r1, r3
 8000c7a:	480b      	ldr	r0, [pc, #44]	@ (8000ca8 <HAL_I2C_MspInit+0xb8>)
 8000c7c:	f000 fe94 	bl	80019a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000c80:	4b08      	ldr	r3, [pc, #32]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c84:	4a07      	ldr	r2, [pc, #28]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c86:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000c8a:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <HAL_I2C_MspInit+0xb4>)
 8000c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000c94:	60fb      	str	r3, [r7, #12]
 8000c96:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C2_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	37b0      	adds	r7, #176	@ 0xb0
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40005800 	.word	0x40005800
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	48000400 	.word	0x48000400

08000cac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a25      	ldr	r2, [pc, #148]	@ (8000d60 <HAL_SPI_MspInit+0xb4>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d144      	bne.n	8000d58 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000cce:	4b25      	ldr	r3, [pc, #148]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000cd0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cd2:	4a24      	ldr	r2, [pc, #144]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000cd4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000cd8:	6593      	str	r3, [r2, #88]	@ 0x58
 8000cda:	4b22      	ldr	r3, [pc, #136]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000cde:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cea:	4a1e      	ldr	r2, [pc, #120]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000cec:	f043 0304 	orr.w	r3, r3, #4
 8000cf0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000cf6:	f003 0304 	and.w	r3, r3, #4
 8000cfa:	60fb      	str	r3, [r7, #12]
 8000cfc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d02:	4a18      	ldr	r2, [pc, #96]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <HAL_SPI_MspInit+0xb8>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PC11     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d16:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000d1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d20:	2300      	movs	r3, #0
 8000d22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d24:	2303      	movs	r3, #3
 8000d26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d28:	2306      	movs	r3, #6
 8000d2a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 0314 	add.w	r3, r7, #20
 8000d30:	4619      	mov	r1, r3
 8000d32:	480d      	ldr	r0, [pc, #52]	@ (8000d68 <HAL_SPI_MspInit+0xbc>)
 8000d34:	f000 fe38 	bl	80019a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000d38:	2320      	movs	r3, #32
 8000d3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3c:	2302      	movs	r3, #2
 8000d3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d40:	2300      	movs	r3, #0
 8000d42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d44:	2303      	movs	r3, #3
 8000d46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d48:	2306      	movs	r3, #6
 8000d4a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	4619      	mov	r1, r3
 8000d52:	4806      	ldr	r0, [pc, #24]	@ (8000d6c <HAL_SPI_MspInit+0xc0>)
 8000d54:	f000 fe28 	bl	80019a8 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000d58:	bf00      	nop
 8000d5a:	3728      	adds	r7, #40	@ 0x28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40003c00 	.word	0x40003c00
 8000d64:	40021000 	.word	0x40021000
 8000d68:	48000800 	.word	0x48000800
 8000d6c:	48000400 	.word	0x48000400

08000d70 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b0ac      	sub	sp, #176	@ 0xb0
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d78:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	601a      	str	r2, [r3, #0]
 8000d80:	605a      	str	r2, [r3, #4]
 8000d82:	609a      	str	r2, [r3, #8]
 8000d84:	60da      	str	r2, [r3, #12]
 8000d86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2288      	movs	r2, #136	@ 0x88
 8000d8e:	2100      	movs	r1, #0
 8000d90:	4618      	mov	r0, r3
 8000d92:	f006 fa05 	bl	80071a0 <memset>
  if(huart->Instance==USART2)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	681b      	ldr	r3, [r3, #0]
 8000d9a:	4a25      	ldr	r2, [pc, #148]	@ (8000e30 <HAL_UART_MspInit+0xc0>)
 8000d9c:	4293      	cmp	r3, r2
 8000d9e:	d143      	bne.n	8000e28 <HAL_UART_MspInit+0xb8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000da0:	2302      	movs	r3, #2
 8000da2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da4:	2300      	movs	r3, #0
 8000da6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da8:	f107 0314 	add.w	r3, r7, #20
 8000dac:	4618      	mov	r0, r3
 8000dae:	f002 fadd 	bl	800336c <HAL_RCCEx_PeriphCLKConfig>
 8000db2:	4603      	mov	r3, r0
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d001      	beq.n	8000dbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000db8:	f7ff fef0 	bl	8000b9c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dbc:	4b1d      	ldr	r3, [pc, #116]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dbe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dc2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dc6:	6593      	str	r3, [r2, #88]	@ 0x58
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dd0:	613b      	str	r3, [r7, #16]
 8000dd2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000dd8:	4a16      	ldr	r2, [pc, #88]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_UART_MspInit+0xc4>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000dec:	230c      	movs	r3, #12
 8000dee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df2:	2302      	movs	r3, #2
 8000df4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dfe:	2303      	movs	r3, #3
 8000e00:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e04:	2307      	movs	r3, #7
 8000e06:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000e0e:	4619      	mov	r1, r3
 8000e10:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e14:	f000 fdc8 	bl	80019a8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	2026      	movs	r0, #38	@ 0x26
 8000e1e:	f000 fba6 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e22:	2026      	movs	r0, #38	@ 0x26
 8000e24:	f000 fbbf 	bl	80015a6 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000e28:	bf00      	nop
 8000e2a:	37b0      	adds	r7, #176	@ 0xb0
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40004400 	.word	0x40004400
 8000e34:	40021000 	.word	0x40021000

08000e38 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai2_b;

static uint32_t SAI2_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b08a      	sub	sp, #40	@ 0x28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI2 */
    if(hsai->Instance==SAI2_Block_A)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	4a64      	ldr	r2, [pc, #400]	@ (8000fd8 <HAL_SAI_MspInit+0x1a0>)
 8000e46:	4293      	cmp	r3, r2
 8000e48:	d15e      	bne.n	8000f08 <HAL_SAI_MspInit+0xd0>
    {
    /* Peripheral clock enable */
    if (SAI2_client == 0)
 8000e4a:	4b64      	ldr	r3, [pc, #400]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d113      	bne.n	8000e7a <HAL_SAI_MspInit+0x42>
    {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000e52:	4b63      	ldr	r3, [pc, #396]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000e54:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e56:	4a62      	ldr	r2, [pc, #392]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000e58:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000e5c:	6613      	str	r3, [r2, #96]	@ 0x60
 8000e5e:	4b60      	ldr	r3, [pc, #384]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000e60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000e66:	613b      	str	r3, [r7, #16]
 8000e68:	693b      	ldr	r3, [r7, #16]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	204b      	movs	r0, #75	@ 0x4b
 8000e70:	f000 fb7d 	bl	800156e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000e74:	204b      	movs	r0, #75	@ 0x4b
 8000e76:	f000 fb96 	bl	80015a6 <HAL_NVIC_EnableIRQ>
    }
    SAI2_client ++;
 8000e7a:	4b58      	ldr	r3, [pc, #352]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	3301      	adds	r3, #1
 8000e80:	4a56      	ldr	r2, [pc, #344]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000e82:	6013      	str	r3, [r2, #0]
    PB12     ------> SAI2_FS_A
    PB13     ------> SAI2_SCK_A
    PB14     ------> SAI2_MCLK_A
    PB15     ------> SAI2_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000e84:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e92:	2300      	movs	r3, #0
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000e96:	230d      	movs	r3, #13
 8000e98:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	4850      	ldr	r0, [pc, #320]	@ (8000fe4 <HAL_SAI_MspInit+0x1ac>)
 8000ea2:	f000 fd81 	bl	80019a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_a.Instance = DMA1_Channel6;
 8000ea6:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ea8:	4a50      	ldr	r2, [pc, #320]	@ (8000fec <HAL_SAI_MspInit+0x1b4>)
 8000eaa:	601a      	str	r2, [r3, #0]
    hdma_sai2_a.Init.Request = DMA_REQUEST_1;
 8000eac:	4b4e      	ldr	r3, [pc, #312]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000eae:	2201      	movs	r2, #1
 8000eb0:	605a      	str	r2, [r3, #4]
    hdma_sai2_a.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000eb4:	2210      	movs	r2, #16
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma_sai2_a.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb8:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
    hdma_sai2_a.Init.MemInc = DMA_MINC_ENABLE;
 8000ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	611a      	str	r2, [r3, #16]
    hdma_sai2_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ec4:	4b48      	ldr	r3, [pc, #288]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eca:	615a      	str	r2, [r3, #20]
    hdma_sai2_a.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ecc:	4b46      	ldr	r3, [pc, #280]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ece:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ed2:	619a      	str	r2, [r3, #24]
    hdma_sai2_a.Init.Mode = DMA_CIRCULAR;
 8000ed4:	4b44      	ldr	r3, [pc, #272]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ed6:	2220      	movs	r2, #32
 8000ed8:	61da      	str	r2, [r3, #28]
    hdma_sai2_a.Init.Priority = DMA_PRIORITY_LOW;
 8000eda:	4b43      	ldr	r3, [pc, #268]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_a) != HAL_OK)
 8000ee0:	4841      	ldr	r0, [pc, #260]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ee2:	f000 fb7b 	bl	80015dc <HAL_DMA_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <HAL_SAI_MspInit+0xb8>
    {
      Error_Handler();
 8000eec:	f7ff fe56 	bl	8000b9c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_a);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a3d      	ldr	r2, [pc, #244]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ef4:	671a      	str	r2, [r3, #112]	@ 0x70
 8000ef6:	4a3c      	ldr	r2, [pc, #240]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	6293      	str	r3, [r2, #40]	@ 0x28

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_a);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	4a3a      	ldr	r2, [pc, #232]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000f00:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000f02:	4a39      	ldr	r2, [pc, #228]	@ (8000fe8 <HAL_SAI_MspInit+0x1b0>)
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6293      	str	r3, [r2, #40]	@ 0x28

    }
    if(hsai->Instance==SAI2_Block_B)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a38      	ldr	r2, [pc, #224]	@ (8000ff0 <HAL_SAI_MspInit+0x1b8>)
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d15e      	bne.n	8000fd0 <HAL_SAI_MspInit+0x198>
    {
      /* Peripheral clock enable */
      if (SAI2_client == 0)
 8000f12:	4b32      	ldr	r3, [pc, #200]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d113      	bne.n	8000f42 <HAL_SAI_MspInit+0x10a>
      {
       __HAL_RCC_SAI2_CLK_ENABLE();
 8000f1a:	4b31      	ldr	r3, [pc, #196]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f1e:	4a30      	ldr	r2, [pc, #192]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000f20:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8000f26:	4b2e      	ldr	r3, [pc, #184]	@ (8000fe0 <HAL_SAI_MspInit+0x1a8>)
 8000f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000f2a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f2e:	60fb      	str	r3, [r7, #12]
 8000f30:	68fb      	ldr	r3, [r7, #12]

      /* Peripheral interrupt init*/
      HAL_NVIC_SetPriority(SAI2_IRQn, 0, 0);
 8000f32:	2200      	movs	r2, #0
 8000f34:	2100      	movs	r1, #0
 8000f36:	204b      	movs	r0, #75	@ 0x4b
 8000f38:	f000 fb19 	bl	800156e <HAL_NVIC_SetPriority>
      HAL_NVIC_EnableIRQ(SAI2_IRQn);
 8000f3c:	204b      	movs	r0, #75	@ 0x4b
 8000f3e:	f000 fb32 	bl	80015a6 <HAL_NVIC_EnableIRQ>
      }
    SAI2_client ++;
 8000f42:	4b26      	ldr	r3, [pc, #152]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	3301      	adds	r3, #1
 8000f48:	4a24      	ldr	r2, [pc, #144]	@ (8000fdc <HAL_SAI_MspInit+0x1a4>)
 8000f4a:	6013      	str	r3, [r2, #0]

    /**SAI2_B_Block_B GPIO Configuration
    PC12     ------> SAI2_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f4c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f52:	2302      	movs	r3, #2
 8000f54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000f5e:	230d      	movs	r3, #13
 8000f60:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f62:	f107 0314 	add.w	r3, r7, #20
 8000f66:	4619      	mov	r1, r3
 8000f68:	4822      	ldr	r0, [pc, #136]	@ (8000ff4 <HAL_SAI_MspInit+0x1bc>)
 8000f6a:	f000 fd1d 	bl	80019a8 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai2_b.Instance = DMA1_Channel7;
 8000f6e:	4b22      	ldr	r3, [pc, #136]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f70:	4a22      	ldr	r2, [pc, #136]	@ (8000ffc <HAL_SAI_MspInit+0x1c4>)
 8000f72:	601a      	str	r2, [r3, #0]
    hdma_sai2_b.Init.Request = DMA_REQUEST_1;
 8000f74:	4b20      	ldr	r3, [pc, #128]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f76:	2201      	movs	r2, #1
 8000f78:	605a      	str	r2, [r3, #4]
    hdma_sai2_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f7a:	4b1f      	ldr	r3, [pc, #124]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
    hdma_sai2_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	60da      	str	r2, [r3, #12]
    hdma_sai2_b.Init.MemInc = DMA_MINC_ENABLE;
 8000f86:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f88:	2280      	movs	r2, #128	@ 0x80
 8000f8a:	611a      	str	r2, [r3, #16]
    hdma_sai2_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f8e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000f92:	615a      	str	r2, [r3, #20]
    hdma_sai2_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000f94:	4b18      	ldr	r3, [pc, #96]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f96:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f9a:	619a      	str	r2, [r3, #24]
    hdma_sai2_b.Init.Mode = DMA_CIRCULAR;
 8000f9c:	4b16      	ldr	r3, [pc, #88]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000f9e:	2220      	movs	r2, #32
 8000fa0:	61da      	str	r2, [r3, #28]
    hdma_sai2_b.Init.Priority = DMA_PRIORITY_LOW;
 8000fa2:	4b15      	ldr	r3, [pc, #84]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai2_b) != HAL_OK)
 8000fa8:	4813      	ldr	r0, [pc, #76]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000faa:	f000 fb17 	bl	80015dc <HAL_DMA_Init>
 8000fae:	4603      	mov	r3, r0
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d001      	beq.n	8000fb8 <HAL_SAI_MspInit+0x180>
    {
      Error_Handler();
 8000fb4:	f7ff fdf2 	bl	8000b9c <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai2_b);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	4a0f      	ldr	r2, [pc, #60]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000fbc:	671a      	str	r2, [r3, #112]	@ 0x70
 8000fbe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6293      	str	r3, [r2, #40]	@ 0x28
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai2_b);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	4a0c      	ldr	r2, [pc, #48]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000fc8:	66da      	str	r2, [r3, #108]	@ 0x6c
 8000fca:	4a0b      	ldr	r2, [pc, #44]	@ (8000ff8 <HAL_SAI_MspInit+0x1c0>)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6293      	str	r3, [r2, #40]	@ 0x28
    }
}
 8000fd0:	bf00      	nop
 8000fd2:	3728      	adds	r7, #40	@ 0x28
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd80      	pop	{r7, pc}
 8000fd8:	40015804 	.word	0x40015804
 8000fdc:	20000360 	.word	0x20000360
 8000fe0:	40021000 	.word	0x40021000
 8000fe4:	48000400 	.word	0x48000400
 8000fe8:	200001e0 	.word	0x200001e0
 8000fec:	4002006c 	.word	0x4002006c
 8000ff0:	40015824 	.word	0x40015824
 8000ff4:	48000800 	.word	0x48000800
 8000ff8:	20000228 	.word	0x20000228
 8000ffc:	40020080 	.word	0x40020080

08001000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <NMI_Handler+0x4>

08001008 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800100c:	bf00      	nop
 800100e:	e7fd      	b.n	800100c <HardFault_Handler+0x4>

08001010 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001014:	bf00      	nop
 8001016:	e7fd      	b.n	8001014 <MemManage_Handler+0x4>

08001018 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800101c:	bf00      	nop
 800101e:	e7fd      	b.n	800101c <BusFault_Handler+0x4>

08001020 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001024:	bf00      	nop
 8001026:	e7fd      	b.n	8001024 <UsageFault_Handler+0x4>

08001028 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001036:	b480      	push	{r7}
 8001038:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800103a:	bf00      	nop
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr

08001052 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001052:	b580      	push	{r7, lr}
 8001054:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001056:	f000 f96b 	bl	8001330 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
	...

08001060 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_a);
 8001064:	4802      	ldr	r0, [pc, #8]	@ (8001070 <DMA1_Channel6_IRQHandler+0x10>)
 8001066:	f000 fbf0 	bl	800184a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	200001e0 	.word	0x200001e0

08001074 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai2_b);
 8001078:	4802      	ldr	r0, [pc, #8]	@ (8001084 <DMA1_Channel7_IRQHandler+0x10>)
 800107a:	f000 fbe6 	bl	800184a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000228 	.word	0x20000228

08001088 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800108c:	4802      	ldr	r0, [pc, #8]	@ (8001098 <USART2_IRQHandler+0x10>)
 800108e:	f004 fe39 	bl	8005d04 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	200002d4 	.word	0x200002d4

0800109c <SAI2_IRQHandler>:

/**
  * @brief This function handles SAI2 global interrupt.
  */
void SAI2_IRQHandler(void)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SAI2_IRQn 0 */

  /* USER CODE END SAI2_IRQn 0 */
  HAL_SAI_IRQHandler(&hsai_BlockA2);
 80010a0:	4803      	ldr	r0, [pc, #12]	@ (80010b0 <SAI2_IRQHandler+0x14>)
 80010a2:	f003 fe87 	bl	8004db4 <HAL_SAI_IRQHandler>
  HAL_SAI_IRQHandler(&hsai_BlockB2);
 80010a6:	4803      	ldr	r0, [pc, #12]	@ (80010b4 <SAI2_IRQHandler+0x18>)
 80010a8:	f003 fe84 	bl	8004db4 <HAL_SAI_IRQHandler>
  /* USER CODE BEGIN SAI2_IRQn 1 */

  /* USER CODE END SAI2_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	200000d8 	.word	0x200000d8
 80010b4:	2000015c 	.word	0x2000015c

080010b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b086      	sub	sp, #24
 80010bc:	af00      	add	r7, sp, #0
 80010be:	60f8      	str	r0, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
 80010c8:	e00a      	b.n	80010e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80010ca:	f3af 8000 	nop.w
 80010ce:	4601      	mov	r1, r0
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	1c5a      	adds	r2, r3, #1
 80010d4:	60ba      	str	r2, [r7, #8]
 80010d6:	b2ca      	uxtb	r2, r1
 80010d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010da:	697b      	ldr	r3, [r7, #20]
 80010dc:	3301      	adds	r3, #1
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697a      	ldr	r2, [r7, #20]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	429a      	cmp	r2, r3
 80010e6:	dbf0      	blt.n	80010ca <_read+0x12>
  }

  return len;
 80010e8:	687b      	ldr	r3, [r7, #4]
}
 80010ea:	4618      	mov	r0, r3
 80010ec:	3718      	adds	r7, #24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}

080010f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80010f2:	b580      	push	{r7, lr}
 80010f4:	b086      	sub	sp, #24
 80010f6:	af00      	add	r7, sp, #0
 80010f8:	60f8      	str	r0, [r7, #12]
 80010fa:	60b9      	str	r1, [r7, #8]
 80010fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80010fe:	2300      	movs	r3, #0
 8001100:	617b      	str	r3, [r7, #20]
 8001102:	e009      	b.n	8001118 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	1c5a      	adds	r2, r3, #1
 8001108:	60ba      	str	r2, [r7, #8]
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	4618      	mov	r0, r3
 800110e:	f7ff faa5 	bl	800065c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001112:	697b      	ldr	r3, [r7, #20]
 8001114:	3301      	adds	r3, #1
 8001116:	617b      	str	r3, [r7, #20]
 8001118:	697a      	ldr	r2, [r7, #20]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	429a      	cmp	r2, r3
 800111e:	dbf1      	blt.n	8001104 <_write+0x12>
  }
  return len;
 8001120:	687b      	ldr	r3, [r7, #4]
}
 8001122:	4618      	mov	r0, r3
 8001124:	3718      	adds	r7, #24
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}

0800112a <_close>:

int _close(int file)
{
 800112a:	b480      	push	{r7}
 800112c:	b083      	sub	sp, #12
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001132:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001142:	b480      	push	{r7}
 8001144:	b083      	sub	sp, #12
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
 800114a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001152:	605a      	str	r2, [r3, #4]
  return 0;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <_isatty>:

int _isatty(int file)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800116a:	2301      	movs	r3, #1
}
 800116c:	4618      	mov	r0, r3
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	3714      	adds	r7, #20
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b086      	sub	sp, #24
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800119c:	4a14      	ldr	r2, [pc, #80]	@ (80011f0 <_sbrk+0x5c>)
 800119e:	4b15      	ldr	r3, [pc, #84]	@ (80011f4 <_sbrk+0x60>)
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011a8:	4b13      	ldr	r3, [pc, #76]	@ (80011f8 <_sbrk+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d102      	bne.n	80011b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <_sbrk+0x64>)
 80011b2:	4a12      	ldr	r2, [pc, #72]	@ (80011fc <_sbrk+0x68>)
 80011b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011b6:	4b10      	ldr	r3, [pc, #64]	@ (80011f8 <_sbrk+0x64>)
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4413      	add	r3, r2
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d207      	bcs.n	80011d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011c4:	f006 f83a 	bl	800723c <__errno>
 80011c8:	4603      	mov	r3, r0
 80011ca:	220c      	movs	r2, #12
 80011cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011ce:	f04f 33ff 	mov.w	r3, #4294967295
 80011d2:	e009      	b.n	80011e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011d4:	4b08      	ldr	r3, [pc, #32]	@ (80011f8 <_sbrk+0x64>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011da:	4b07      	ldr	r3, [pc, #28]	@ (80011f8 <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	4a05      	ldr	r2, [pc, #20]	@ (80011f8 <_sbrk+0x64>)
 80011e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011e6:	68fb      	ldr	r3, [r7, #12]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3718      	adds	r7, #24
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20018000 	.word	0x20018000
 80011f4:	00000400 	.word	0x00000400
 80011f8:	20000364 	.word	0x20000364
 80011fc:	200004b8 	.word	0x200004b8

08001200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001204:	4b06      	ldr	r3, [pc, #24]	@ (8001220 <SystemInit+0x20>)
 8001206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800120a:	4a05      	ldr	r2, [pc, #20]	@ (8001220 <SystemInit+0x20>)
 800120c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001210:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001214:	bf00      	nop
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001224:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800125c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001228:	f7ff ffea 	bl	8001200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800122c:	480c      	ldr	r0, [pc, #48]	@ (8001260 <LoopForever+0x6>)
  ldr r1, =_edata
 800122e:	490d      	ldr	r1, [pc, #52]	@ (8001264 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <LoopForever+0xe>)
  movs r3, #0
 8001232:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001234:	e002      	b.n	800123c <LoopCopyDataInit>

08001236 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001236:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001238:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800123a:	3304      	adds	r3, #4

0800123c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800123c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800123e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001240:	d3f9      	bcc.n	8001236 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001242:	4a0a      	ldr	r2, [pc, #40]	@ (800126c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001244:	4c0a      	ldr	r4, [pc, #40]	@ (8001270 <LoopForever+0x16>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001248:	e001      	b.n	800124e <LoopFillZerobss>

0800124a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800124a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800124c:	3204      	adds	r2, #4

0800124e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800124e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001250:	d3fb      	bcc.n	800124a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001252:	f005 fff9 	bl	8007248 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001256:	f7ff fa2f 	bl	80006b8 <main>

0800125a <LoopForever>:

LoopForever:
    b LoopForever
 800125a:	e7fe      	b.n	800125a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800125c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001260:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001264:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001268:	08007dc8 	.word	0x08007dc8
  ldr r2, =_sbss
 800126c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001270:	200004b8 	.word	0x200004b8

08001274 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001274:	e7fe      	b.n	8001274 <ADC1_2_IRQHandler>
	...

08001278 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800127e:	2300      	movs	r3, #0
 8001280:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <HAL_Init+0x3c>)
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	4a0b      	ldr	r2, [pc, #44]	@ (80012b4 <HAL_Init+0x3c>)
 8001288:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800128c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800128e:	2003      	movs	r0, #3
 8001290:	f000 f962 	bl	8001558 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001294:	2000      	movs	r0, #0
 8001296:	f000 f80f 	bl	80012b8 <HAL_InitTick>
 800129a:	4603      	mov	r3, r0
 800129c:	2b00      	cmp	r3, #0
 800129e:	d002      	beq.n	80012a6 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 80012a0:	2301      	movs	r3, #1
 80012a2:	71fb      	strb	r3, [r7, #7]
 80012a4:	e001      	b.n	80012aa <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80012a6:	f7ff fc7f 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012aa:	79fb      	ldrb	r3, [r7, #7]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	40022000 	.word	0x40022000

080012b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012c0:	2300      	movs	r3, #0
 80012c2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80012c4:	4b17      	ldr	r3, [pc, #92]	@ (8001324 <HAL_InitTick+0x6c>)
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d023      	beq.n	8001314 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012cc:	4b16      	ldr	r3, [pc, #88]	@ (8001328 <HAL_InitTick+0x70>)
 80012ce:	681a      	ldr	r2, [r3, #0]
 80012d0:	4b14      	ldr	r3, [pc, #80]	@ (8001324 <HAL_InitTick+0x6c>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	4619      	mov	r1, r3
 80012d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012da:	fbb3 f3f1 	udiv	r3, r3, r1
 80012de:	fbb2 f3f3 	udiv	r3, r2, r3
 80012e2:	4618      	mov	r0, r3
 80012e4:	f000 f96d 	bl	80015c2 <HAL_SYSTICK_Config>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d10f      	bne.n	800130e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2b0f      	cmp	r3, #15
 80012f2:	d809      	bhi.n	8001308 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012f4:	2200      	movs	r2, #0
 80012f6:	6879      	ldr	r1, [r7, #4]
 80012f8:	f04f 30ff 	mov.w	r0, #4294967295
 80012fc:	f000 f937 	bl	800156e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001300:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <HAL_InitTick+0x74>)
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	e007      	b.n	8001318 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001308:	2301      	movs	r3, #1
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e004      	b.n	8001318 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800130e:	2301      	movs	r3, #1
 8001310:	73fb      	strb	r3, [r7, #15]
 8001312:	e001      	b.n	8001318 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001318:	7bfb      	ldrb	r3, [r7, #15]
}
 800131a:	4618      	mov	r0, r3
 800131c:	3710      	adds	r7, #16
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	20000000 	.word	0x20000000
 800132c:	20000004 	.word	0x20000004

08001330 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001334:	4b06      	ldr	r3, [pc, #24]	@ (8001350 <HAL_IncTick+0x20>)
 8001336:	781b      	ldrb	r3, [r3, #0]
 8001338:	461a      	mov	r2, r3
 800133a:	4b06      	ldr	r3, [pc, #24]	@ (8001354 <HAL_IncTick+0x24>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4413      	add	r3, r2
 8001340:	4a04      	ldr	r2, [pc, #16]	@ (8001354 <HAL_IncTick+0x24>)
 8001342:	6013      	str	r3, [r2, #0]
}
 8001344:	bf00      	nop
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
 800134e:	bf00      	nop
 8001350:	20000008 	.word	0x20000008
 8001354:	20000368 	.word	0x20000368

08001358 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return uwTick;
 800135c:	4b03      	ldr	r3, [pc, #12]	@ (800136c <HAL_GetTick+0x14>)
 800135e:	681b      	ldr	r3, [r3, #0]
}
 8001360:	4618      	mov	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	20000368 	.word	0x20000368

08001370 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001378:	f7ff ffee 	bl	8001358 <HAL_GetTick>
 800137c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001388:	d005      	beq.n	8001396 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800138a:	4b0a      	ldr	r3, [pc, #40]	@ (80013b4 <HAL_Delay+0x44>)
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	461a      	mov	r2, r3
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	4413      	add	r3, r2
 8001394:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001396:	bf00      	nop
 8001398:	f7ff ffde 	bl	8001358 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	429a      	cmp	r2, r3
 80013a6:	d8f7      	bhi.n	8001398 <HAL_Delay+0x28>
  {
  }
}
 80013a8:	bf00      	nop
 80013aa:	bf00      	nop
 80013ac:	3710      	adds	r7, #16
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000008 	.word	0x20000008

080013b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b085      	sub	sp, #20
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	f003 0307 	and.w	r3, r3, #7
 80013c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ca:	68db      	ldr	r3, [r3, #12]
 80013cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013ce:	68ba      	ldr	r2, [r7, #8]
 80013d0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013d4:	4013      	ands	r3, r2
 80013d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013e0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013ea:	4a04      	ldr	r2, [pc, #16]	@ (80013fc <__NVIC_SetPriorityGrouping+0x44>)
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	60d3      	str	r3, [r2, #12]
}
 80013f0:	bf00      	nop
 80013f2:	3714      	adds	r7, #20
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001404:	4b04      	ldr	r3, [pc, #16]	@ (8001418 <__NVIC_GetPriorityGrouping+0x18>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	0a1b      	lsrs	r3, r3, #8
 800140a:	f003 0307 	and.w	r3, r3, #7
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001416:	4770      	bx	lr
 8001418:	e000ed00 	.word	0xe000ed00

0800141c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141c:	b480      	push	{r7}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001426:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db0b      	blt.n	8001446 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800142e:	79fb      	ldrb	r3, [r7, #7]
 8001430:	f003 021f 	and.w	r2, r3, #31
 8001434:	4907      	ldr	r1, [pc, #28]	@ (8001454 <__NVIC_EnableIRQ+0x38>)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	095b      	lsrs	r3, r3, #5
 800143c:	2001      	movs	r0, #1
 800143e:	fa00 f202 	lsl.w	r2, r0, r2
 8001442:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001446:	bf00      	nop
 8001448:	370c      	adds	r7, #12
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	e000e100 	.word	0xe000e100

08001458 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001464:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db0a      	blt.n	8001482 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	b2da      	uxtb	r2, r3
 8001470:	490c      	ldr	r1, [pc, #48]	@ (80014a4 <__NVIC_SetPriority+0x4c>)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	0112      	lsls	r2, r2, #4
 8001478:	b2d2      	uxtb	r2, r2
 800147a:	440b      	add	r3, r1
 800147c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001480:	e00a      	b.n	8001498 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	b2da      	uxtb	r2, r3
 8001486:	4908      	ldr	r1, [pc, #32]	@ (80014a8 <__NVIC_SetPriority+0x50>)
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f003 030f 	and.w	r3, r3, #15
 800148e:	3b04      	subs	r3, #4
 8001490:	0112      	lsls	r2, r2, #4
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	440b      	add	r3, r1
 8001496:	761a      	strb	r2, [r3, #24]
}
 8001498:	bf00      	nop
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000e100 	.word	0xe000e100
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b089      	sub	sp, #36	@ 0x24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	f1c3 0307 	rsb	r3, r3, #7
 80014c6:	2b04      	cmp	r3, #4
 80014c8:	bf28      	it	cs
 80014ca:	2304      	movcs	r3, #4
 80014cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	3304      	adds	r3, #4
 80014d2:	2b06      	cmp	r3, #6
 80014d4:	d902      	bls.n	80014dc <NVIC_EncodePriority+0x30>
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	3b03      	subs	r3, #3
 80014da:	e000      	b.n	80014de <NVIC_EncodePriority+0x32>
 80014dc:	2300      	movs	r3, #0
 80014de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014e0:	f04f 32ff 	mov.w	r2, #4294967295
 80014e4:	69bb      	ldr	r3, [r7, #24]
 80014e6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ea:	43da      	mvns	r2, r3
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	401a      	ands	r2, r3
 80014f0:	697b      	ldr	r3, [r7, #20]
 80014f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014f4:	f04f 31ff 	mov.w	r1, #4294967295
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	fa01 f303 	lsl.w	r3, r1, r3
 80014fe:	43d9      	mvns	r1, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001504:	4313      	orrs	r3, r2
         );
}
 8001506:	4618      	mov	r0, r3
 8001508:	3724      	adds	r7, #36	@ 0x24
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	3b01      	subs	r3, #1
 8001520:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001524:	d301      	bcc.n	800152a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001526:	2301      	movs	r3, #1
 8001528:	e00f      	b.n	800154a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800152a:	4a0a      	ldr	r2, [pc, #40]	@ (8001554 <SysTick_Config+0x40>)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001532:	210f      	movs	r1, #15
 8001534:	f04f 30ff 	mov.w	r0, #4294967295
 8001538:	f7ff ff8e 	bl	8001458 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800153c:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <SysTick_Config+0x40>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001542:	4b04      	ldr	r3, [pc, #16]	@ (8001554 <SysTick_Config+0x40>)
 8001544:	2207      	movs	r2, #7
 8001546:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	e000e010 	.word	0xe000e010

08001558 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b082      	sub	sp, #8
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001560:	6878      	ldr	r0, [r7, #4]
 8001562:	f7ff ff29 	bl	80013b8 <__NVIC_SetPriorityGrouping>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b086      	sub	sp, #24
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	60b9      	str	r1, [r7, #8]
 8001578:	607a      	str	r2, [r7, #4]
 800157a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001580:	f7ff ff3e 	bl	8001400 <__NVIC_GetPriorityGrouping>
 8001584:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001586:	687a      	ldr	r2, [r7, #4]
 8001588:	68b9      	ldr	r1, [r7, #8]
 800158a:	6978      	ldr	r0, [r7, #20]
 800158c:	f7ff ff8e 	bl	80014ac <NVIC_EncodePriority>
 8001590:	4602      	mov	r2, r0
 8001592:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001596:	4611      	mov	r1, r2
 8001598:	4618      	mov	r0, r3
 800159a:	f7ff ff5d 	bl	8001458 <__NVIC_SetPriority>
}
 800159e:	bf00      	nop
 80015a0:	3718      	adds	r7, #24
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}

080015a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015a6:	b580      	push	{r7, lr}
 80015a8:	b082      	sub	sp, #8
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	4603      	mov	r3, r0
 80015ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f7ff ff31 	bl	800141c <__NVIC_EnableIRQ>
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}

080015c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ffa2 	bl	8001514 <SysTick_Config>
 80015d0:	4603      	mov	r3, r0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3708      	adds	r7, #8
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
	...

080015dc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d101      	bne.n	80015ee <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015ea:	2301      	movs	r3, #1
 80015ec:	e098      	b.n	8001720 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	461a      	mov	r2, r3
 80015f4:	4b4d      	ldr	r3, [pc, #308]	@ (800172c <HAL_DMA_Init+0x150>)
 80015f6:	429a      	cmp	r2, r3
 80015f8:	d80f      	bhi.n	800161a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	461a      	mov	r2, r3
 8001600:	4b4b      	ldr	r3, [pc, #300]	@ (8001730 <HAL_DMA_Init+0x154>)
 8001602:	4413      	add	r3, r2
 8001604:	4a4b      	ldr	r2, [pc, #300]	@ (8001734 <HAL_DMA_Init+0x158>)
 8001606:	fba2 2303 	umull	r2, r3, r2, r3
 800160a:	091b      	lsrs	r3, r3, #4
 800160c:	009a      	lsls	r2, r3, #2
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a48      	ldr	r2, [pc, #288]	@ (8001738 <HAL_DMA_Init+0x15c>)
 8001616:	641a      	str	r2, [r3, #64]	@ 0x40
 8001618:	e00e      	b.n	8001638 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	461a      	mov	r2, r3
 8001620:	4b46      	ldr	r3, [pc, #280]	@ (800173c <HAL_DMA_Init+0x160>)
 8001622:	4413      	add	r3, r2
 8001624:	4a43      	ldr	r2, [pc, #268]	@ (8001734 <HAL_DMA_Init+0x158>)
 8001626:	fba2 2303 	umull	r2, r3, r2, r3
 800162a:	091b      	lsrs	r3, r3, #4
 800162c:	009a      	lsls	r2, r3, #2
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a42      	ldr	r2, [pc, #264]	@ (8001740 <HAL_DMA_Init+0x164>)
 8001636:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2202      	movs	r2, #2
 800163c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800164e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001652:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800165c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001668:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	699b      	ldr	r3, [r3, #24]
 800166e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001674:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800167c:	68fa      	ldr	r2, [r7, #12]
 800167e:	4313      	orrs	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	689b      	ldr	r3, [r3, #8]
 800168e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8001692:	d039      	beq.n	8001708 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001698:	4a27      	ldr	r2, [pc, #156]	@ (8001738 <HAL_DMA_Init+0x15c>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d11a      	bne.n	80016d4 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800169e:	4b29      	ldr	r3, [pc, #164]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016a6:	f003 031c 	and.w	r3, r3, #28
 80016aa:	210f      	movs	r1, #15
 80016ac:	fa01 f303 	lsl.w	r3, r1, r3
 80016b0:	43db      	mvns	r3, r3
 80016b2:	4924      	ldr	r1, [pc, #144]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016b4:	4013      	ands	r3, r2
 80016b6:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016b8:	4b22      	ldr	r3, [pc, #136]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6859      	ldr	r1, [r3, #4]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c4:	f003 031c 	and.w	r3, r3, #28
 80016c8:	fa01 f303 	lsl.w	r3, r1, r3
 80016cc:	491d      	ldr	r1, [pc, #116]	@ (8001744 <HAL_DMA_Init+0x168>)
 80016ce:	4313      	orrs	r3, r2
 80016d0:	600b      	str	r3, [r1, #0]
 80016d2:	e019      	b.n	8001708 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80016d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016dc:	f003 031c 	and.w	r3, r3, #28
 80016e0:	210f      	movs	r1, #15
 80016e2:	fa01 f303 	lsl.w	r3, r1, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	4917      	ldr	r1, [pc, #92]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016ea:	4013      	ands	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80016ee:	4b16      	ldr	r3, [pc, #88]	@ (8001748 <HAL_DMA_Init+0x16c>)
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6859      	ldr	r1, [r3, #4]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fa:	f003 031c 	and.w	r3, r3, #28
 80016fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001702:	4911      	ldr	r1, [pc, #68]	@ (8001748 <HAL_DMA_Init+0x16c>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2200      	movs	r2, #0
 800170c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	2201      	movs	r2, #1
 8001712:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2200      	movs	r2, #0
 800171a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800171e:	2300      	movs	r3, #0
}
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr
 800172c:	40020407 	.word	0x40020407
 8001730:	bffdfff8 	.word	0xbffdfff8
 8001734:	cccccccd 	.word	0xcccccccd
 8001738:	40020000 	.word	0x40020000
 800173c:	bffdfbf8 	.word	0xbffdfbf8
 8001740:	40020400 	.word	0x40020400
 8001744:	400200a8 	.word	0x400200a8
 8001748:	400204a8 	.word	0x400204a8

0800174c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800174c:	b480      	push	{r7}
 800174e:	b085      	sub	sp, #20
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001754:	2300      	movs	r3, #0
 8001756:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800175e:	b2db      	uxtb	r3, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d008      	beq.n	8001776 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	2204      	movs	r2, #4
 8001768:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2200      	movs	r2, #0
 800176e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e022      	b.n	80017bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 020e 	bic.w	r2, r2, #14
 8001784:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0201 	bic.w	r2, r2, #1
 8001794:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	f003 021c 	and.w	r2, r3, #28
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	2101      	movs	r1, #1
 80017a4:	fa01 f202 	lsl.w	r2, r1, r2
 80017a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	2201      	movs	r2, #1
 80017ae:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	2200      	movs	r2, #0
 80017b6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80017ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3714      	adds	r7, #20
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017d0:	2300      	movs	r3, #0
 80017d2:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80017da:	b2db      	uxtb	r3, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d005      	beq.n	80017ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2204      	movs	r2, #4
 80017e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	73fb      	strb	r3, [r7, #15]
 80017ea:	e029      	b.n	8001840 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	681a      	ldr	r2, [r3, #0]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f022 020e 	bic.w	r2, r2, #14
 80017fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f022 0201 	bic.w	r2, r2, #1
 800180a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001810:	f003 021c 	and.w	r2, r3, #28
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001818:	2101      	movs	r1, #1
 800181a:	fa01 f202 	lsl.w	r2, r1, r2
 800181e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2201      	movs	r2, #1
 8001824:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2200      	movs	r2, #0
 800182c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001834:	2b00      	cmp	r3, #0
 8001836:	d003      	beq.n	8001840 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800183c:	6878      	ldr	r0, [r7, #4]
 800183e:	4798      	blx	r3
    }
  }
  return status;
 8001840:	7bfb      	ldrb	r3, [r7, #15]
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}

0800184a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800184a:	b580      	push	{r7, lr}
 800184c:	b084      	sub	sp, #16
 800184e:	af00      	add	r7, sp, #0
 8001850:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001866:	f003 031c 	and.w	r3, r3, #28
 800186a:	2204      	movs	r2, #4
 800186c:	409a      	lsls	r2, r3
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	4013      	ands	r3, r2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d026      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x7a>
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	f003 0304 	and.w	r3, r3, #4
 800187c:	2b00      	cmp	r3, #0
 800187e:	d021      	beq.n	80018c4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f003 0320 	and.w	r3, r3, #32
 800188a:	2b00      	cmp	r3, #0
 800188c:	d107      	bne.n	800189e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f022 0204 	bic.w	r2, r2, #4
 800189c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018a2:	f003 021c 	and.w	r2, r3, #28
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	2104      	movs	r1, #4
 80018ac:	fa01 f202 	lsl.w	r2, r1, r2
 80018b0:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d071      	beq.n	800199e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80018c2:	e06c      	b.n	800199e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018c8:	f003 031c 	and.w	r3, r3, #28
 80018cc:	2202      	movs	r2, #2
 80018ce:	409a      	lsls	r2, r3
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d02e      	beq.n	8001936 <HAL_DMA_IRQHandler+0xec>
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d029      	beq.n	8001936 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f003 0320 	and.w	r3, r3, #32
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d10b      	bne.n	8001908 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	681a      	ldr	r2, [r3, #0]
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f022 020a 	bic.w	r2, r2, #10
 80018fe:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2201      	movs	r2, #1
 8001904:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800190c:	f003 021c 	and.w	r2, r3, #28
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	2102      	movs	r1, #2
 8001916:	fa01 f202 	lsl.w	r2, r1, r2
 800191a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001928:	2b00      	cmp	r3, #0
 800192a:	d038      	beq.n	800199e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8001934:	e033      	b.n	800199e <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	f003 031c 	and.w	r3, r3, #28
 800193e:	2208      	movs	r2, #8
 8001940:	409a      	lsls	r2, r3
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	4013      	ands	r3, r2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d02a      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x156>
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b00      	cmp	r3, #0
 8001952:	d025      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	f022 020e 	bic.w	r2, r2, #14
 8001962:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001968:	f003 021c 	and.w	r2, r3, #28
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	2101      	movs	r1, #1
 8001972:	fa01 f202 	lsl.w	r2, r1, r2
 8001976:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2201      	movs	r2, #1
 800197c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	2201      	movs	r2, #1
 8001982:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2200      	movs	r2, #0
 800198a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001992:	2b00      	cmp	r3, #0
 8001994:	d004      	beq.n	80019a0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800199a:	6878      	ldr	r0, [r7, #4]
 800199c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
}
 80019a2:	3710      	adds	r7, #16
 80019a4:	46bd      	mov	sp, r7
 80019a6:	bd80      	pop	{r7, pc}

080019a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b087      	sub	sp, #28
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
 80019b0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019b2:	2300      	movs	r3, #0
 80019b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019b6:	e17f      	b.n	8001cb8 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	681a      	ldr	r2, [r3, #0]
 80019bc:	2101      	movs	r1, #1
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	fa01 f303 	lsl.w	r3, r1, r3
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	f000 8171 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f003 0303 	and.w	r3, r3, #3
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d005      	beq.n	80019e8 <HAL_GPIO_Init+0x40>
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f003 0303 	and.w	r3, r3, #3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d130      	bne.n	8001a4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689b      	ldr	r3, [r3, #8]
 80019ec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	005b      	lsls	r3, r3, #1
 80019f2:	2203      	movs	r2, #3
 80019f4:	fa02 f303 	lsl.w	r3, r2, r3
 80019f8:	43db      	mvns	r3, r3
 80019fa:	693a      	ldr	r2, [r7, #16]
 80019fc:	4013      	ands	r3, r2
 80019fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	68da      	ldr	r2, [r3, #12]
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	005b      	lsls	r3, r3, #1
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	693a      	ldr	r2, [r7, #16]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	693a      	ldr	r2, [r7, #16]
 8001a16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a1e:	2201      	movs	r2, #1
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	fa02 f303 	lsl.w	r3, r2, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	693a      	ldr	r2, [r7, #16]
 8001a2a:	4013      	ands	r3, r2
 8001a2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	091b      	lsrs	r3, r3, #4
 8001a34:	f003 0201 	and.w	r2, r3, #1
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a3e:	693a      	ldr	r2, [r7, #16]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	693a      	ldr	r2, [r7, #16]
 8001a48:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	f003 0303 	and.w	r3, r3, #3
 8001a52:	2b03      	cmp	r3, #3
 8001a54:	d118      	bne.n	8001a88 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	697b      	ldr	r3, [r7, #20]
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	693a      	ldr	r2, [r7, #16]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	08db      	lsrs	r3, r3, #3
 8001a72:	f003 0201 	and.w	r2, r3, #1
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	693a      	ldr	r2, [r7, #16]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f003 0303 	and.w	r3, r3, #3
 8001a90:	2b03      	cmp	r3, #3
 8001a92:	d017      	beq.n	8001ac4 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	005b      	lsls	r3, r3, #1
 8001a9e:	2203      	movs	r2, #3
 8001aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa4:	43db      	mvns	r3, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	689a      	ldr	r2, [r3, #8]
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	005b      	lsls	r3, r3, #1
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	693a      	ldr	r2, [r7, #16]
 8001aba:	4313      	orrs	r3, r2
 8001abc:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	693a      	ldr	r2, [r7, #16]
 8001ac2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f003 0303 	and.w	r3, r3, #3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d123      	bne.n	8001b18 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	08da      	lsrs	r2, r3, #3
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	3208      	adds	r2, #8
 8001ad8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001adc:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	f003 0307 	and.w	r3, r3, #7
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	220f      	movs	r2, #15
 8001ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8001aec:	43db      	mvns	r3, r3
 8001aee:	693a      	ldr	r2, [r7, #16]
 8001af0:	4013      	ands	r3, r2
 8001af2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	691a      	ldr	r2, [r3, #16]
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	08da      	lsrs	r2, r3, #3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	3208      	adds	r2, #8
 8001b12:	6939      	ldr	r1, [r7, #16]
 8001b14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b1e:	697b      	ldr	r3, [r7, #20]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	2203      	movs	r2, #3
 8001b24:	fa02 f303 	lsl.w	r3, r2, r3
 8001b28:	43db      	mvns	r3, r3
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	f003 0203 	and.w	r2, r3, #3
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	693a      	ldr	r2, [r7, #16]
 8001b42:	4313      	orrs	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	f000 80ac 	beq.w	8001cb2 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b5c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b66:	4b5c      	ldr	r3, [pc, #368]	@ (8001cd8 <HAL_GPIO_Init+0x330>)
 8001b68:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60bb      	str	r3, [r7, #8]
 8001b70:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b72:	4a5a      	ldr	r2, [pc, #360]	@ (8001cdc <HAL_GPIO_Init+0x334>)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	089b      	lsrs	r3, r3, #2
 8001b78:	3302      	adds	r3, #2
 8001b7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b80:	697b      	ldr	r3, [r7, #20]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	220f      	movs	r2, #15
 8001b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8e:	43db      	mvns	r3, r3
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	4013      	ands	r3, r2
 8001b94:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b9c:	d025      	beq.n	8001bea <HAL_GPIO_Init+0x242>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce0 <HAL_GPIO_Init+0x338>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d01f      	beq.n	8001be6 <HAL_GPIO_Init+0x23e>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce4 <HAL_GPIO_Init+0x33c>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d019      	beq.n	8001be2 <HAL_GPIO_Init+0x23a>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ce8 <HAL_GPIO_Init+0x340>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d013      	beq.n	8001bde <HAL_GPIO_Init+0x236>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4c      	ldr	r2, [pc, #304]	@ (8001cec <HAL_GPIO_Init+0x344>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d00d      	beq.n	8001bda <HAL_GPIO_Init+0x232>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001cf0 <HAL_GPIO_Init+0x348>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d007      	beq.n	8001bd6 <HAL_GPIO_Init+0x22e>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4a      	ldr	r2, [pc, #296]	@ (8001cf4 <HAL_GPIO_Init+0x34c>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d101      	bne.n	8001bd2 <HAL_GPIO_Init+0x22a>
 8001bce:	2306      	movs	r3, #6
 8001bd0:	e00c      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd2:	2307      	movs	r3, #7
 8001bd4:	e00a      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bd6:	2305      	movs	r3, #5
 8001bd8:	e008      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bda:	2304      	movs	r3, #4
 8001bdc:	e006      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bde:	2303      	movs	r3, #3
 8001be0:	e004      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e002      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001be6:	2301      	movs	r3, #1
 8001be8:	e000      	b.n	8001bec <HAL_GPIO_Init+0x244>
 8001bea:	2300      	movs	r3, #0
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	f002 0203 	and.w	r2, r2, #3
 8001bf2:	0092      	lsls	r2, r2, #2
 8001bf4:	4093      	lsls	r3, r2
 8001bf6:	693a      	ldr	r2, [r7, #16]
 8001bf8:	4313      	orrs	r3, r2
 8001bfa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bfc:	4937      	ldr	r1, [pc, #220]	@ (8001cdc <HAL_GPIO_Init+0x334>)
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	089b      	lsrs	r3, r3, #2
 8001c02:	3302      	adds	r3, #2
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c0a:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	43db      	mvns	r3, r3
 8001c14:	693a      	ldr	r2, [r7, #16]
 8001c16:	4013      	ands	r3, r2
 8001c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d003      	beq.n	8001c2e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c2e:	4a32      	ldr	r2, [pc, #200]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c34:	4b30      	ldr	r3, [pc, #192]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	693a      	ldr	r2, [r7, #16]
 8001c40:	4013      	ands	r3, r2
 8001c42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d003      	beq.n	8001c58 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c58:	4a27      	ldr	r2, [pc, #156]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c5e:	4b26      	ldr	r3, [pc, #152]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	43db      	mvns	r3, r3
 8001c68:	693a      	ldr	r2, [r7, #16]
 8001c6a:	4013      	ands	r3, r2
 8001c6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d003      	beq.n	8001c82 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001c7a:	693a      	ldr	r2, [r7, #16]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c82:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c88:	4b1b      	ldr	r3, [pc, #108]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	43db      	mvns	r3, r3
 8001c92:	693a      	ldr	r2, [r7, #16]
 8001c94:	4013      	ands	r3, r2
 8001c96:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d003      	beq.n	8001cac <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001ca4:	693a      	ldr	r2, [r7, #16]
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cac:	4a12      	ldr	r2, [pc, #72]	@ (8001cf8 <HAL_GPIO_Init+0x350>)
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	3301      	adds	r3, #1
 8001cb6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa22 f303 	lsr.w	r3, r2, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f47f ae78 	bne.w	80019b8 <HAL_GPIO_Init+0x10>
  }
}
 8001cc8:	bf00      	nop
 8001cca:	bf00      	nop
 8001ccc:	371c      	adds	r7, #28
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010000 	.word	0x40010000
 8001ce0:	48000400 	.word	0x48000400
 8001ce4:	48000800 	.word	0x48000800
 8001ce8:	48000c00 	.word	0x48000c00
 8001cec:	48001000 	.word	0x48001000
 8001cf0:	48001400 	.word	0x48001400
 8001cf4:	48001800 	.word	0x48001800
 8001cf8:	40010400 	.word	0x40010400

08001cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d0c:	787b      	ldrb	r3, [r7, #1]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d12:	887a      	ldrh	r2, [r7, #2]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d18:	e002      	b.n	8001d20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d1a:	887a      	ldrh	r2, [r7, #2]
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d101      	bne.n	8001d3e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e08d      	b.n	8001e5a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d106      	bne.n	8001d58 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001d52:	6878      	ldr	r0, [r7, #4]
 8001d54:	f7fe ff4c 	bl	8000bf0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2224      	movs	r2, #36	@ 0x24
 8001d5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f022 0201 	bic.w	r2, r2, #1
 8001d6e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d7c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	689a      	ldr	r2, [r3, #8]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001d8c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	68db      	ldr	r3, [r3, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d107      	bne.n	8001da6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001da2:	609a      	str	r2, [r3, #8]
 8001da4:	e006      	b.n	8001db4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001db2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d108      	bne.n	8001dce <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	e007      	b.n	8001dde <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ddc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	6812      	ldr	r2, [r2, #0]
 8001de8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001dec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001df0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001e00:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	691a      	ldr	r2, [r3, #16]
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	695b      	ldr	r3, [r3, #20]
 8001e0a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	699b      	ldr	r3, [r3, #24]
 8001e12:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	69d9      	ldr	r1, [r3, #28]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6a1a      	ldr	r2, [r3, #32]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f042 0201 	orr.w	r2, r2, #1
 8001e3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2220      	movs	r2, #32
 8001e46:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2200      	movs	r2, #0
 8001e54:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af02      	add	r7, sp, #8
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4603      	mov	r3, r0
 8001e74:	817b      	strh	r3, [r7, #10]
 8001e76:	460b      	mov	r3, r1
 8001e78:	813b      	strh	r3, [r7, #8]
 8001e7a:	4613      	mov	r3, r2
 8001e7c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e84:	b2db      	uxtb	r3, r3
 8001e86:	2b20      	cmp	r3, #32
 8001e88:	f040 80fd 	bne.w	8002086 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e8c:	6a3b      	ldr	r3, [r7, #32]
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d002      	beq.n	8001e98 <HAL_I2C_Mem_Read+0x34>
 8001e92:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d105      	bne.n	8001ea4 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e9e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e0f1      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d101      	bne.n	8001eb2 <HAL_I2C_Mem_Read+0x4e>
 8001eae:	2302      	movs	r3, #2
 8001eb0:	e0ea      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001eba:	f7ff fa4d 	bl	8001358 <HAL_GetTick>
 8001ebe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	9300      	str	r3, [sp, #0]
 8001ec4:	2319      	movs	r3, #25
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f95b 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e0d5      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	2222      	movs	r2, #34	@ 0x22
 8001ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2240      	movs	r2, #64	@ 0x40
 8001ee8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001efc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	2200      	movs	r2, #0
 8001f02:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001f04:	88f8      	ldrh	r0, [r7, #6]
 8001f06:	893a      	ldrh	r2, [r7, #8]
 8001f08:	8979      	ldrh	r1, [r7, #10]
 8001f0a:	697b      	ldr	r3, [r7, #20]
 8001f0c:	9301      	str	r3, [sp, #4]
 8001f0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f10:	9300      	str	r3, [sp, #0]
 8001f12:	4603      	mov	r3, r0
 8001f14:	68f8      	ldr	r0, [r7, #12]
 8001f16:	f000 f8bf 	bl	8002098 <I2C_RequestMemoryRead>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d005      	beq.n	8001f2c <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e0ad      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f30:	b29b      	uxth	r3, r3
 8001f32:	2bff      	cmp	r3, #255	@ 0xff
 8001f34:	d90e      	bls.n	8001f54 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	2201      	movs	r2, #1
 8001f3a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	8979      	ldrh	r1, [r7, #10]
 8001f44:	4b52      	ldr	r3, [pc, #328]	@ (8002090 <HAL_I2C_Mem_Read+0x22c>)
 8001f46:	9300      	str	r3, [sp, #0]
 8001f48:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f4c:	68f8      	ldr	r0, [r7, #12]
 8001f4e:	f000 fadf 	bl	8002510 <I2C_TransferConfig>
 8001f52:	e00f      	b.n	8001f74 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001f58:	b29a      	uxth	r2, r3
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	8979      	ldrh	r1, [r7, #10]
 8001f66:	4b4a      	ldr	r3, [pc, #296]	@ (8002090 <HAL_I2C_Mem_Read+0x22c>)
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 face 	bl	8002510 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001f74:	697b      	ldr	r3, [r7, #20]
 8001f76:	9300      	str	r3, [sp, #0]
 8001f78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	2104      	movs	r1, #4
 8001f7e:	68f8      	ldr	r0, [r7, #12]
 8001f80:	f000 f902 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8001f8a:	2301      	movs	r3, #1
 8001f8c:	e07c      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fa0:	1c5a      	adds	r2, r3, #1
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001faa:	3b01      	subs	r3, #1
 8001fac:	b29a      	uxth	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	b29a      	uxth	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d034      	beq.n	8002034 <HAL_I2C_Mem_Read+0x1d0>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d130      	bne.n	8002034 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	9300      	str	r3, [sp, #0]
 8001fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fd8:	2200      	movs	r2, #0
 8001fda:	2180      	movs	r1, #128	@ 0x80
 8001fdc:	68f8      	ldr	r0, [r7, #12]
 8001fde:	f000 f8d3 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d001      	beq.n	8001fec <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e04d      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ff0:	b29b      	uxth	r3, r3
 8001ff2:	2bff      	cmp	r3, #255	@ 0xff
 8001ff4:	d90e      	bls.n	8002014 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002000:	b2da      	uxtb	r2, r3
 8002002:	8979      	ldrh	r1, [r7, #10]
 8002004:	2300      	movs	r3, #0
 8002006:	9300      	str	r3, [sp, #0]
 8002008:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 fa7f 	bl	8002510 <I2C_TransferConfig>
 8002012:	e00f      	b.n	8002034 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002018:	b29a      	uxth	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002022:	b2da      	uxtb	r2, r3
 8002024:	8979      	ldrh	r1, [r7, #10]
 8002026:	2300      	movs	r3, #0
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f000 fa6e 	bl	8002510 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002038:	b29b      	uxth	r3, r3
 800203a:	2b00      	cmp	r3, #0
 800203c:	d19a      	bne.n	8001f74 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800203e:	697a      	ldr	r2, [r7, #20]
 8002040:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002042:	68f8      	ldr	r0, [r7, #12]
 8002044:	f000 f940 	bl	80022c8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002048:	4603      	mov	r3, r0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d001      	beq.n	8002052 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e01a      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2220      	movs	r2, #32
 8002058:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	6859      	ldr	r1, [r3, #4]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_I2C_Mem_Read+0x230>)
 8002066:	400b      	ands	r3, r1
 8002068:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	2220      	movs	r2, #32
 800206e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	2200      	movs	r2, #0
 8002076:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2200      	movs	r2, #0
 800207e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002082:	2300      	movs	r3, #0
 8002084:	e000      	b.n	8002088 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8002086:	2302      	movs	r3, #2
  }
}
 8002088:	4618      	mov	r0, r3
 800208a:	3718      	adds	r7, #24
 800208c:	46bd      	mov	sp, r7
 800208e:	bd80      	pop	{r7, pc}
 8002090:	80002400 	.word	0x80002400
 8002094:	fe00e800 	.word	0xfe00e800

08002098 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af02      	add	r7, sp, #8
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	4608      	mov	r0, r1
 80020a2:	4611      	mov	r1, r2
 80020a4:	461a      	mov	r2, r3
 80020a6:	4603      	mov	r3, r0
 80020a8:	817b      	strh	r3, [r7, #10]
 80020aa:	460b      	mov	r3, r1
 80020ac:	813b      	strh	r3, [r7, #8]
 80020ae:	4613      	mov	r3, r2
 80020b0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80020b2:	88fb      	ldrh	r3, [r7, #6]
 80020b4:	b2da      	uxtb	r2, r3
 80020b6:	8979      	ldrh	r1, [r7, #10]
 80020b8:	4b20      	ldr	r3, [pc, #128]	@ (800213c <I2C_RequestMemoryRead+0xa4>)
 80020ba:	9300      	str	r3, [sp, #0]
 80020bc:	2300      	movs	r3, #0
 80020be:	68f8      	ldr	r0, [r7, #12]
 80020c0:	f000 fa26 	bl	8002510 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	69b9      	ldr	r1, [r7, #24]
 80020c8:	68f8      	ldr	r0, [r7, #12]
 80020ca:	f000 f8b6 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d001      	beq.n	80020d8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	e02c      	b.n	8002132 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80020d8:	88fb      	ldrh	r3, [r7, #6]
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d105      	bne.n	80020ea <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80020de:	893b      	ldrh	r3, [r7, #8]
 80020e0:	b2da      	uxtb	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	629a      	str	r2, [r3, #40]	@ 0x28
 80020e8:	e015      	b.n	8002116 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80020ea:	893b      	ldrh	r3, [r7, #8]
 80020ec:	0a1b      	lsrs	r3, r3, #8
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	b2da      	uxtb	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80020f8:	69fa      	ldr	r2, [r7, #28]
 80020fa:	69b9      	ldr	r1, [r7, #24]
 80020fc:	68f8      	ldr	r0, [r7, #12]
 80020fe:	f000 f89c 	bl	800223a <I2C_WaitOnTXISFlagUntilTimeout>
 8002102:	4603      	mov	r3, r0
 8002104:	2b00      	cmp	r3, #0
 8002106:	d001      	beq.n	800210c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e012      	b.n	8002132 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800210c:	893b      	ldrh	r3, [r7, #8]
 800210e:	b2da      	uxtb	r2, r3
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	69bb      	ldr	r3, [r7, #24]
 800211c:	2200      	movs	r2, #0
 800211e:	2140      	movs	r1, #64	@ 0x40
 8002120:	68f8      	ldr	r0, [r7, #12]
 8002122:	f000 f831 	bl	8002188 <I2C_WaitOnFlagUntilTimeout>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d001      	beq.n	8002130 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e000      	b.n	8002132 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8002130:	2300      	movs	r3, #0
}
 8002132:	4618      	mov	r0, r3
 8002134:	3710      	adds	r7, #16
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	80002000 	.word	0x80002000

08002140 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b02      	cmp	r3, #2
 8002154:	d103      	bne.n	800215e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	2200      	movs	r2, #0
 800215c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	2b01      	cmp	r3, #1
 800216a:	d007      	beq.n	800217c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	699a      	ldr	r2, [r3, #24]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	619a      	str	r2, [r3, #24]
  }
}
 800217c:	bf00      	nop
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	603b      	str	r3, [r7, #0]
 8002194:	4613      	mov	r3, r2
 8002196:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002198:	e03b      	b.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800219a:	69ba      	ldr	r2, [r7, #24]
 800219c:	6839      	ldr	r1, [r7, #0]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f8d6 	bl	8002350 <I2C_IsErrorOccurred>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e041      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b4:	d02d      	beq.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021b6:	f7ff f8cf 	bl	8001358 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	683a      	ldr	r2, [r7, #0]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d302      	bcc.n	80021cc <I2C_WaitOnFlagUntilTimeout+0x44>
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d122      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	68bb      	ldr	r3, [r7, #8]
 80021d4:	4013      	ands	r3, r2
 80021d6:	68ba      	ldr	r2, [r7, #8]
 80021d8:	429a      	cmp	r2, r3
 80021da:	bf0c      	ite	eq
 80021dc:	2301      	moveq	r3, #1
 80021de:	2300      	movne	r3, #0
 80021e0:	b2db      	uxtb	r3, r3
 80021e2:	461a      	mov	r2, r3
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	429a      	cmp	r2, r3
 80021e8:	d113      	bne.n	8002212 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ee:	f043 0220 	orr.w	r2, r3, #32
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2220      	movs	r2, #32
 80021fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	2200      	movs	r2, #0
 8002202:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	2200      	movs	r2, #0
 800220a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e00f      	b.n	8002232 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	699a      	ldr	r2, [r3, #24]
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	4013      	ands	r3, r2
 800221c:	68ba      	ldr	r2, [r7, #8]
 800221e:	429a      	cmp	r2, r3
 8002220:	bf0c      	ite	eq
 8002222:	2301      	moveq	r3, #1
 8002224:	2300      	movne	r3, #0
 8002226:	b2db      	uxtb	r3, r3
 8002228:	461a      	mov	r2, r3
 800222a:	79fb      	ldrb	r3, [r7, #7]
 800222c:	429a      	cmp	r2, r3
 800222e:	d0b4      	beq.n	800219a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002230:	2300      	movs	r3, #0
}
 8002232:	4618      	mov	r0, r3
 8002234:	3710      	adds	r7, #16
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}

0800223a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b084      	sub	sp, #16
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002246:	e033      	b.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002248:	687a      	ldr	r2, [r7, #4]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	68f8      	ldr	r0, [r7, #12]
 800224e:	f000 f87f 	bl	8002350 <I2C_IsErrorOccurred>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d001      	beq.n	800225c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e031      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002262:	d025      	beq.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002264:	f7ff f878 	bl	8001358 <HAL_GetTick>
 8002268:	4602      	mov	r2, r0
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	1ad3      	subs	r3, r2, r3
 800226e:	68ba      	ldr	r2, [r7, #8]
 8002270:	429a      	cmp	r2, r3
 8002272:	d302      	bcc.n	800227a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d11a      	bne.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	699b      	ldr	r3, [r3, #24]
 8002280:	f003 0302 	and.w	r3, r3, #2
 8002284:	2b02      	cmp	r3, #2
 8002286:	d013      	beq.n	80022b0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800228c:	f043 0220 	orr.w	r2, r3, #32
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80022ac:	2301      	movs	r3, #1
 80022ae:	e007      	b.n	80022c0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	699b      	ldr	r3, [r3, #24]
 80022b6:	f003 0302 	and.w	r3, r3, #2
 80022ba:	2b02      	cmp	r3, #2
 80022bc:	d1c4      	bne.n	8002248 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022be:	2300      	movs	r3, #0
}
 80022c0:	4618      	mov	r0, r3
 80022c2:	3710      	adds	r7, #16
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b084      	sub	sp, #16
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022d4:	e02f      	b.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80022d6:	687a      	ldr	r2, [r7, #4]
 80022d8:	68b9      	ldr	r1, [r7, #8]
 80022da:	68f8      	ldr	r0, [r7, #12]
 80022dc:	f000 f838 	bl	8002350 <I2C_IsErrorOccurred>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e02d      	b.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ea:	f7ff f835 	bl	8001358 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	68ba      	ldr	r2, [r7, #8]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d302      	bcc.n	8002300 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d11a      	bne.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	699b      	ldr	r3, [r3, #24]
 8002306:	f003 0320 	and.w	r3, r3, #32
 800230a:	2b20      	cmp	r3, #32
 800230c:	d013      	beq.n	8002336 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002312:	f043 0220 	orr.w	r2, r3, #32
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2220      	movs	r2, #32
 800231e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	2200      	movs	r2, #0
 8002326:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e007      	b.n	8002346 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	699b      	ldr	r3, [r3, #24]
 800233c:	f003 0320 	and.w	r3, r3, #32
 8002340:	2b20      	cmp	r3, #32
 8002342:	d1c8      	bne.n	80022d6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002344:	2300      	movs	r3, #0
}
 8002346:	4618      	mov	r0, r3
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
	...

08002350 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08a      	sub	sp, #40	@ 0x28
 8002354:	af00      	add	r7, sp, #0
 8002356:	60f8      	str	r0, [r7, #12]
 8002358:	60b9      	str	r1, [r7, #8]
 800235a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800235c:	2300      	movs	r3, #0
 800235e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	699b      	ldr	r3, [r3, #24]
 8002368:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0310 	and.w	r3, r3, #16
 8002378:	2b00      	cmp	r3, #0
 800237a:	d068      	beq.n	800244e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	2210      	movs	r2, #16
 8002382:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002384:	e049      	b.n	800241a <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800238c:	d045      	beq.n	800241a <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800238e:	f7fe ffe3 	bl	8001358 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	1ad3      	subs	r3, r2, r3
 8002398:	68ba      	ldr	r2, [r7, #8]
 800239a:	429a      	cmp	r2, r3
 800239c:	d302      	bcc.n	80023a4 <I2C_IsErrorOccurred+0x54>
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d13a      	bne.n	800241a <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023ae:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80023b6:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80023c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80023c6:	d121      	bne.n	800240c <I2C_IsErrorOccurred+0xbc>
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80023ce:	d01d      	beq.n	800240c <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80023d0:	7cfb      	ldrb	r3, [r7, #19]
 80023d2:	2b20      	cmp	r3, #32
 80023d4:	d01a      	beq.n	800240c <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	685a      	ldr	r2, [r3, #4]
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80023e4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80023e6:	f7fe ffb7 	bl	8001358 <HAL_GetTick>
 80023ea:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80023ec:	e00e      	b.n	800240c <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80023ee:	f7fe ffb3 	bl	8001358 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	69fb      	ldr	r3, [r7, #28]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b19      	cmp	r3, #25
 80023fa:	d907      	bls.n	800240c <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f043 0320 	orr.w	r3, r3, #32
 8002402:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800240a:	e006      	b.n	800241a <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b20      	cmp	r3, #32
 8002418:	d1e9      	bne.n	80023ee <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b20      	cmp	r3, #32
 8002426:	d003      	beq.n	8002430 <I2C_IsErrorOccurred+0xe0>
 8002428:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0aa      	beq.n	8002386 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002430:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002434:	2b00      	cmp	r3, #0
 8002436:	d103      	bne.n	8002440 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2220      	movs	r2, #32
 800243e:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002440:	6a3b      	ldr	r3, [r7, #32]
 8002442:	f043 0304 	orr.w	r3, r3, #4
 8002446:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002456:	69bb      	ldr	r3, [r7, #24]
 8002458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800245c:	2b00      	cmp	r3, #0
 800245e:	d00b      	beq.n	8002478 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002460:	6a3b      	ldr	r3, [r7, #32]
 8002462:	f043 0301 	orr.w	r3, r3, #1
 8002466:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002470:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d00b      	beq.n	800249a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002482:	6a3b      	ldr	r3, [r7, #32]
 8002484:	f043 0308 	orr.w	r3, r3, #8
 8002488:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002492:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002494:	2301      	movs	r3, #1
 8002496:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d00b      	beq.n	80024bc <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
 80024a6:	f043 0302 	orr.w	r3, r3, #2
 80024aa:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80024bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d01c      	beq.n	80024fe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80024c4:	68f8      	ldr	r0, [r7, #12]
 80024c6:	f7ff fe3b 	bl	8002140 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	6859      	ldr	r1, [r3, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	4b0d      	ldr	r3, [pc, #52]	@ (800250c <I2C_IsErrorOccurred+0x1bc>)
 80024d6:	400b      	ands	r3, r1
 80024d8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80024de:	6a3b      	ldr	r3, [r7, #32]
 80024e0:	431a      	orrs	r2, r3
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2220      	movs	r2, #32
 80024ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80024fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002502:	4618      	mov	r0, r3
 8002504:	3728      	adds	r7, #40	@ 0x28
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	fe00e800 	.word	0xfe00e800

08002510 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002510:	b480      	push	{r7}
 8002512:	b087      	sub	sp, #28
 8002514:	af00      	add	r7, sp, #0
 8002516:	60f8      	str	r0, [r7, #12]
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	460b      	mov	r3, r1
 800251c:	817b      	strh	r3, [r7, #10]
 800251e:	4613      	mov	r3, r2
 8002520:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002522:	897b      	ldrh	r3, [r7, #10]
 8002524:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002528:	7a7b      	ldrb	r3, [r7, #9]
 800252a:	041b      	lsls	r3, r3, #16
 800252c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002530:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	4313      	orrs	r3, r2
 800253a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800253e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685a      	ldr	r2, [r3, #4]
 8002546:	6a3b      	ldr	r3, [r7, #32]
 8002548:	0d5b      	lsrs	r3, r3, #21
 800254a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800254e:	4b08      	ldr	r3, [pc, #32]	@ (8002570 <I2C_TransferConfig+0x60>)
 8002550:	430b      	orrs	r3, r1
 8002552:	43db      	mvns	r3, r3
 8002554:	ea02 0103 	and.w	r1, r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	697a      	ldr	r2, [r7, #20]
 800255e:	430a      	orrs	r2, r1
 8002560:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002562:	bf00      	nop
 8002564:	371c      	adds	r7, #28
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr
 800256e:	bf00      	nop
 8002570:	03ff63ff 	.word	0x03ff63ff

08002574 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
 800257c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002584:	b2db      	uxtb	r3, r3
 8002586:	2b20      	cmp	r3, #32
 8002588:	d138      	bne.n	80025fc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002590:	2b01      	cmp	r3, #1
 8002592:	d101      	bne.n	8002598 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002594:	2302      	movs	r3, #2
 8002596:	e032      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2201      	movs	r2, #1
 800259c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2224      	movs	r2, #36	@ 0x24
 80025a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f022 0201 	bic.w	r2, r2, #1
 80025b6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80025c6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	6819      	ldr	r1, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	430a      	orrs	r2, r1
 80025d6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f042 0201 	orr.w	r2, r2, #1
 80025e6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2220      	movs	r2, #32
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2200      	movs	r2, #0
 80025f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025f8:	2300      	movs	r3, #0
 80025fa:	e000      	b.n	80025fe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80025fc:	2302      	movs	r3, #2
  }
}
 80025fe:	4618      	mov	r0, r3
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800260a:	b480      	push	{r7}
 800260c:	b085      	sub	sp, #20
 800260e:	af00      	add	r7, sp, #0
 8002610:	6078      	str	r0, [r7, #4]
 8002612:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800261a:	b2db      	uxtb	r3, r3
 800261c:	2b20      	cmp	r3, #32
 800261e:	d139      	bne.n	8002694 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002626:	2b01      	cmp	r3, #1
 8002628:	d101      	bne.n	800262e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800262a:	2302      	movs	r3, #2
 800262c:	e033      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2201      	movs	r2, #1
 8002632:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2224      	movs	r2, #36	@ 0x24
 800263a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 0201 	bic.w	r2, r2, #1
 800264c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800265c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	021b      	lsls	r3, r3, #8
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	4313      	orrs	r3, r2
 8002666:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68fa      	ldr	r2, [r7, #12]
 800266e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0201 	orr.w	r2, r2, #1
 800267e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2220      	movs	r2, #32
 8002684:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2200      	movs	r2, #0
 800268c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002690:	2300      	movs	r3, #0
 8002692:	e000      	b.n	8002696 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002694:	2302      	movs	r3, #2
  }
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80026a8:	4b04      	ldr	r3, [pc, #16]	@ (80026bc <HAL_PWREx_GetVoltageRange+0x18>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	40007000 	.word	0x40007000

080026c0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80026c0:	b480      	push	{r7}
 80026c2:	b085      	sub	sp, #20
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026ce:	d130      	bne.n	8002732 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80026d0:	4b23      	ldr	r3, [pc, #140]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80026d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80026dc:	d038      	beq.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026de:	4b20      	ldr	r3, [pc, #128]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026e6:	4a1e      	ldr	r2, [pc, #120]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80026e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026ec:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026ee:	4b1d      	ldr	r3, [pc, #116]	@ (8002764 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2232      	movs	r2, #50	@ 0x32
 80026f4:	fb02 f303 	mul.w	r3, r2, r3
 80026f8:	4a1b      	ldr	r2, [pc, #108]	@ (8002768 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	0c9b      	lsrs	r3, r3, #18
 8002700:	3301      	adds	r3, #1
 8002702:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002704:	e002      	b.n	800270c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	3b01      	subs	r3, #1
 800270a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800270c:	4b14      	ldr	r3, [pc, #80]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800270e:	695b      	ldr	r3, [r3, #20]
 8002710:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002718:	d102      	bne.n	8002720 <HAL_PWREx_ControlVoltageScaling+0x60>
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f2      	bne.n	8002706 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002720:	4b0f      	ldr	r3, [pc, #60]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002728:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800272c:	d110      	bne.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800272e:	2303      	movs	r3, #3
 8002730:	e00f      	b.n	8002752 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8002732:	4b0b      	ldr	r3, [pc, #44]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800273a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800273e:	d007      	beq.n	8002750 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002740:	4b07      	ldr	r3, [pc, #28]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002748:	4a05      	ldr	r2, [pc, #20]	@ (8002760 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800274a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800274e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002750:	2300      	movs	r3, #0
}
 8002752:	4618      	mov	r0, r3
 8002754:	3714      	adds	r7, #20
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr
 800275e:	bf00      	nop
 8002760:	40007000 	.word	0x40007000
 8002764:	20000000 	.word	0x20000000
 8002768:	431bde83 	.word	0x431bde83

0800276c <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b088      	sub	sp, #32
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d101      	bne.n	800277e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e3ca      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800277e:	4b97      	ldr	r3, [pc, #604]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002780:	689b      	ldr	r3, [r3, #8]
 8002782:	f003 030c 	and.w	r3, r3, #12
 8002786:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002788:	4b94      	ldr	r3, [pc, #592]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0303 	and.w	r3, r3, #3
 8002790:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	2b00      	cmp	r3, #0
 800279c:	f000 80e4 	beq.w	8002968 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80027a0:	69bb      	ldr	r3, [r7, #24]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d007      	beq.n	80027b6 <HAL_RCC_OscConfig+0x4a>
 80027a6:	69bb      	ldr	r3, [r7, #24]
 80027a8:	2b0c      	cmp	r3, #12
 80027aa:	f040 808b 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	2b01      	cmp	r3, #1
 80027b2:	f040 8087 	bne.w	80028c4 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027b6:	4b89      	ldr	r3, [pc, #548]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 0302 	and.w	r3, r3, #2
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d005      	beq.n	80027ce <HAL_RCC_OscConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	699b      	ldr	r3, [r3, #24]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e3a2      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b82      	ldr	r3, [pc, #520]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f003 0308 	and.w	r3, r3, #8
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d004      	beq.n	80027e8 <HAL_RCC_OscConfig+0x7c>
 80027de:	4b7f      	ldr	r3, [pc, #508]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027e6:	e005      	b.n	80027f4 <HAL_RCC_OscConfig+0x88>
 80027e8:	4b7c      	ldr	r3, [pc, #496]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	091b      	lsrs	r3, r3, #4
 80027f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d223      	bcs.n	8002840 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6a1b      	ldr	r3, [r3, #32]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f000 fd55 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002802:	4603      	mov	r3, r0
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e383      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800280c:	4b73      	ldr	r3, [pc, #460]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	4a72      	ldr	r2, [pc, #456]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002812:	f043 0308 	orr.w	r3, r3, #8
 8002816:	6013      	str	r3, [r2, #0]
 8002818:	4b70      	ldr	r3, [pc, #448]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6a1b      	ldr	r3, [r3, #32]
 8002824:	496d      	ldr	r1, [pc, #436]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002826:	4313      	orrs	r3, r2
 8002828:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800282a:	4b6c      	ldr	r3, [pc, #432]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	69db      	ldr	r3, [r3, #28]
 8002836:	021b      	lsls	r3, r3, #8
 8002838:	4968      	ldr	r1, [pc, #416]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800283a:	4313      	orrs	r3, r2
 800283c:	604b      	str	r3, [r1, #4]
 800283e:	e025      	b.n	800288c <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002840:	4b66      	ldr	r3, [pc, #408]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a65      	ldr	r2, [pc, #404]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002846:	f043 0308 	orr.w	r3, r3, #8
 800284a:	6013      	str	r3, [r2, #0]
 800284c:	4b63      	ldr	r3, [pc, #396]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6a1b      	ldr	r3, [r3, #32]
 8002858:	4960      	ldr	r1, [pc, #384]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800285e:	4b5f      	ldr	r3, [pc, #380]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	69db      	ldr	r3, [r3, #28]
 800286a:	021b      	lsls	r3, r3, #8
 800286c:	495b      	ldr	r1, [pc, #364]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800286e:	4313      	orrs	r3, r2
 8002870:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	4618      	mov	r0, r3
 800287e:	f000 fd15 	bl	80032ac <RCC_SetFlashLatencyFromMSIRange>
 8002882:	4603      	mov	r3, r0
 8002884:	2b00      	cmp	r3, #0
 8002886:	d001      	beq.n	800288c <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002888:	2301      	movs	r3, #1
 800288a:	e343      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800288c:	f000 fc4a 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8002890:	4602      	mov	r2, r0
 8002892:	4b52      	ldr	r3, [pc, #328]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 030f 	and.w	r3, r3, #15
 800289c:	4950      	ldr	r1, [pc, #320]	@ (80029e0 <HAL_RCC_OscConfig+0x274>)
 800289e:	5ccb      	ldrb	r3, [r1, r3]
 80028a0:	f003 031f 	and.w	r3, r3, #31
 80028a4:	fa22 f303 	lsr.w	r3, r2, r3
 80028a8:	4a4e      	ldr	r2, [pc, #312]	@ (80029e4 <HAL_RCC_OscConfig+0x278>)
 80028aa:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80028ac:	4b4e      	ldr	r3, [pc, #312]	@ (80029e8 <HAL_RCC_OscConfig+0x27c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7fe fd01 	bl	80012b8 <HAL_InitTick>
 80028b6:	4603      	mov	r3, r0
 80028b8:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80028ba:	7bfb      	ldrb	r3, [r7, #15]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d052      	beq.n	8002966 <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80028c0:	7bfb      	ldrb	r3, [r7, #15]
 80028c2:	e327      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	699b      	ldr	r3, [r3, #24]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d032      	beq.n	8002932 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80028cc:	4b43      	ldr	r3, [pc, #268]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	4a42      	ldr	r2, [pc, #264]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028d2:	f043 0301 	orr.w	r3, r3, #1
 80028d6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80028d8:	f7fe fd3e 	bl	8001358 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028e0:	f7fe fd3a 	bl	8001358 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e310      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028f2:	4b3a      	ldr	r3, [pc, #232]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028fe:	4b37      	ldr	r3, [pc, #220]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a36      	ldr	r2, [pc, #216]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002904:	f043 0308 	orr.w	r3, r3, #8
 8002908:	6013      	str	r3, [r2, #0]
 800290a:	4b34      	ldr	r3, [pc, #208]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a1b      	ldr	r3, [r3, #32]
 8002916:	4931      	ldr	r1, [pc, #196]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800291c:	4b2f      	ldr	r3, [pc, #188]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	69db      	ldr	r3, [r3, #28]
 8002928:	021b      	lsls	r3, r3, #8
 800292a:	492c      	ldr	r1, [pc, #176]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800292c:	4313      	orrs	r3, r2
 800292e:	604b      	str	r3, [r1, #4]
 8002930:	e01a      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002932:	4b2a      	ldr	r3, [pc, #168]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a29      	ldr	r2, [pc, #164]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002938:	f023 0301 	bic.w	r3, r3, #1
 800293c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800293e:	f7fe fd0b 	bl	8001358 <HAL_GetTick>
 8002942:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002944:	e008      	b.n	8002958 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002946:	f7fe fd07 	bl	8001358 <HAL_GetTick>
 800294a:	4602      	mov	r2, r0
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	1ad3      	subs	r3, r2, r3
 8002950:	2b02      	cmp	r3, #2
 8002952:	d901      	bls.n	8002958 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8002954:	2303      	movs	r3, #3
 8002956:	e2dd      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002958:	4b20      	ldr	r3, [pc, #128]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0302 	and.w	r3, r3, #2
 8002960:	2b00      	cmp	r3, #0
 8002962:	d1f0      	bne.n	8002946 <HAL_RCC_OscConfig+0x1da>
 8002964:	e000      	b.n	8002968 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002966:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b00      	cmp	r3, #0
 8002972:	d074      	beq.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2b08      	cmp	r3, #8
 8002978:	d005      	beq.n	8002986 <HAL_RCC_OscConfig+0x21a>
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	2b0c      	cmp	r3, #12
 800297e:	d10e      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	2b03      	cmp	r3, #3
 8002984:	d10b      	bne.n	800299e <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002986:	4b15      	ldr	r3, [pc, #84]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d064      	beq.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d160      	bne.n	8002a5c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e2ba      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
 80029a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80029a6:	d106      	bne.n	80029b6 <HAL_RCC_OscConfig+0x24a>
 80029a8:	4b0c      	ldr	r3, [pc, #48]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a0b      	ldr	r2, [pc, #44]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029b2:	6013      	str	r3, [r2, #0]
 80029b4:	e026      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80029be:	d115      	bne.n	80029ec <HAL_RCC_OscConfig+0x280>
 80029c0:	4b06      	ldr	r3, [pc, #24]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a05      	ldr	r2, [pc, #20]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029c6:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80029ca:	6013      	str	r3, [r2, #0]
 80029cc:	4b03      	ldr	r3, [pc, #12]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	4a02      	ldr	r2, [pc, #8]	@ (80029dc <HAL_RCC_OscConfig+0x270>)
 80029d2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80029d6:	6013      	str	r3, [r2, #0]
 80029d8:	e014      	b.n	8002a04 <HAL_RCC_OscConfig+0x298>
 80029da:	bf00      	nop
 80029dc:	40021000 	.word	0x40021000
 80029e0:	08007d3c 	.word	0x08007d3c
 80029e4:	20000000 	.word	0x20000000
 80029e8:	20000004 	.word	0x20000004
 80029ec:	4ba0      	ldr	r3, [pc, #640]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	4a9f      	ldr	r2, [pc, #636]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029f6:	6013      	str	r3, [r2, #0]
 80029f8:	4b9d      	ldr	r3, [pc, #628]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a9c      	ldr	r2, [pc, #624]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 80029fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002a02:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d013      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a0c:	f7fe fca4 	bl	8001358 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a14:	f7fe fca0 	bl	8001358 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b64      	cmp	r3, #100	@ 0x64
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e276      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a26:	4b92      	ldr	r3, [pc, #584]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x2a8>
 8002a32:	e014      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a34:	f7fe fc90 	bl	8001358 <HAL_GetTick>
 8002a38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a3a:	e008      	b.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002a3c:	f7fe fc8c 	bl	8001358 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b64      	cmp	r3, #100	@ 0x64
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e262      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002a4e:	4b88      	ldr	r3, [pc, #544]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f0      	bne.n	8002a3c <HAL_RCC_OscConfig+0x2d0>
 8002a5a:	e000      	b.n	8002a5e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0302 	and.w	r3, r3, #2
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d060      	beq.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	2b04      	cmp	r3, #4
 8002a6e:	d005      	beq.n	8002a7c <HAL_RCC_OscConfig+0x310>
 8002a70:	69bb      	ldr	r3, [r7, #24]
 8002a72:	2b0c      	cmp	r3, #12
 8002a74:	d119      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	2b02      	cmp	r3, #2
 8002a7a:	d116      	bne.n	8002aaa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d005      	beq.n	8002a94 <HAL_RCC_OscConfig+0x328>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e23f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a94:	4b76      	ldr	r3, [pc, #472]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	061b      	lsls	r3, r3, #24
 8002aa2:	4973      	ldr	r1, [pc, #460]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002aa4:	4313      	orrs	r3, r2
 8002aa6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002aa8:	e040      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d023      	beq.n	8002afa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002abc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002abe:	f7fe fc4b 	bl	8001358 <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ac4:	e008      	b.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ac6:	f7fe fc47 	bl	8001358 <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d901      	bls.n	8002ad8 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002ad4:	2303      	movs	r3, #3
 8002ad6:	e21d      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002ad8:	4b65      	ldr	r3, [pc, #404]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d0f0      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	4b62      	ldr	r3, [pc, #392]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	061b      	lsls	r3, r3, #24
 8002af2:	495f      	ldr	r1, [pc, #380]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002af4:	4313      	orrs	r3, r2
 8002af6:	604b      	str	r3, [r1, #4]
 8002af8:	e018      	b.n	8002b2c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002afa:	4b5d      	ldr	r3, [pc, #372]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a5c      	ldr	r2, [pc, #368]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b06:	f7fe fc27 	bl	8001358 <HAL_GetTick>
 8002b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b0c:	e008      	b.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b0e:	f7fe fc23 	bl	8001358 <HAL_GetTick>
 8002b12:	4602      	mov	r2, r0
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	1ad3      	subs	r3, r2, r3
 8002b18:	2b02      	cmp	r3, #2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e1f9      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002b20:	4b53      	ldr	r3, [pc, #332]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d1f0      	bne.n	8002b0e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0308 	and.w	r3, r3, #8
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d03c      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	695b      	ldr	r3, [r3, #20]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d01c      	beq.n	8002b7a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b40:	4b4b      	ldr	r3, [pc, #300]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b42:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b46:	4a4a      	ldr	r2, [pc, #296]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b48:	f043 0301 	orr.w	r3, r3, #1
 8002b4c:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b50:	f7fe fc02 	bl	8001358 <HAL_GetTick>
 8002b54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b56:	e008      	b.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b58:	f7fe fbfe 	bl	8001358 <HAL_GetTick>
 8002b5c:	4602      	mov	r2, r0
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	1ad3      	subs	r3, r2, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e1d4      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002b6a:	4b41      	ldr	r3, [pc, #260]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d0ef      	beq.n	8002b58 <HAL_RCC_OscConfig+0x3ec>
 8002b78:	e01b      	b.n	8002bb2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b7c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b80:	4a3b      	ldr	r2, [pc, #236]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002b82:	f023 0301 	bic.w	r3, r3, #1
 8002b86:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b8a:	f7fe fbe5 	bl	8001358 <HAL_GetTick>
 8002b8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002b90:	e008      	b.n	8002ba4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b92:	f7fe fbe1 	bl	8001358 <HAL_GetTick>
 8002b96:	4602      	mov	r2, r0
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d901      	bls.n	8002ba4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e1b7      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002ba4:	4b32      	ldr	r3, [pc, #200]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002ba6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002baa:	f003 0302 	and.w	r3, r3, #2
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d1ef      	bne.n	8002b92 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	f000 80a6 	beq.w	8002d0c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002bc4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bc6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d10d      	bne.n	8002bec <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bd0:	4b27      	ldr	r3, [pc, #156]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002bd4:	4a26      	ldr	r2, [pc, #152]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002bda:	6593      	str	r3, [r2, #88]	@ 0x58
 8002bdc:	4b24      	ldr	r3, [pc, #144]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002bde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002be0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002be8:	2301      	movs	r3, #1
 8002bea:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002bec:	4b21      	ldr	r3, [pc, #132]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d118      	bne.n	8002c2a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002bf8:	4b1e      	ldr	r3, [pc, #120]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002bfe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002c02:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c04:	f7fe fba8 	bl	8001358 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c0c:	f7fe fba4 	bl	8001358 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e17a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002c1e:	4b15      	ldr	r3, [pc, #84]	@ (8002c74 <HAL_RCC_OscConfig+0x508>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d108      	bne.n	8002c44 <HAL_RCC_OscConfig+0x4d8>
 8002c32:	4b0f      	ldr	r3, [pc, #60]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c38:	4a0d      	ldr	r2, [pc, #52]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c3a:	f043 0301 	orr.w	r3, r3, #1
 8002c3e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c42:	e029      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b05      	cmp	r3, #5
 8002c4a:	d115      	bne.n	8002c78 <HAL_RCC_OscConfig+0x50c>
 8002c4c:	4b08      	ldr	r3, [pc, #32]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c52:	4a07      	ldr	r2, [pc, #28]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c54:	f043 0304 	orr.w	r3, r3, #4
 8002c58:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c5c:	4b04      	ldr	r3, [pc, #16]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c62:	4a03      	ldr	r2, [pc, #12]	@ (8002c70 <HAL_RCC_OscConfig+0x504>)
 8002c64:	f043 0301 	orr.w	r3, r3, #1
 8002c68:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c6c:	e014      	b.n	8002c98 <HAL_RCC_OscConfig+0x52c>
 8002c6e:	bf00      	nop
 8002c70:	40021000 	.word	0x40021000
 8002c74:	40007000 	.word	0x40007000
 8002c78:	4b9c      	ldr	r3, [pc, #624]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c7e:	4a9b      	ldr	r2, [pc, #620]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c80:	f023 0301 	bic.w	r3, r3, #1
 8002c84:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002c88:	4b98      	ldr	r3, [pc, #608]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c8e:	4a97      	ldr	r2, [pc, #604]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002c90:	f023 0304 	bic.w	r3, r3, #4
 8002c94:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d016      	beq.n	8002cce <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ca0:	f7fe fb5a 	bl	8001358 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ca6:	e00a      	b.n	8002cbe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ca8:	f7fe fb56 	bl	8001358 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cb6:	4293      	cmp	r3, r2
 8002cb8:	d901      	bls.n	8002cbe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002cba:	2303      	movs	r3, #3
 8002cbc:	e12a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cbe:	4b8b      	ldr	r3, [pc, #556]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0ed      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x53c>
 8002ccc:	e015      	b.n	8002cfa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cce:	f7fe fb43 	bl	8001358 <HAL_GetTick>
 8002cd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cd4:	e00a      	b.n	8002cec <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd6:	f7fe fb3f 	bl	8001358 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e113      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002cec:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1ed      	bne.n	8002cd6 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cfa:	7ffb      	ldrb	r3, [r7, #31]
 8002cfc:	2b01      	cmp	r3, #1
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d00:	4b7a      	ldr	r3, [pc, #488]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d04:	4a79      	ldr	r2, [pc, #484]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d06:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d0a:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80fe 	beq.w	8002f12 <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	f040 80d0 	bne.w	8002ec0 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002d20:	4b72      	ldr	r3, [pc, #456]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 0203 	and.w	r2, r3, #3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d130      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	3b01      	subs	r3, #1
 8002d40:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d127      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d50:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d11f      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d5c:	687a      	ldr	r2, [r7, #4]
 8002d5e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002d60:	2a07      	cmp	r2, #7
 8002d62:	bf14      	ite	ne
 8002d64:	2201      	movne	r2, #1
 8002d66:	2200      	moveq	r2, #0
 8002d68:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d113      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d78:	085b      	lsrs	r3, r3, #1
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d109      	bne.n	8002d96 <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d8c:	085b      	lsrs	r3, r3, #1
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d92:	429a      	cmp	r2, r3
 8002d94:	d06e      	beq.n	8002e74 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d069      	beq.n	8002e70 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002d9c:	4b53      	ldr	r3, [pc, #332]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d105      	bne.n	8002db4 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002da8:	4b50      	ldr	r3, [pc, #320]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e0ad      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002db8:	4b4c      	ldr	r3, [pc, #304]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	4a4b      	ldr	r2, [pc, #300]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dbe:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002dc2:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002dc4:	f7fe fac8 	bl	8001358 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fac4 	bl	8001358 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e09a      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002dde:	4b43      	ldr	r3, [pc, #268]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002dea:	4b40      	ldr	r3, [pc, #256]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002dec:	68da      	ldr	r2, [r3, #12]
 8002dee:	4b40      	ldr	r3, [pc, #256]	@ (8002ef0 <HAL_RCC_OscConfig+0x784>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002dfa:	3a01      	subs	r2, #1
 8002dfc:	0112      	lsls	r2, r2, #4
 8002dfe:	4311      	orrs	r1, r2
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002e04:	0212      	lsls	r2, r2, #8
 8002e06:	4311      	orrs	r1, r2
 8002e08:	687a      	ldr	r2, [r7, #4]
 8002e0a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002e0c:	0852      	lsrs	r2, r2, #1
 8002e0e:	3a01      	subs	r2, #1
 8002e10:	0552      	lsls	r2, r2, #21
 8002e12:	4311      	orrs	r1, r2
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002e18:	0852      	lsrs	r2, r2, #1
 8002e1a:	3a01      	subs	r2, #1
 8002e1c:	0652      	lsls	r2, r2, #25
 8002e1e:	4311      	orrs	r1, r2
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002e24:	0912      	lsrs	r2, r2, #4
 8002e26:	0452      	lsls	r2, r2, #17
 8002e28:	430a      	orrs	r2, r1
 8002e2a:	4930      	ldr	r1, [pc, #192]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e2c:	4313      	orrs	r3, r2
 8002e2e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002e30:	4b2e      	ldr	r3, [pc, #184]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a2d      	ldr	r2, [pc, #180]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e36:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e3a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e3c:	4b2b      	ldr	r3, [pc, #172]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e3e:	68db      	ldr	r3, [r3, #12]
 8002e40:	4a2a      	ldr	r2, [pc, #168]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e42:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e46:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002e48:	f7fe fa86 	bl	8001358 <HAL_GetTick>
 8002e4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e4e:	e008      	b.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e50:	f7fe fa82 	bl	8001358 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	2b02      	cmp	r3, #2
 8002e5c:	d901      	bls.n	8002e62 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e058      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e62:	4b22      	ldr	r3, [pc, #136]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d0f0      	beq.n	8002e50 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002e6e:	e050      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e04f      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e74:	4b1d      	ldr	r3, [pc, #116]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d148      	bne.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a19      	ldr	r2, [pc, #100]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e86:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e8a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	4a16      	ldr	r2, [pc, #88]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002e92:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002e96:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002e98:	f7fe fa5e 	bl	8001358 <HAL_GetTick>
 8002e9c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002e9e:	e008      	b.n	8002eb2 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea0:	f7fe fa5a 	bl	8001358 <HAL_GetTick>
 8002ea4:	4602      	mov	r2, r0
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	1ad3      	subs	r3, r2, r3
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d901      	bls.n	8002eb2 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e030      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002eb2:	4b0e      	ldr	r3, [pc, #56]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d0f0      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x734>
 8002ebe:	e028      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002ec0:	69bb      	ldr	r3, [r7, #24]
 8002ec2:	2b0c      	cmp	r3, #12
 8002ec4:	d023      	beq.n	8002f0e <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ec6:	4b09      	ldr	r3, [pc, #36]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	4a08      	ldr	r2, [pc, #32]	@ (8002eec <HAL_RCC_OscConfig+0x780>)
 8002ecc:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002ed0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fa41 	bl	8001358 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ed8:	e00c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eda:	f7fe fa3d 	bl	8001358 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d905      	bls.n	8002ef4 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e013      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
 8002eec:	40021000 	.word	0x40021000
 8002ef0:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ef4:	4b09      	ldr	r3, [pc, #36]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d1ec      	bne.n	8002eda <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002f00:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f02:	68da      	ldr	r2, [r3, #12]
 8002f04:	4905      	ldr	r1, [pc, #20]	@ (8002f1c <HAL_RCC_OscConfig+0x7b0>)
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_OscConfig+0x7b4>)
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60cb      	str	r3, [r1, #12]
 8002f0c:	e001      	b.n	8002f12 <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002f12:	2300      	movs	r3, #0
}
 8002f14:	4618      	mov	r0, r3
 8002f16:	3720      	adds	r7, #32
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	bd80      	pop	{r7, pc}
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	feeefffc 	.word	0xfeeefffc

08002f24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b084      	sub	sp, #16
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d101      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0e7      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002f38:	4b75      	ldr	r3, [pc, #468]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0307 	and.w	r3, r3, #7
 8002f40:	683a      	ldr	r2, [r7, #0]
 8002f42:	429a      	cmp	r2, r3
 8002f44:	d910      	bls.n	8002f68 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f46:	4b72      	ldr	r3, [pc, #456]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f023 0207 	bic.w	r2, r3, #7
 8002f4e:	4970      	ldr	r1, [pc, #448]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b6e      	ldr	r3, [pc, #440]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0307 	and.w	r3, r3, #7
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d001      	beq.n	8002f68 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f64:	2301      	movs	r3, #1
 8002f66:	e0cf      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f003 0302 	and.w	r3, r3, #2
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d010      	beq.n	8002f96 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	689a      	ldr	r2, [r3, #8]
 8002f78:	4b66      	ldr	r3, [pc, #408]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002f80:	429a      	cmp	r2, r3
 8002f82:	d908      	bls.n	8002f96 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f84:	4b63      	ldr	r3, [pc, #396]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	689b      	ldr	r3, [r3, #8]
 8002f90:	4960      	ldr	r1, [pc, #384]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d04c      	beq.n	800303c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	2b03      	cmp	r3, #3
 8002fa8:	d107      	bne.n	8002fba <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002faa:	4b5a      	ldr	r3, [pc, #360]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d121      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e0a6      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	2b02      	cmp	r3, #2
 8002fc0:	d107      	bne.n	8002fd2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002fc2:	4b54      	ldr	r3, [pc, #336]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d115      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	e09a      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d107      	bne.n	8002fea <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002fda:	4b4e      	ldr	r3, [pc, #312]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f003 0302 	and.w	r3, r3, #2
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d109      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002fe6:	2301      	movs	r3, #1
 8002fe8:	e08e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002fea:	4b4a      	ldr	r3, [pc, #296]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d101      	bne.n	8002ffa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	e086      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ffa:	4b46      	ldr	r3, [pc, #280]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 0203 	bic.w	r2, r3, #3
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	4943      	ldr	r1, [pc, #268]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003008:	4313      	orrs	r3, r2
 800300a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800300c:	f7fe f9a4 	bl	8001358 <HAL_GetTick>
 8003010:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003012:	e00a      	b.n	800302a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003014:	f7fe f9a0 	bl	8001358 <HAL_GetTick>
 8003018:	4602      	mov	r2, r0
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	1ad3      	subs	r3, r2, r3
 800301e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003022:	4293      	cmp	r3, r2
 8003024:	d901      	bls.n	800302a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8003026:	2303      	movs	r3, #3
 8003028:	e06e      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800302a:	4b3a      	ldr	r3, [pc, #232]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f003 020c 	and.w	r2, r3, #12
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	009b      	lsls	r3, r3, #2
 8003038:	429a      	cmp	r2, r3
 800303a:	d1eb      	bne.n	8003014 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f003 0302 	and.w	r3, r3, #2
 8003044:	2b00      	cmp	r3, #0
 8003046:	d010      	beq.n	800306a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689a      	ldr	r2, [r3, #8]
 800304c:	4b31      	ldr	r3, [pc, #196]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800304e:	689b      	ldr	r3, [r3, #8]
 8003050:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003054:	429a      	cmp	r2, r3
 8003056:	d208      	bcs.n	800306a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003058:	4b2e      	ldr	r3, [pc, #184]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	492b      	ldr	r1, [pc, #172]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 8003066:	4313      	orrs	r3, r2
 8003068:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800306a:	4b29      	ldr	r3, [pc, #164]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d210      	bcs.n	800309a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003078:	4b25      	ldr	r3, [pc, #148]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f023 0207 	bic.w	r2, r3, #7
 8003080:	4923      	ldr	r1, [pc, #140]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	4313      	orrs	r3, r2
 8003086:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003088:	4b21      	ldr	r3, [pc, #132]	@ (8003110 <HAL_RCC_ClockConfig+0x1ec>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0307 	and.w	r3, r3, #7
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	429a      	cmp	r2, r3
 8003094:	d001      	beq.n	800309a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8003096:	2301      	movs	r3, #1
 8003098:	e036      	b.n	8003108 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d008      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030a6:	4b1b      	ldr	r3, [pc, #108]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	4918      	ldr	r1, [pc, #96]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0308 	and.w	r3, r3, #8
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d009      	beq.n	80030d8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030c4:	4b13      	ldr	r3, [pc, #76]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030c6:	689b      	ldr	r3, [r3, #8]
 80030c8:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4910      	ldr	r1, [pc, #64]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80030d8:	f000 f824 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80030dc:	4602      	mov	r2, r0
 80030de:	4b0d      	ldr	r3, [pc, #52]	@ (8003114 <HAL_RCC_ClockConfig+0x1f0>)
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	091b      	lsrs	r3, r3, #4
 80030e4:	f003 030f 	and.w	r3, r3, #15
 80030e8:	490b      	ldr	r1, [pc, #44]	@ (8003118 <HAL_RCC_ClockConfig+0x1f4>)
 80030ea:	5ccb      	ldrb	r3, [r1, r3]
 80030ec:	f003 031f 	and.w	r3, r3, #31
 80030f0:	fa22 f303 	lsr.w	r3, r2, r3
 80030f4:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_RCC_ClockConfig+0x1f8>)
 80030f6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80030f8:	4b09      	ldr	r3, [pc, #36]	@ (8003120 <HAL_RCC_ClockConfig+0x1fc>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7fe f8db 	bl	80012b8 <HAL_InitTick>
 8003102:	4603      	mov	r3, r0
 8003104:	72fb      	strb	r3, [r7, #11]

  return status;
 8003106:	7afb      	ldrb	r3, [r7, #11]
}
 8003108:	4618      	mov	r0, r3
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	40022000 	.word	0x40022000
 8003114:	40021000 	.word	0x40021000
 8003118:	08007d3c 	.word	0x08007d3c
 800311c:	20000000 	.word	0x20000000
 8003120:	20000004 	.word	0x20000004

08003124 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003124:	b480      	push	{r7}
 8003126:	b089      	sub	sp, #36	@ 0x24
 8003128:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800312a:	2300      	movs	r3, #0
 800312c:	61fb      	str	r3, [r7, #28]
 800312e:	2300      	movs	r3, #0
 8003130:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003132:	4b3e      	ldr	r3, [pc, #248]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 030c 	and.w	r3, r3, #12
 800313a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800313c:	4b3b      	ldr	r3, [pc, #236]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800313e:	68db      	ldr	r3, [r3, #12]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d005      	beq.n	8003158 <HAL_RCC_GetSysClockFreq+0x34>
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0c      	cmp	r3, #12
 8003150:	d121      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d11e      	bne.n	8003196 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003158:	4b34      	ldr	r3, [pc, #208]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0308 	and.w	r3, r3, #8
 8003160:	2b00      	cmp	r3, #0
 8003162:	d107      	bne.n	8003174 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003164:	4b31      	ldr	r3, [pc, #196]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003166:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800316a:	0a1b      	lsrs	r3, r3, #8
 800316c:	f003 030f 	and.w	r3, r3, #15
 8003170:	61fb      	str	r3, [r7, #28]
 8003172:	e005      	b.n	8003180 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003174:	4b2d      	ldr	r3, [pc, #180]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	091b      	lsrs	r3, r3, #4
 800317a:	f003 030f 	and.w	r3, r3, #15
 800317e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003180:	4a2b      	ldr	r2, [pc, #172]	@ (8003230 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003188:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d10d      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003194:	e00a      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	2b04      	cmp	r3, #4
 800319a:	d102      	bne.n	80031a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800319c:	4b25      	ldr	r3, [pc, #148]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 800319e:	61bb      	str	r3, [r7, #24]
 80031a0:	e004      	b.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	2b08      	cmp	r3, #8
 80031a6:	d101      	bne.n	80031ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	2b0c      	cmp	r3, #12
 80031b0:	d134      	bne.n	800321c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80031b2:	4b1e      	ldr	r3, [pc, #120]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f003 0303 	and.w	r3, r3, #3
 80031ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0xa6>
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	2b03      	cmp	r3, #3
 80031c6:	d003      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0xac>
 80031c8:	e005      	b.n	80031d6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80031ca:	4b1a      	ldr	r3, [pc, #104]	@ (8003234 <HAL_RCC_GetSysClockFreq+0x110>)
 80031cc:	617b      	str	r3, [r7, #20]
      break;
 80031ce:	e005      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_RCC_GetSysClockFreq+0x114>)
 80031d2:	617b      	str	r3, [r7, #20]
      break;
 80031d4:	e002      	b.n	80031dc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	617b      	str	r3, [r7, #20]
      break;
 80031da:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80031dc:	4b13      	ldr	r3, [pc, #76]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	3301      	adds	r3, #1
 80031e8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80031ea:	4b10      	ldr	r3, [pc, #64]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	0a1b      	lsrs	r3, r3, #8
 80031f0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	fb03 f202 	mul.w	r2, r3, r2
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003200:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003202:	4b0a      	ldr	r3, [pc, #40]	@ (800322c <HAL_RCC_GetSysClockFreq+0x108>)
 8003204:	68db      	ldr	r3, [r3, #12]
 8003206:	0e5b      	lsrs	r3, r3, #25
 8003208:	f003 0303 	and.w	r3, r3, #3
 800320c:	3301      	adds	r3, #1
 800320e:	005b      	lsls	r3, r3, #1
 8003210:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8003212:	697a      	ldr	r2, [r7, #20]
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	fbb2 f3f3 	udiv	r3, r2, r3
 800321a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800321c:	69bb      	ldr	r3, [r7, #24]
}
 800321e:	4618      	mov	r0, r3
 8003220:	3724      	adds	r7, #36	@ 0x24
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
 800322a:	bf00      	nop
 800322c:	40021000 	.word	0x40021000
 8003230:	08007d54 	.word	0x08007d54
 8003234:	00f42400 	.word	0x00f42400
 8003238:	007a1200 	.word	0x007a1200

0800323c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800323c:	b480      	push	{r7}
 800323e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003240:	4b03      	ldr	r3, [pc, #12]	@ (8003250 <HAL_RCC_GetHCLKFreq+0x14>)
 8003242:	681b      	ldr	r3, [r3, #0]
}
 8003244:	4618      	mov	r0, r3
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	20000000 	.word	0x20000000

08003254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003258:	f7ff fff0 	bl	800323c <HAL_RCC_GetHCLKFreq>
 800325c:	4602      	mov	r2, r0
 800325e:	4b06      	ldr	r3, [pc, #24]	@ (8003278 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003260:	689b      	ldr	r3, [r3, #8]
 8003262:	0a1b      	lsrs	r3, r3, #8
 8003264:	f003 0307 	and.w	r3, r3, #7
 8003268:	4904      	ldr	r1, [pc, #16]	@ (800327c <HAL_RCC_GetPCLK1Freq+0x28>)
 800326a:	5ccb      	ldrb	r3, [r1, r3]
 800326c:	f003 031f 	and.w	r3, r3, #31
 8003270:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003274:	4618      	mov	r0, r3
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40021000 	.word	0x40021000
 800327c:	08007d4c 	.word	0x08007d4c

08003280 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003284:	f7ff ffda 	bl	800323c <HAL_RCC_GetHCLKFreq>
 8003288:	4602      	mov	r2, r0
 800328a:	4b06      	ldr	r3, [pc, #24]	@ (80032a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	0adb      	lsrs	r3, r3, #11
 8003290:	f003 0307 	and.w	r3, r3, #7
 8003294:	4904      	ldr	r1, [pc, #16]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003296:	5ccb      	ldrb	r3, [r1, r3]
 8003298:	f003 031f 	and.w	r3, r3, #31
 800329c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a0:	4618      	mov	r0, r3
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	40021000 	.word	0x40021000
 80032a8:	08007d4c 	.word	0x08007d4c

080032ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	b086      	sub	sp, #24
 80032b0:	af00      	add	r7, sp, #0
 80032b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80032b4:	2300      	movs	r3, #0
 80032b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80032b8:	4b2a      	ldr	r3, [pc, #168]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d003      	beq.n	80032cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80032c4:	f7ff f9ee 	bl	80026a4 <HAL_PWREx_GetVoltageRange>
 80032c8:	6178      	str	r0, [r7, #20]
 80032ca:	e014      	b.n	80032f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80032cc:	4b25      	ldr	r3, [pc, #148]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032d0:	4a24      	ldr	r2, [pc, #144]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80032d8:	4b22      	ldr	r3, [pc, #136]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032e0:	60fb      	str	r3, [r7, #12]
 80032e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80032e4:	f7ff f9de 	bl	80026a4 <HAL_PWREx_GetVoltageRange>
 80032e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80032ea:	4b1e      	ldr	r3, [pc, #120]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80032ee:	4a1d      	ldr	r2, [pc, #116]	@ (8003364 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80032f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032f6:	697b      	ldr	r3, [r7, #20]
 80032f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80032fc:	d10b      	bne.n	8003316 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2b80      	cmp	r3, #128	@ 0x80
 8003302:	d919      	bls.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2ba0      	cmp	r3, #160	@ 0xa0
 8003308:	d902      	bls.n	8003310 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800330a:	2302      	movs	r3, #2
 800330c:	613b      	str	r3, [r7, #16]
 800330e:	e013      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	e010      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	2b80      	cmp	r3, #128	@ 0x80
 800331a:	d902      	bls.n	8003322 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800331c:	2303      	movs	r3, #3
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	e00a      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2b80      	cmp	r3, #128	@ 0x80
 8003326:	d102      	bne.n	800332e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8003328:	2302      	movs	r3, #2
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e004      	b.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2b70      	cmp	r3, #112	@ 0x70
 8003332:	d101      	bne.n	8003338 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8003334:	2301      	movs	r3, #1
 8003336:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003338:	4b0b      	ldr	r3, [pc, #44]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f023 0207 	bic.w	r2, r3, #7
 8003340:	4909      	ldr	r1, [pc, #36]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	4313      	orrs	r3, r2
 8003346:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003348:	4b07      	ldr	r3, [pc, #28]	@ (8003368 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f003 0307 	and.w	r3, r3, #7
 8003350:	693a      	ldr	r2, [r7, #16]
 8003352:	429a      	cmp	r2, r3
 8003354:	d001      	beq.n	800335a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e000      	b.n	800335c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3718      	adds	r7, #24
 8003360:	46bd      	mov	sp, r7
 8003362:	bd80      	pop	{r7, pc}
 8003364:	40021000 	.word	0x40021000
 8003368:	40022000 	.word	0x40022000

0800336c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b086      	sub	sp, #24
 8003370:	af00      	add	r7, sp, #0
 8003372:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003374:	2300      	movs	r3, #0
 8003376:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003378:	2300      	movs	r3, #0
 800337a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003384:	2b00      	cmp	r3, #0
 8003386:	d041      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800338c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003390:	d02a      	beq.n	80033e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003392:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003396:	d824      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003398:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800339c:	d008      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800339e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80033a2:	d81e      	bhi.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_RCCEx_PeriphCLKConfig+0x52>
 80033a8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033ac:	d010      	beq.n	80033d0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80033ae:	e018      	b.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033b0:	4b86      	ldr	r3, [pc, #536]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	4a85      	ldr	r2, [pc, #532]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033ba:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033bc:	e015      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	3304      	adds	r3, #4
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f001 f829 	bl	800441c <RCCEx_PLLSAI1_Config>
 80033ca:	4603      	mov	r3, r0
 80033cc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033ce:	e00c      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	3320      	adds	r3, #32
 80033d4:	2100      	movs	r1, #0
 80033d6:	4618      	mov	r0, r3
 80033d8:	f001 f914 	bl	8004604 <RCCEx_PLLSAI2_Config>
 80033dc:	4603      	mov	r3, r0
 80033de:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80033e0:	e003      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	74fb      	strb	r3, [r7, #19]
      break;
 80033e6:	e000      	b.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80033e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80033f0:	4b76      	ldr	r3, [pc, #472]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f6:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80033fe:	4973      	ldr	r1, [pc, #460]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003400:	4313      	orrs	r3, r2
 8003402:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003406:	e001      	b.n	800340c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003408:	7cfb      	ldrb	r3, [r7, #19]
 800340a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003414:	2b00      	cmp	r3, #0
 8003416:	d041      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800341c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003420:	d02a      	beq.n	8003478 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8003422:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003426:	d824      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003428:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800342c:	d008      	beq.n	8003440 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800342e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003432:	d81e      	bhi.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8003434:	2b00      	cmp	r3, #0
 8003436:	d00a      	beq.n	800344e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8003438:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800343c:	d010      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800343e:	e018      	b.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003440:	4b62      	ldr	r3, [pc, #392]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	4a61      	ldr	r2, [pc, #388]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003446:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800344a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800344c:	e015      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3304      	adds	r3, #4
 8003452:	2100      	movs	r1, #0
 8003454:	4618      	mov	r0, r3
 8003456:	f000 ffe1 	bl	800441c <RCCEx_PLLSAI1_Config>
 800345a:	4603      	mov	r3, r0
 800345c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800345e:	e00c      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3320      	adds	r3, #32
 8003464:	2100      	movs	r1, #0
 8003466:	4618      	mov	r0, r3
 8003468:	f001 f8cc 	bl	8004604 <RCCEx_PLLSAI2_Config>
 800346c:	4603      	mov	r3, r0
 800346e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003470:	e003      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	74fb      	strb	r3, [r7, #19]
      break;
 8003476:	e000      	b.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003478:	bf00      	nop
    }

    if(ret == HAL_OK)
 800347a:	7cfb      	ldrb	r3, [r7, #19]
 800347c:	2b00      	cmp	r3, #0
 800347e:	d10b      	bne.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003480:	4b52      	ldr	r3, [pc, #328]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003482:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003486:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800348e:	494f      	ldr	r1, [pc, #316]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003490:	4313      	orrs	r3, r2
 8003492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8003496:	e001      	b.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003498:	7cfb      	ldrb	r3, [r7, #19]
 800349a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a0 	beq.w	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034aa:	2300      	movs	r3, #0
 80034ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034ae:	4b47      	ldr	r3, [pc, #284]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d101      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x152>
 80034ba:	2301      	movs	r3, #1
 80034bc:	e000      	b.n	80034c0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80034be:	2300      	movs	r3, #0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d00d      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	4b41      	ldr	r3, [pc, #260]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034c8:	4a40      	ldr	r2, [pc, #256]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034ce:	6593      	str	r3, [r2, #88]	@ 0x58
 80034d0:	4b3e      	ldr	r3, [pc, #248]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80034d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80034d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034d8:	60bb      	str	r3, [r7, #8]
 80034da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034dc:	2301      	movs	r3, #1
 80034de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80034e0:	4b3b      	ldr	r3, [pc, #236]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a3a      	ldr	r2, [pc, #232]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80034e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80034ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80034ec:	f7fd ff34 	bl	8001358 <HAL_GetTick>
 80034f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80034f2:	e009      	b.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034f4:	f7fd ff30 	bl	8001358 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d902      	bls.n	8003508 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	74fb      	strb	r3, [r7, #19]
        break;
 8003506:	e005      	b.n	8003514 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003508:	4b31      	ldr	r3, [pc, #196]	@ (80035d0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003510:	2b00      	cmp	r3, #0
 8003512:	d0ef      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8003514:	7cfb      	ldrb	r3, [r7, #19]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d15c      	bne.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800351a:	4b2c      	ldr	r3, [pc, #176]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800351c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003520:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003524:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01f      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003532:	697a      	ldr	r2, [r7, #20]
 8003534:	429a      	cmp	r2, r3
 8003536:	d019      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003538:	4b24      	ldr	r3, [pc, #144]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800353e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003542:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003544:	4b21      	ldr	r3, [pc, #132]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003546:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800354a:	4a20      	ldr	r2, [pc, #128]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800354c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003550:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003554:	4b1d      	ldr	r3, [pc, #116]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003556:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800355a:	4a1c      	ldr	r2, [pc, #112]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800355c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003560:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003564:	4a19      	ldr	r2, [pc, #100]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800356c:	697b      	ldr	r3, [r7, #20]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d016      	beq.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7fd feef 	bl	8001358 <HAL_GetTick>
 800357a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800357c:	e00b      	b.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800357e:	f7fd feeb 	bl	8001358 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	f241 3288 	movw	r2, #5000	@ 0x1388
 800358c:	4293      	cmp	r3, r2
 800358e:	d902      	bls.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003590:	2303      	movs	r3, #3
 8003592:	74fb      	strb	r3, [r7, #19]
            break;
 8003594:	e006      	b.n	80035a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003596:	4b0d      	ldr	r3, [pc, #52]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d0ec      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80035a4:	7cfb      	ldrb	r3, [r7, #19]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d10c      	bne.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80035aa:	4b08      	ldr	r3, [pc, #32]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80035b0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80035ba:	4904      	ldr	r1, [pc, #16]	@ (80035cc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80035bc:	4313      	orrs	r3, r2
 80035be:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80035c2:	e009      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80035c4:	7cfb      	ldrb	r3, [r7, #19]
 80035c6:	74bb      	strb	r3, [r7, #18]
 80035c8:	e006      	b.n	80035d8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80035ca:	bf00      	nop
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035d4:	7cfb      	ldrb	r3, [r7, #19]
 80035d6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035d8:	7c7b      	ldrb	r3, [r7, #17]
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d105      	bne.n	80035ea <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035de:	4b9e      	ldr	r3, [pc, #632]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035e2:	4a9d      	ldr	r2, [pc, #628]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80035e8:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f003 0301 	and.w	r3, r3, #1
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d00a      	beq.n	800360c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80035f6:	4b98      	ldr	r3, [pc, #608]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035fc:	f023 0203 	bic.w	r2, r3, #3
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003604:	4994      	ldr	r1, [pc, #592]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003606:	4313      	orrs	r3, r2
 8003608:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	f003 0302 	and.w	r3, r3, #2
 8003614:	2b00      	cmp	r3, #0
 8003616:	d00a      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003618:	4b8f      	ldr	r3, [pc, #572]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800361a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800361e:	f023 020c 	bic.w	r2, r3, #12
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003626:	498c      	ldr	r1, [pc, #560]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003628:	4313      	orrs	r3, r2
 800362a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0304 	and.w	r3, r3, #4
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00a      	beq.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800363a:	4b87      	ldr	r3, [pc, #540]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800363c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003640:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003648:	4983      	ldr	r1, [pc, #524]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800364a:	4313      	orrs	r3, r2
 800364c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0308 	and.w	r3, r3, #8
 8003658:	2b00      	cmp	r3, #0
 800365a:	d00a      	beq.n	8003672 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800365c:	4b7e      	ldr	r3, [pc, #504]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800365e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003662:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	497b      	ldr	r1, [pc, #492]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800366c:	4313      	orrs	r3, r2
 800366e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0310 	and.w	r3, r3, #16
 800367a:	2b00      	cmp	r3, #0
 800367c:	d00a      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800367e:	4b76      	ldr	r3, [pc, #472]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003680:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003684:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800368c:	4972      	ldr	r1, [pc, #456]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368e:	4313      	orrs	r3, r2
 8003690:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b00      	cmp	r3, #0
 800369e:	d00a      	beq.n	80036b6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80036a0:	4b6d      	ldr	r3, [pc, #436]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036a6:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036ae:	496a      	ldr	r1, [pc, #424]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036b0:	4313      	orrs	r3, r2
 80036b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00a      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80036c2:	4b65      	ldr	r3, [pc, #404]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036d0:	4961      	ldr	r1, [pc, #388]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d00a      	beq.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80036e4:	4b5c      	ldr	r3, [pc, #368]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80036ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80036f2:	4959      	ldr	r1, [pc, #356]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f4:	4313      	orrs	r3, r2
 80036f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003702:	2b00      	cmp	r3, #0
 8003704:	d00a      	beq.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003706:	4b54      	ldr	r3, [pc, #336]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003708:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800370c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003714:	4950      	ldr	r1, [pc, #320]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003716:	4313      	orrs	r3, r2
 8003718:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003724:	2b00      	cmp	r3, #0
 8003726:	d00a      	beq.n	800373e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003728:	4b4b      	ldr	r3, [pc, #300]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800372a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800372e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003736:	4948      	ldr	r1, [pc, #288]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003738:	4313      	orrs	r3, r2
 800373a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d00a      	beq.n	8003760 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800374a:	4b43      	ldr	r3, [pc, #268]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800374c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003750:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003758:	493f      	ldr	r1, [pc, #252]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375a:	4313      	orrs	r3, r2
 800375c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003768:	2b00      	cmp	r3, #0
 800376a:	d028      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800376c:	4b3a      	ldr	r3, [pc, #232]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003772:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800377a:	4937      	ldr	r1, [pc, #220]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377c:	4313      	orrs	r3, r2
 800377e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003786:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800378a:	d106      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800378c:	4b32      	ldr	r3, [pc, #200]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	4a31      	ldr	r2, [pc, #196]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003792:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003796:	60d3      	str	r3, [r2, #12]
 8003798:	e011      	b.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800379e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80037a2:	d10c      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	3304      	adds	r3, #4
 80037a8:	2101      	movs	r1, #1
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fe36 	bl	800441c <RCCEx_PLLSAI1_Config>
 80037b0:	4603      	mov	r3, r0
 80037b2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80037b4:	7cfb      	ldrb	r3, [r7, #19]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80037ba:	7cfb      	ldrb	r3, [r7, #19]
 80037bc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d028      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80037ca:	4b23      	ldr	r3, [pc, #140]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80037d0:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037d8:	491f      	ldr	r1, [pc, #124]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037da:	4313      	orrs	r3, r2
 80037dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037e4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80037e8:	d106      	bne.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80037ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037f0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80037f4:	60d3      	str	r3, [r2, #12]
 80037f6:	e011      	b.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003800:	d10c      	bne.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3304      	adds	r3, #4
 8003806:	2101      	movs	r1, #1
 8003808:	4618      	mov	r0, r3
 800380a:	f000 fe07 	bl	800441c <RCCEx_PLLSAI1_Config>
 800380e:	4603      	mov	r3, r0
 8003810:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003812:	7cfb      	ldrb	r3, [r7, #19]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d001      	beq.n	800381c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8003818:	7cfb      	ldrb	r3, [r7, #19]
 800381a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003824:	2b00      	cmp	r3, #0
 8003826:	d02b      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003828:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800382a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800382e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003836:	4908      	ldr	r1, [pc, #32]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003838:	4313      	orrs	r3, r2
 800383a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003842:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003846:	d109      	bne.n	800385c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003848:	4b03      	ldr	r3, [pc, #12]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4a02      	ldr	r2, [pc, #8]	@ (8003858 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800384e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003852:	60d3      	str	r3, [r2, #12]
 8003854:	e014      	b.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8003856:	bf00      	nop
 8003858:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003860:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003864:	d10c      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	3304      	adds	r3, #4
 800386a:	2101      	movs	r1, #1
 800386c:	4618      	mov	r0, r3
 800386e:	f000 fdd5 	bl	800441c <RCCEx_PLLSAI1_Config>
 8003872:	4603      	mov	r3, r0
 8003874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003876:	7cfb      	ldrb	r3, [r7, #19]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 800387c:	7cfb      	ldrb	r3, [r7, #19]
 800387e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003888:	2b00      	cmp	r3, #0
 800388a:	d02f      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800388c:	4b2b      	ldr	r3, [pc, #172]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800388e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003892:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800389a:	4928      	ldr	r1, [pc, #160]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800389c:	4313      	orrs	r3, r2
 800389e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038a6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80038aa:	d10d      	bne.n	80038c8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	3304      	adds	r3, #4
 80038b0:	2102      	movs	r1, #2
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 fdb2 	bl	800441c <RCCEx_PLLSAI1_Config>
 80038b8:	4603      	mov	r3, r0
 80038ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038bc:	7cfb      	ldrb	r3, [r7, #19]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d014      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038c2:	7cfb      	ldrb	r3, [r7, #19]
 80038c4:	74bb      	strb	r3, [r7, #18]
 80038c6:	e011      	b.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80038cc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80038d0:	d10c      	bne.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	3320      	adds	r3, #32
 80038d6:	2102      	movs	r1, #2
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fe93 	bl	8004604 <RCCEx_PLLSAI2_Config>
 80038de:	4603      	mov	r3, r0
 80038e0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80038e2:	7cfb      	ldrb	r3, [r7, #19]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80038e8:	7cfb      	ldrb	r3, [r7, #19]
 80038ea:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d00a      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80038f8:	4b10      	ldr	r3, [pc, #64]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80038fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80038fe:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003906:	490d      	ldr	r1, [pc, #52]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003908:	4313      	orrs	r3, r2
 800390a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003916:	2b00      	cmp	r3, #0
 8003918:	d00b      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800391a:	4b08      	ldr	r3, [pc, #32]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800391c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003920:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800392a:	4904      	ldr	r1, [pc, #16]	@ (800393c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8003932:	7cbb      	ldrb	r3, [r7, #18]
}
 8003934:	4618      	mov	r0, r3
 8003936:	3718      	adds	r7, #24
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40021000 	.word	0x40021000

08003940 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b088      	sub	sp, #32
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8003948:	2300      	movs	r3, #0
 800394a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003952:	d13e      	bne.n	80039d2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8003954:	4bb2      	ldr	r3, [pc, #712]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003956:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800395a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800395e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003966:	d028      	beq.n	80039ba <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800396e:	f200 8542 	bhi.w	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
 8003972:	693b      	ldr	r3, [r7, #16]
 8003974:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003978:	d005      	beq.n	8003986 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003980:	d00e      	beq.n	80039a0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 8003982:	f000 bd38 	b.w	80043f6 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003986:	4ba6      	ldr	r3, [pc, #664]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003988:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	f040 8532 	bne.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = LSE_VALUE;
 8003996:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800399a:	61fb      	str	r3, [r7, #28]
      break;
 800399c:	f000 bd2d 	b.w	80043fa <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80039a0:	4b9f      	ldr	r3, [pc, #636]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b02      	cmp	r3, #2
 80039ac:	f040 8527 	bne.w	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
          frequency = LSI_VALUE;
 80039b0:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80039b4:	61fb      	str	r3, [r7, #28]
      break;
 80039b6:	f000 bd22 	b.w	80043fe <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80039ba:	4b99      	ldr	r3, [pc, #612]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80039c6:	f040 851c 	bne.w	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
        frequency = HSE_VALUE / 32U;
 80039ca:	4b96      	ldr	r3, [pc, #600]	@ (8003c24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e4>)
 80039cc:	61fb      	str	r3, [r7, #28]
      break;
 80039ce:	f000 bd18 	b.w	8004402 <HAL_RCCEx_GetPeriphCLKFreq+0xac2>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80039d2:	4b93      	ldr	r3, [pc, #588]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039d4:	68db      	ldr	r3, [r3, #12]
 80039d6:	f003 0303 	and.w	r3, r3, #3
 80039da:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	2b03      	cmp	r3, #3
 80039e0:	d036      	beq.n	8003a50 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	2b03      	cmp	r3, #3
 80039e6:	d840      	bhi.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d003      	beq.n	80039f6 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d020      	beq.n	8003a36 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 80039f4:	e039      	b.n	8003a6a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80039f6:	4b8a      	ldr	r3, [pc, #552]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d116      	bne.n	8003a30 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003a02:	4b87      	ldr	r3, [pc, #540]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f003 0308 	and.w	r3, r3, #8
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d005      	beq.n	8003a1a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8003a0e:	4b84      	ldr	r3, [pc, #528]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	091b      	lsrs	r3, r3, #4
 8003a14:	f003 030f 	and.w	r3, r3, #15
 8003a18:	e005      	b.n	8003a26 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8003a1a:	4b81      	ldr	r3, [pc, #516]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003a20:	0a1b      	lsrs	r3, r3, #8
 8003a22:	f003 030f 	and.w	r3, r3, #15
 8003a26:	4a80      	ldr	r2, [pc, #512]	@ (8003c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>)
 8003a28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a2c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a2e:	e01f      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a30:	2300      	movs	r3, #0
 8003a32:	61bb      	str	r3, [r7, #24]
      break;
 8003a34:	e01c      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003a36:	4b7a      	ldr	r3, [pc, #488]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003a42:	d102      	bne.n	8003a4a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8003a44:	4b79      	ldr	r3, [pc, #484]	@ (8003c2c <HAL_RCCEx_GetPeriphCLKFreq+0x2ec>)
 8003a46:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a48:	e012      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	61bb      	str	r3, [r7, #24]
      break;
 8003a4e:	e00f      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003a50:	4b73      	ldr	r3, [pc, #460]	@ (8003c20 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a58:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003a5c:	d102      	bne.n	8003a64 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8003a5e:	4b74      	ldr	r3, [pc, #464]	@ (8003c30 <HAL_RCCEx_GetPeriphCLKFreq+0x2f0>)
 8003a60:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8003a62:	e005      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8003a64:	2300      	movs	r3, #0
 8003a66:	61bb      	str	r3, [r7, #24]
      break;
 8003a68:	e002      	b.n	8003a70 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	61bb      	str	r3, [r7, #24]
      break;
 8003a6e:	bf00      	nop
    }

    switch(PeriphClk)
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a76:	f000 80dd 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8003a80:	f200 84c1 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a8a:	f000 80d3 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003a94:	f200 84b7 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003a9e:	f000 835f 	beq.w	8004160 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003aa8:	f200 84ad 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ab2:	f000 847e 	beq.w	80043b2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003abc:	f200 84a3 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ac6:	f000 82cd 	beq.w	8004064 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ad0:	f200 8499 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ada:	f000 80ab 	beq.w	8003c34 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ae4:	f200 848f 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003aee:	f000 8090 	beq.w	8003c12 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af8:	f200 8485 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b02:	d07f      	beq.n	8003c04 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003b0a:	f200 847c 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b14:	f000 8403 	beq.w	800431e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b1e:	f200 8472 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b28:	f000 83af 	beq.w	800428a <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b32:	f200 8468 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b3c:	f000 8379 	beq.w	8004232 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b46:	f200 845e 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2b80      	cmp	r3, #128	@ 0x80
 8003b4e:	f000 8344 	beq.w	80041da <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2b80      	cmp	r3, #128	@ 0x80
 8003b56:	f200 8456 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b20      	cmp	r3, #32
 8003b5e:	d84b      	bhi.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	f000 844f 	beq.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	2b1f      	cmp	r3, #31
 8003b6e:	f200 844a 	bhi.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
 8003b72:	a201      	add	r2, pc, #4	@ (adr r2, 8003b78 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8003b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b78:	08003d61 	.word	0x08003d61
 8003b7c:	08003dcf 	.word	0x08003dcf
 8003b80:	08004407 	.word	0x08004407
 8003b84:	08003e63 	.word	0x08003e63
 8003b88:	08004407 	.word	0x08004407
 8003b8c:	08004407 	.word	0x08004407
 8003b90:	08004407 	.word	0x08004407
 8003b94:	08003ee9 	.word	0x08003ee9
 8003b98:	08004407 	.word	0x08004407
 8003b9c:	08004407 	.word	0x08004407
 8003ba0:	08004407 	.word	0x08004407
 8003ba4:	08004407 	.word	0x08004407
 8003ba8:	08004407 	.word	0x08004407
 8003bac:	08004407 	.word	0x08004407
 8003bb0:	08004407 	.word	0x08004407
 8003bb4:	08003f61 	.word	0x08003f61
 8003bb8:	08004407 	.word	0x08004407
 8003bbc:	08004407 	.word	0x08004407
 8003bc0:	08004407 	.word	0x08004407
 8003bc4:	08004407 	.word	0x08004407
 8003bc8:	08004407 	.word	0x08004407
 8003bcc:	08004407 	.word	0x08004407
 8003bd0:	08004407 	.word	0x08004407
 8003bd4:	08004407 	.word	0x08004407
 8003bd8:	08004407 	.word	0x08004407
 8003bdc:	08004407 	.word	0x08004407
 8003be0:	08004407 	.word	0x08004407
 8003be4:	08004407 	.word	0x08004407
 8003be8:	08004407 	.word	0x08004407
 8003bec:	08004407 	.word	0x08004407
 8003bf0:	08004407 	.word	0x08004407
 8003bf4:	08003fe3 	.word	0x08003fe3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2b40      	cmp	r3, #64	@ 0x40
 8003bfc:	f000 82c1 	beq.w	8004182 <HAL_RCCEx_GetPeriphCLKFreq+0x842>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8003c00:	f000 bc01 	b.w	8004406 <HAL_RCCEx_GetPeriphCLKFreq+0xac6>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8003c0a:	f000 fdd9 	bl	80047c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c0e:	61f8      	str	r0, [r7, #28]
      break;
 8003c10:	e3fa      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8003c12:	69b9      	ldr	r1, [r7, #24]
 8003c14:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8003c18:	f000 fdd2 	bl	80047c0 <RCCEx_GetSAIxPeriphCLKFreq>
 8003c1c:	61f8      	str	r0, [r7, #28]
      break;
 8003c1e:	e3f3      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003c20:	40021000 	.word	0x40021000
 8003c24:	0003d090 	.word	0x0003d090
 8003c28:	08007d54 	.word	0x08007d54
 8003c2c:	00f42400 	.word	0x00f42400
 8003c30:	007a1200 	.word	0x007a1200
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8003c34:	4ba9      	ldr	r3, [pc, #676]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c3a:	f003 6340 	and.w	r3, r3, #201326592	@ 0xc000000
 8003c3e:	613b      	str	r3, [r7, #16]
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c46:	d00c      	beq.n	8003c62 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003c4e:	d87f      	bhi.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
 8003c50:	693b      	ldr	r3, [r7, #16]
 8003c52:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003c56:	d04e      	beq.n	8003cf6 <HAL_RCCEx_GetPeriphCLKFreq+0x3b6>
 8003c58:	693b      	ldr	r3, [r7, #16]
 8003c5a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003c5e:	d01d      	beq.n	8003c9c <HAL_RCCEx_GetPeriphCLKFreq+0x35c>
          break;
 8003c60:	e076      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x410>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8003c62:	4b9e      	ldr	r3, [pc, #632]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f003 0302 	and.w	r3, r3, #2
 8003c6a:	2b02      	cmp	r3, #2
 8003c6c:	d172      	bne.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8003c6e:	4b9b      	ldr	r3, [pc, #620]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f003 0308 	and.w	r3, r3, #8
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d005      	beq.n	8003c86 <HAL_RCCEx_GetPeriphCLKFreq+0x346>
 8003c7a:	4b98      	ldr	r3, [pc, #608]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	091b      	lsrs	r3, r3, #4
 8003c80:	f003 030f 	and.w	r3, r3, #15
 8003c84:	e005      	b.n	8003c92 <HAL_RCCEx_GetPeriphCLKFreq+0x352>
 8003c86:	4b95      	ldr	r3, [pc, #596]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c88:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003c8c:	0a1b      	lsrs	r3, r3, #8
 8003c8e:	f003 030f 	and.w	r3, r3, #15
 8003c92:	4a93      	ldr	r2, [pc, #588]	@ (8003ee0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>)
 8003c94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c98:	61fb      	str	r3, [r7, #28]
          break;
 8003c9a:	e05b      	b.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8003c9c:	4b8f      	ldr	r3, [pc, #572]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ca4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ca8:	d156      	bne.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8003caa:	4b8c      	ldr	r3, [pc, #560]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cac:	68db      	ldr	r3, [r3, #12]
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003cb6:	d14f      	bne.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8003cb8:	4b88      	ldr	r3, [pc, #544]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	0a1b      	lsrs	r3, r3, #8
 8003cbe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cc2:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003cc4:	69bb      	ldr	r3, [r7, #24]
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	fb03 f202 	mul.w	r2, r3, r2
 8003ccc:	4b83      	ldr	r3, [pc, #524]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cce:	68db      	ldr	r3, [r3, #12]
 8003cd0:	091b      	lsrs	r3, r3, #4
 8003cd2:	f003 0307 	and.w	r3, r3, #7
 8003cd6:	3301      	adds	r3, #1
 8003cd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cdc:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8003cde:	4b7f      	ldr	r3, [pc, #508]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ce0:	68db      	ldr	r3, [r3, #12]
 8003ce2:	0d5b      	lsrs	r3, r3, #21
 8003ce4:	f003 0303 	and.w	r3, r3, #3
 8003ce8:	3301      	adds	r3, #1
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cf2:	61fb      	str	r3, [r7, #28]
          break;
 8003cf4:	e030      	b.n	8003d58 <HAL_RCCEx_GetPeriphCLKFreq+0x418>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8003cf6:	4b79      	ldr	r3, [pc, #484]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8003cfe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003d02:	d12b      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8003d04:	4b75      	ldr	r3, [pc, #468]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d06:	691b      	ldr	r3, [r3, #16]
 8003d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003d0c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003d10:	d124      	bne.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8003d12:	4b72      	ldr	r3, [pc, #456]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d14:	691b      	ldr	r3, [r3, #16]
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003d1c:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	68fa      	ldr	r2, [r7, #12]
 8003d22:	fb03 f202 	mul.w	r2, r3, r2
 8003d26:	4b6d      	ldr	r3, [pc, #436]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d28:	68db      	ldr	r3, [r3, #12]
 8003d2a:	091b      	lsrs	r3, r3, #4
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	3301      	adds	r3, #1
 8003d32:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d36:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8003d38:	4b68      	ldr	r3, [pc, #416]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	0d5b      	lsrs	r3, r3, #21
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4c:	61fb      	str	r3, [r7, #28]
          break;
 8003d4e:	e005      	b.n	8003d5c <HAL_RCCEx_GetPeriphCLKFreq+0x41c>
          break;
 8003d50:	bf00      	nop
 8003d52:	e359      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d54:	bf00      	nop
 8003d56:	e357      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d58:	bf00      	nop
 8003d5a:	e355      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003d5c:	bf00      	nop
        break;
 8003d5e:	e353      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8003d60:	4b5e      	ldr	r3, [pc, #376]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d66:	f003 0303 	and.w	r3, r3, #3
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	2b03      	cmp	r3, #3
 8003d70:	d827      	bhi.n	8003dc2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8003d72:	a201      	add	r2, pc, #4	@ (adr r2, 8003d78 <HAL_RCCEx_GetPeriphCLKFreq+0x438>)
 8003d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d78:	08003d89 	.word	0x08003d89
 8003d7c:	08003d91 	.word	0x08003d91
 8003d80:	08003d99 	.word	0x08003d99
 8003d84:	08003dad 	.word	0x08003dad
          frequency = HAL_RCC_GetPCLK2Freq();
 8003d88:	f7ff fa7a 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8003d8c:	61f8      	str	r0, [r7, #28]
          break;
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          frequency = HAL_RCC_GetSysClockFreq();
 8003d90:	f7ff f9c8 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003d94:	61f8      	str	r0, [r7, #28]
          break;
 8003d96:	e019      	b.n	8003dcc <HAL_RCCEx_GetPeriphCLKFreq+0x48c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003d98:	4b50      	ldr	r3, [pc, #320]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003da0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
            frequency = HSI_VALUE;
 8003da6:	4b4f      	ldr	r3, [pc, #316]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003da8:	61fb      	str	r3, [r7, #28]
          break;
 8003daa:	e00c      	b.n	8003dc6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003dac:	4b4b      	ldr	r3, [pc, #300]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b02      	cmp	r3, #2
 8003db8:	d107      	bne.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = LSE_VALUE;
 8003dba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003dbe:	61fb      	str	r3, [r7, #28]
          break;
 8003dc0:	e003      	b.n	8003dca <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          break;
 8003dc2:	bf00      	nop
 8003dc4:	e320      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dc6:	bf00      	nop
 8003dc8:	e31e      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003dca:	bf00      	nop
        break;
 8003dcc:	e31c      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8003dce:	4b43      	ldr	r3, [pc, #268]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003dd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003dd4:	f003 030c 	and.w	r3, r3, #12
 8003dd8:	613b      	str	r3, [r7, #16]
 8003dda:	693b      	ldr	r3, [r7, #16]
 8003ddc:	2b0c      	cmp	r3, #12
 8003dde:	d83a      	bhi.n	8003e56 <HAL_RCCEx_GetPeriphCLKFreq+0x516>
 8003de0:	a201      	add	r2, pc, #4	@ (adr r2, 8003de8 <HAL_RCCEx_GetPeriphCLKFreq+0x4a8>)
 8003de2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de6:	bf00      	nop
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e57 	.word	0x08003e57
 8003df0:	08003e57 	.word	0x08003e57
 8003df4:	08003e57 	.word	0x08003e57
 8003df8:	08003e25 	.word	0x08003e25
 8003dfc:	08003e57 	.word	0x08003e57
 8003e00:	08003e57 	.word	0x08003e57
 8003e04:	08003e57 	.word	0x08003e57
 8003e08:	08003e2d 	.word	0x08003e2d
 8003e0c:	08003e57 	.word	0x08003e57
 8003e10:	08003e57 	.word	0x08003e57
 8003e14:	08003e57 	.word	0x08003e57
 8003e18:	08003e41 	.word	0x08003e41
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e1c:	f7ff fa1a 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8003e20:	61f8      	str	r0, [r7, #28]
          break;
 8003e22:	e01d      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e24:	f7ff f97e 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003e28:	61f8      	str	r0, [r7, #28]
          break;
 8003e2a:	e019      	b.n	8003e60 <HAL_RCCEx_GetPeriphCLKFreq+0x520>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e38:	d10f      	bne.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
            frequency = HSI_VALUE;
 8003e3a:	4b2a      	ldr	r3, [pc, #168]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003e3c:	61fb      	str	r3, [r7, #28]
          break;
 8003e3e:	e00c      	b.n	8003e5a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003e40:	4b26      	ldr	r3, [pc, #152]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003e46:	f003 0302 	and.w	r3, r3, #2
 8003e4a:	2b02      	cmp	r3, #2
 8003e4c:	d107      	bne.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = LSE_VALUE;
 8003e4e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e52:	61fb      	str	r3, [r7, #28]
          break;
 8003e54:	e003      	b.n	8003e5e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          break;
 8003e56:	bf00      	nop
 8003e58:	e2d6      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e5a:	bf00      	nop
 8003e5c:	e2d4      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003e5e:	bf00      	nop
        break;
 8003e60:	e2d2      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003e64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003e68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003e6c:	613b      	str	r3, [r7, #16]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	2b30      	cmp	r3, #48	@ 0x30
 8003e72:	d021      	beq.n	8003eb8 <HAL_RCCEx_GetPeriphCLKFreq+0x578>
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	2b30      	cmp	r3, #48	@ 0x30
 8003e78:	d829      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d011      	beq.n	8003ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x564>
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	2b20      	cmp	r3, #32
 8003e84:	d823      	bhi.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d003      	beq.n	8003e94 <HAL_RCCEx_GetPeriphCLKFreq+0x554>
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b10      	cmp	r3, #16
 8003e90:	d004      	beq.n	8003e9c <HAL_RCCEx_GetPeriphCLKFreq+0x55c>
          break;
 8003e92:	e01c      	b.n	8003ece <HAL_RCCEx_GetPeriphCLKFreq+0x58e>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7ff f9de 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8003e98:	61f8      	str	r0, [r7, #28]
          break;
 8003e9a:	e01d      	b.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          frequency = HAL_RCC_GetSysClockFreq();
 8003e9c:	f7ff f942 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003ea0:	61f8      	str	r0, [r7, #28]
          break;
 8003ea2:	e019      	b.n	8003ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003ea4:	4b0d      	ldr	r3, [pc, #52]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eb0:	d10f      	bne.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
            frequency = HSI_VALUE;
 8003eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a4>)
 8003eb4:	61fb      	str	r3, [r7, #28]
          break;
 8003eb6:	e00c      	b.n	8003ed2 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003eb8:	4b08      	ldr	r3, [pc, #32]	@ (8003edc <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8003eba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ebe:	f003 0302 	and.w	r3, r3, #2
 8003ec2:	2b02      	cmp	r3, #2
 8003ec4:	d107      	bne.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = LSE_VALUE;
 8003ec6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003eca:	61fb      	str	r3, [r7, #28]
          break;
 8003ecc:	e003      	b.n	8003ed6 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          break;
 8003ece:	bf00      	nop
 8003ed0:	e29a      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed2:	bf00      	nop
 8003ed4:	e298      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003ed6:	bf00      	nop
        break;
 8003ed8:	e296      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	08007d54 	.word	0x08007d54
 8003ee4:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8003ee8:	4b9b      	ldr	r3, [pc, #620]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003eee:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003ef2:	613b      	str	r3, [r7, #16]
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	2bc0      	cmp	r3, #192	@ 0xc0
 8003ef8:	d021      	beq.n	8003f3e <HAL_RCCEx_GetPeriphCLKFreq+0x5fe>
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	2bc0      	cmp	r3, #192	@ 0xc0
 8003efe:	d829      	bhi.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	2b80      	cmp	r3, #128	@ 0x80
 8003f04:	d011      	beq.n	8003f2a <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	2b80      	cmp	r3, #128	@ 0x80
 8003f0a:	d823      	bhi.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d003      	beq.n	8003f1a <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
 8003f12:	693b      	ldr	r3, [r7, #16]
 8003f14:	2b40      	cmp	r3, #64	@ 0x40
 8003f16:	d004      	beq.n	8003f22 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
          break;
 8003f18:	e01c      	b.n	8003f54 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f1a:	f7ff f99b 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8003f1e:	61f8      	str	r0, [r7, #28]
          break;
 8003f20:	e01d      	b.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          frequency = HAL_RCC_GetSysClockFreq();
 8003f22:	f7ff f8ff 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003f26:	61f8      	str	r0, [r7, #28]
          break;
 8003f28:	e019      	b.n	8003f5e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003f2a:	4b8b      	ldr	r3, [pc, #556]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f36:	d10f      	bne.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
            frequency = HSI_VALUE;
 8003f38:	4b88      	ldr	r3, [pc, #544]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003f3a:	61fb      	str	r3, [r7, #28]
          break;
 8003f3c:	e00c      	b.n	8003f58 <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003f3e:	4b86      	ldr	r3, [pc, #536]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f44:	f003 0302 	and.w	r3, r3, #2
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d107      	bne.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
            frequency = LSE_VALUE;
 8003f4c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f50:	61fb      	str	r3, [r7, #28]
          break;
 8003f52:	e003      	b.n	8003f5c <HAL_RCCEx_GetPeriphCLKFreq+0x61c>
          break;
 8003f54:	bf00      	nop
 8003f56:	e257      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f58:	bf00      	nop
 8003f5a:	e255      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003f5c:	bf00      	nop
        break;
 8003f5e:	e253      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8003f60:	4b7d      	ldr	r3, [pc, #500]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f6a:	613b      	str	r3, [r7, #16]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f72:	d025      	beq.n	8003fc0 <HAL_RCCEx_GetPeriphCLKFreq+0x680>
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f7a:	d82c      	bhi.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f82:	d013      	beq.n	8003fac <HAL_RCCEx_GetPeriphCLKFreq+0x66c>
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003f8a:	d824      	bhi.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <HAL_RCCEx_GetPeriphCLKFreq+0x65c>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f98:	d004      	beq.n	8003fa4 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
          break;
 8003f9a:	e01c      	b.n	8003fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x696>
          frequency = HAL_RCC_GetPCLK1Freq();
 8003f9c:	f7ff f95a 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8003fa0:	61f8      	str	r0, [r7, #28]
          break;
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          frequency = HAL_RCC_GetSysClockFreq();
 8003fa4:	f7ff f8be 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8003fa8:	61f8      	str	r0, [r7, #28]
          break;
 8003faa:	e019      	b.n	8003fe0 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8003fac:	4b6a      	ldr	r3, [pc, #424]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003fb4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003fb8:	d10f      	bne.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
            frequency = HSI_VALUE;
 8003fba:	4b68      	ldr	r3, [pc, #416]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 8003fbc:	61fb      	str	r3, [r7, #28]
          break;
 8003fbe:	e00c      	b.n	8003fda <HAL_RCCEx_GetPeriphCLKFreq+0x69a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8003fc0:	4b65      	ldr	r3, [pc, #404]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d107      	bne.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
            frequency = LSE_VALUE;
 8003fce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003fd2:	61fb      	str	r3, [r7, #28]
          break;
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
          break;
 8003fd6:	bf00      	nop
 8003fd8:	e216      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fda:	bf00      	nop
 8003fdc:	e214      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8003fde:	bf00      	nop
        break;
 8003fe0:	e212      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8003fe2:	4b5d      	ldr	r3, [pc, #372]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8003fe4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003fe8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003fec:	613b      	str	r3, [r7, #16]
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ff4:	d025      	beq.n	8004042 <HAL_RCCEx_GetPeriphCLKFreq+0x702>
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003ffc:	d82c      	bhi.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004004:	d013      	beq.n	800402e <HAL_RCCEx_GetPeriphCLKFreq+0x6ee>
 8004006:	693b      	ldr	r3, [r7, #16]
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800400c:	d824      	bhi.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d004      	beq.n	800401e <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800401a:	d004      	beq.n	8004026 <HAL_RCCEx_GetPeriphCLKFreq+0x6e6>
          break;
 800401c:	e01c      	b.n	8004058 <HAL_RCCEx_GetPeriphCLKFreq+0x718>
          frequency = HAL_RCC_GetPCLK1Freq();
 800401e:	f7ff f919 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8004022:	61f8      	str	r0, [r7, #28]
          break;
 8004024:	e01d      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          frequency = HAL_RCC_GetSysClockFreq();
 8004026:	f7ff f87d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800402a:	61f8      	str	r0, [r7, #28]
          break;
 800402c:	e019      	b.n	8004062 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800402e:	4b4a      	ldr	r3, [pc, #296]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004036:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800403a:	d10f      	bne.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
            frequency = HSI_VALUE;
 800403c:	4b47      	ldr	r3, [pc, #284]	@ (800415c <HAL_RCCEx_GetPeriphCLKFreq+0x81c>)
 800403e:	61fb      	str	r3, [r7, #28]
          break;
 8004040:	e00c      	b.n	800405c <HAL_RCCEx_GetPeriphCLKFreq+0x71c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004042:	4b45      	ldr	r3, [pc, #276]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004044:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004048:	f003 0302 	and.w	r3, r3, #2
 800404c:	2b02      	cmp	r3, #2
 800404e:	d107      	bne.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
            frequency = LSE_VALUE;
 8004050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004054:	61fb      	str	r3, [r7, #28]
          break;
 8004056:	e003      	b.n	8004060 <HAL_RCCEx_GetPeriphCLKFreq+0x720>
          break;
 8004058:	bf00      	nop
 800405a:	e1d5      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800405c:	bf00      	nop
 800405e:	e1d3      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004060:	bf00      	nop
        break;
 8004062:	e1d1      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8004064:	4b3c      	ldr	r3, [pc, #240]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004066:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800406a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800406e:	613b      	str	r3, [r7, #16]
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8004076:	d00c      	beq.n	8004092 <HAL_RCCEx_GetPeriphCLKFreq+0x752>
 8004078:	693b      	ldr	r3, [r7, #16]
 800407a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800407e:	d864      	bhi.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004086:	d008      	beq.n	800409a <HAL_RCCEx_GetPeriphCLKFreq+0x75a>
 8004088:	693b      	ldr	r3, [r7, #16]
 800408a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800408e:	d030      	beq.n	80040f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7b2>
          break;
 8004090:	e05b      	b.n	800414a <HAL_RCCEx_GetPeriphCLKFreq+0x80a>
          frequency = HAL_RCC_GetSysClockFreq();
 8004092:	f7ff f847 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8004096:	61f8      	str	r0, [r7, #28]
          break;
 8004098:	e05c      	b.n	8004154 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 800409a:	4b2f      	ldr	r3, [pc, #188]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80040a2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80040a6:	d152      	bne.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
 80040a8:	4b2b      	ldr	r3, [pc, #172]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d04c      	beq.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80040b4:	4b28      	ldr	r3, [pc, #160]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040b6:	691b      	ldr	r3, [r3, #16]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80040be:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80040c0:	69bb      	ldr	r3, [r7, #24]
 80040c2:	68fa      	ldr	r2, [r7, #12]
 80040c4:	fb03 f202 	mul.w	r2, r3, r2
 80040c8:	4b23      	ldr	r3, [pc, #140]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040ca:	68db      	ldr	r3, [r3, #12]
 80040cc:	091b      	lsrs	r3, r3, #4
 80040ce:	f003 0307 	and.w	r3, r3, #7
 80040d2:	3301      	adds	r3, #1
 80040d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d8:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 80040da:	4b1f      	ldr	r3, [pc, #124]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	0e5b      	lsrs	r3, r3, #25
 80040e0:	f003 0303 	and.w	r3, r3, #3
 80040e4:	3301      	adds	r3, #1
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	69ba      	ldr	r2, [r7, #24]
 80040ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ee:	61fb      	str	r3, [r7, #28]
          break;
 80040f0:	e02d      	b.n	800414e <HAL_RCCEx_GetPeriphCLKFreq+0x80e>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 80040f2:	4b19      	ldr	r3, [pc, #100]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80040fa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80040fe:	d128      	bne.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 8004100:	4b15      	ldr	r3, [pc, #84]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004102:	695b      	ldr	r3, [r3, #20]
 8004104:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004108:	2b00      	cmp	r3, #0
 800410a:	d022      	beq.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800410c:	4b12      	ldr	r3, [pc, #72]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 800410e:	695b      	ldr	r3, [r3, #20]
 8004110:	0a1b      	lsrs	r3, r3, #8
 8004112:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004116:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004118:	69bb      	ldr	r3, [r7, #24]
 800411a:	68fa      	ldr	r2, [r7, #12]
 800411c:	fb03 f202 	mul.w	r2, r3, r2
 8004120:	4b0d      	ldr	r3, [pc, #52]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004122:	68db      	ldr	r3, [r3, #12]
 8004124:	091b      	lsrs	r3, r3, #4
 8004126:	f003 0307 	and.w	r3, r3, #7
 800412a:	3301      	adds	r3, #1
 800412c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004130:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8004132:	4b09      	ldr	r3, [pc, #36]	@ (8004158 <HAL_RCCEx_GetPeriphCLKFreq+0x818>)
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	0e5b      	lsrs	r3, r3, #25
 8004138:	f003 0303 	and.w	r3, r3, #3
 800413c:	3301      	adds	r3, #1
 800413e:	005b      	lsls	r3, r3, #1
 8004140:	69ba      	ldr	r2, [r7, #24]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	61fb      	str	r3, [r7, #28]
          break;
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
          break;
 800414a:	bf00      	nop
 800414c:	e15c      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800414e:	bf00      	nop
 8004150:	e15a      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004152:	bf00      	nop
        break;
 8004154:	e158      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
 8004156:	bf00      	nop
 8004158:	40021000 	.word	0x40021000
 800415c:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8004160:	4b9d      	ldr	r3, [pc, #628]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004162:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004166:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800416a:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d103      	bne.n	800417a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
          frequency = HAL_RCC_GetPCLK2Freq();
 8004172:	f7ff f885 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8004176:	61f8      	str	r0, [r7, #28]
        break;
 8004178:	e146      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          frequency = HAL_RCC_GetSysClockFreq();
 800417a:	f7fe ffd3 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800417e:	61f8      	str	r0, [r7, #28]
        break;
 8004180:	e142      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8004182:	4b95      	ldr	r3, [pc, #596]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004184:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004188:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004194:	d013      	beq.n	80041be <HAL_RCCEx_GetPeriphCLKFreq+0x87e>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800419c:	d819      	bhi.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d004      	beq.n	80041ae <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041aa:	d004      	beq.n	80041b6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
          break;
 80041ac:	e011      	b.n	80041d2 <HAL_RCCEx_GetPeriphCLKFreq+0x892>
          frequency = HAL_RCC_GetPCLK1Freq();
 80041ae:	f7ff f851 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80041b2:	61f8      	str	r0, [r7, #28]
          break;
 80041b4:	e010      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          frequency = HAL_RCC_GetSysClockFreq();
 80041b6:	f7fe ffb5 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 80041ba:	61f8      	str	r0, [r7, #28]
          break;
 80041bc:	e00c      	b.n	80041d8 <HAL_RCCEx_GetPeriphCLKFreq+0x898>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80041be:	4b86      	ldr	r3, [pc, #536]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041ca:	d104      	bne.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
            frequency = HSI_VALUE;
 80041cc:	4b83      	ldr	r3, [pc, #524]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80041ce:	61fb      	str	r3, [r7, #28]
          break;
 80041d0:	e001      	b.n	80041d6 <HAL_RCCEx_GetPeriphCLKFreq+0x896>
          break;
 80041d2:	bf00      	nop
 80041d4:	e118      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80041d6:	bf00      	nop
        break;
 80041d8:	e116      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 80041da:	4b7f      	ldr	r3, [pc, #508]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80041dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80041e0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80041e4:	613b      	str	r3, [r7, #16]
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041ec:	d013      	beq.n	8004216 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80041f4:	d819      	bhi.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
 80041f6:	693b      	ldr	r3, [r7, #16]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d004      	beq.n	8004206 <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
 80041fc:	693b      	ldr	r3, [r7, #16]
 80041fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004202:	d004      	beq.n	800420e <HAL_RCCEx_GetPeriphCLKFreq+0x8ce>
          break;
 8004204:	e011      	b.n	800422a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004206:	f7ff f825 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800420a:	61f8      	str	r0, [r7, #28]
          break;
 800420c:	e010      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          frequency = HAL_RCC_GetSysClockFreq();
 800420e:	f7fe ff89 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8004212:	61f8      	str	r0, [r7, #28]
          break;
 8004214:	e00c      	b.n	8004230 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004216:	4b70      	ldr	r3, [pc, #448]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800421e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004222:	d104      	bne.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
            frequency = HSI_VALUE;
 8004224:	4b6d      	ldr	r3, [pc, #436]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004226:	61fb      	str	r3, [r7, #28]
          break;
 8004228:	e001      	b.n	800422e <HAL_RCCEx_GetPeriphCLKFreq+0x8ee>
          break;
 800422a:	bf00      	nop
 800422c:	e0ec      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800422e:	bf00      	nop
        break;
 8004230:	e0ea      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8004232:	4b69      	ldr	r3, [pc, #420]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004238:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800423c:	613b      	str	r3, [r7, #16]
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004244:	d013      	beq.n	800426e <HAL_RCCEx_GetPeriphCLKFreq+0x92e>
 8004246:	693b      	ldr	r3, [r7, #16]
 8004248:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800424c:	d819      	bhi.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d004      	beq.n	800425e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800425a:	d004      	beq.n	8004266 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
          break;
 800425c:	e011      	b.n	8004282 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
          frequency = HAL_RCC_GetPCLK1Freq();
 800425e:	f7fe fff9 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8004262:	61f8      	str	r0, [r7, #28]
          break;
 8004264:	e010      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          frequency = HAL_RCC_GetSysClockFreq();
 8004266:	f7fe ff5d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800426a:	61f8      	str	r0, [r7, #28]
          break;
 800426c:	e00c      	b.n	8004288 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800426e:	4b5a      	ldr	r3, [pc, #360]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004276:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800427a:	d104      	bne.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
            frequency = HSI_VALUE;
 800427c:	4b57      	ldr	r3, [pc, #348]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 800427e:	61fb      	str	r3, [r7, #28]
          break;
 8004280:	e001      	b.n	8004286 <HAL_RCCEx_GetPeriphCLKFreq+0x946>
          break;
 8004282:	bf00      	nop
 8004284:	e0c0      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004286:	bf00      	nop
        break;
 8004288:	e0be      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 800428a:	4b53      	ldr	r3, [pc, #332]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800428c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004290:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 800429c:	d02c      	beq.n	80042f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80042a4:	d833      	bhi.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042ac:	d01a      	beq.n	80042e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a4>
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80042b4:	d82b      	bhi.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d004      	beq.n	80042c6 <HAL_RCCEx_GetPeriphCLKFreq+0x986>
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80042c2:	d004      	beq.n	80042ce <HAL_RCCEx_GetPeriphCLKFreq+0x98e>
          break;
 80042c4:	e023      	b.n	800430e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
          frequency = HAL_RCC_GetPCLK1Freq();
 80042c6:	f7fe ffc5 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80042ca:	61f8      	str	r0, [r7, #28]
          break;
 80042cc:	e026      	b.n	800431c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80042ce:	4b42      	ldr	r3, [pc, #264]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80042d4:	f003 0302 	and.w	r3, r3, #2
 80042d8:	2b02      	cmp	r3, #2
 80042da:	d11a      	bne.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
              frequency = LSI_VALUE;
 80042dc:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 80042e0:	61fb      	str	r3, [r7, #28]
          break;
 80042e2:	e016      	b.n	8004312 <HAL_RCCEx_GetPeriphCLKFreq+0x9d2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80042e4:	4b3c      	ldr	r3, [pc, #240]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042f0:	d111      	bne.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
            frequency = HSI_VALUE;
 80042f2:	4b3a      	ldr	r3, [pc, #232]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 80042f4:	61fb      	str	r3, [r7, #28]
          break;
 80042f6:	e00e      	b.n	8004316 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80042f8:	4b37      	ldr	r3, [pc, #220]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80042fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80042fe:	f003 0302 	and.w	r3, r3, #2
 8004302:	2b02      	cmp	r3, #2
 8004304:	d109      	bne.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
            frequency = LSE_VALUE;
 8004306:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800430a:	61fb      	str	r3, [r7, #28]
          break;
 800430c:	e005      	b.n	800431a <HAL_RCCEx_GetPeriphCLKFreq+0x9da>
          break;
 800430e:	bf00      	nop
 8004310:	e07a      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004312:	bf00      	nop
 8004314:	e078      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 8004316:	bf00      	nop
 8004318:	e076      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 800431a:	bf00      	nop
        break;
 800431c:	e074      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 800431e:	4b2e      	ldr	r3, [pc, #184]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004324:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004328:	613b      	str	r3, [r7, #16]
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004330:	d02c      	beq.n	800438c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
 8004332:	693b      	ldr	r3, [r7, #16]
 8004334:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004338:	d833      	bhi.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004340:	d01a      	beq.n	8004378 <HAL_RCCEx_GetPeriphCLKFreq+0xa38>
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004348:	d82b      	bhi.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d004      	beq.n	800435a <HAL_RCCEx_GetPeriphCLKFreq+0xa1a>
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004356:	d004      	beq.n	8004362 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
          break;
 8004358:	e023      	b.n	80043a2 <HAL_RCCEx_GetPeriphCLKFreq+0xa62>
          frequency = HAL_RCC_GetPCLK1Freq();
 800435a:	f7fe ff7b 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 800435e:	61f8      	str	r0, [r7, #28]
          break;
 8004360:	e026      	b.n	80043b0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8004362:	4b1d      	ldr	r3, [pc, #116]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 8004364:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004368:	f003 0302 	and.w	r3, r3, #2
 800436c:	2b02      	cmp	r3, #2
 800436e:	d11a      	bne.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
              frequency = LSI_VALUE;
 8004370:	f44f 43fa 	mov.w	r3, #32000	@ 0x7d00
 8004374:	61fb      	str	r3, [r7, #28]
          break;
 8004376:	e016      	b.n	80043a6 <HAL_RCCEx_GetPeriphCLKFreq+0xa66>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004378:	4b17      	ldr	r3, [pc, #92]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004380:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004384:	d111      	bne.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
            frequency = HSI_VALUE;
 8004386:	4b15      	ldr	r3, [pc, #84]	@ (80043dc <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>)
 8004388:	61fb      	str	r3, [r7, #28]
          break;
 800438a:	e00e      	b.n	80043aa <HAL_RCCEx_GetPeriphCLKFreq+0xa6a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800438c:	4b12      	ldr	r3, [pc, #72]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 800438e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004392:	f003 0302 	and.w	r3, r3, #2
 8004396:	2b02      	cmp	r3, #2
 8004398:	d109      	bne.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
            frequency = LSE_VALUE;
 800439a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800439e:	61fb      	str	r3, [r7, #28]
          break;
 80043a0:	e005      	b.n	80043ae <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
          break;
 80043a2:	bf00      	nop
 80043a4:	e030      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043a6:	bf00      	nop
 80043a8:	e02e      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043aa:	bf00      	nop
 80043ac:	e02c      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
          break;
 80043ae:	bf00      	nop
        break;
 80043b0:	e02a      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80043b2:	4b09      	ldr	r3, [pc, #36]	@ (80043d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>)
 80043b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043b8:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80043bc:	613b      	str	r3, [r7, #16]
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d004      	beq.n	80043ce <HAL_RCCEx_GetPeriphCLKFreq+0xa8e>
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043ca:	d009      	beq.n	80043e0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
          break;
 80043cc:	e012      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
          frequency = HAL_RCC_GetPCLK1Freq();
 80043ce:	f7fe ff41 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 80043d2:	61f8      	str	r0, [r7, #28]
          break;
 80043d4:	e00e      	b.n	80043f4 <HAL_RCCEx_GetPeriphCLKFreq+0xab4>
 80043d6:	bf00      	nop
 80043d8:	40021000 	.word	0x40021000
 80043dc:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80043e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004414 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ec:	d101      	bne.n	80043f2 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
            frequency = HSI_VALUE;
 80043ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004418 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80043f0:	61fb      	str	r3, [r7, #28]
          break;
 80043f2:	bf00      	nop
        break;
 80043f4:	e008      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043f6:	bf00      	nop
 80043f8:	e006      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043fa:	bf00      	nop
 80043fc:	e004      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 80043fe:	bf00      	nop
 8004400:	e002      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004402:	bf00      	nop
 8004404:	e000      	b.n	8004408 <HAL_RCCEx_GetPeriphCLKFreq+0xac8>
      break;
 8004406:	bf00      	nop
    }
  }

  return(frequency);
 8004408:	69fb      	ldr	r3, [r7, #28]
}
 800440a:	4618      	mov	r0, r3
 800440c:	3720      	adds	r7, #32
 800440e:	46bd      	mov	sp, r7
 8004410:	bd80      	pop	{r7, pc}
 8004412:	bf00      	nop
 8004414:	40021000 	.word	0x40021000
 8004418:	00f42400 	.word	0x00f42400

0800441c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
 8004424:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004426:	2300      	movs	r3, #0
 8004428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800442a:	4b75      	ldr	r3, [pc, #468]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800442c:	68db      	ldr	r3, [r3, #12]
 800442e:	f003 0303 	and.w	r3, r3, #3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d018      	beq.n	8004468 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8004436:	4b72      	ldr	r3, [pc, #456]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	f003 0203 	and.w	r2, r3, #3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d10d      	bne.n	8004462 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
       ||
 800444a:	2b00      	cmp	r3, #0
 800444c:	d009      	beq.n	8004462 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800444e:	4b6c      	ldr	r3, [pc, #432]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004450:	68db      	ldr	r3, [r3, #12]
 8004452:	091b      	lsrs	r3, r3, #4
 8004454:	f003 0307 	and.w	r3, r3, #7
 8004458:	1c5a      	adds	r2, r3, #1
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	685b      	ldr	r3, [r3, #4]
       ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d047      	beq.n	80044f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	73fb      	strb	r3, [r7, #15]
 8004466:	e044      	b.n	80044f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d018      	beq.n	80044a2 <RCCEx_PLLSAI1_Config+0x86>
 8004470:	2b03      	cmp	r3, #3
 8004472:	d825      	bhi.n	80044c0 <RCCEx_PLLSAI1_Config+0xa4>
 8004474:	2b01      	cmp	r3, #1
 8004476:	d002      	beq.n	800447e <RCCEx_PLLSAI1_Config+0x62>
 8004478:	2b02      	cmp	r3, #2
 800447a:	d009      	beq.n	8004490 <RCCEx_PLLSAI1_Config+0x74>
 800447c:	e020      	b.n	80044c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800447e:	4b60      	ldr	r3, [pc, #384]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f003 0302 	and.w	r3, r3, #2
 8004486:	2b00      	cmp	r3, #0
 8004488:	d11d      	bne.n	80044c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800448a:	2301      	movs	r3, #1
 800448c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800448e:	e01a      	b.n	80044c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004490:	4b5b      	ldr	r3, [pc, #364]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004498:	2b00      	cmp	r3, #0
 800449a:	d116      	bne.n	80044ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a0:	e013      	b.n	80044ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80044a2:	4b57      	ldr	r3, [pc, #348]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d10f      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80044ae:	4b54      	ldr	r3, [pc, #336]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d109      	bne.n	80044ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80044be:	e006      	b.n	80044ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	73fb      	strb	r3, [r7, #15]
      break;
 80044c4:	e004      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044c6:	bf00      	nop
 80044c8:	e002      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ca:	bf00      	nop
 80044cc:	e000      	b.n	80044d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80044ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80044d0:	7bfb      	ldrb	r3, [r7, #15]
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d10d      	bne.n	80044f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80044d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044d8:	68db      	ldr	r3, [r3, #12]
 80044da:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	685b      	ldr	r3, [r3, #4]
 80044e6:	3b01      	subs	r3, #1
 80044e8:	011b      	lsls	r3, r3, #4
 80044ea:	430b      	orrs	r3, r1
 80044ec:	4944      	ldr	r1, [pc, #272]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80044f2:	7bfb      	ldrb	r3, [r7, #15]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d17d      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80044f8:	4b41      	ldr	r3, [pc, #260]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a40      	ldr	r2, [pc, #256]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80044fe:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004502:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004504:	f7fc ff28 	bl	8001358 <HAL_GetTick>
 8004508:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800450a:	e009      	b.n	8004520 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800450c:	f7fc ff24 	bl	8001358 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d902      	bls.n	8004520 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	73fb      	strb	r3, [r7, #15]
        break;
 800451e:	e005      	b.n	800452c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8004520:	4b37      	ldr	r3, [pc, #220]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1ef      	bne.n	800450c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800452c:	7bfb      	ldrb	r3, [r7, #15]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d160      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d111      	bne.n	800455c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004538:	4b31      	ldr	r3, [pc, #196]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800453a:	691b      	ldr	r3, [r3, #16]
 800453c:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004540:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6892      	ldr	r2, [r2, #8]
 8004548:	0211      	lsls	r1, r2, #8
 800454a:	687a      	ldr	r2, [r7, #4]
 800454c:	68d2      	ldr	r2, [r2, #12]
 800454e:	0912      	lsrs	r2, r2, #4
 8004550:	0452      	lsls	r2, r2, #17
 8004552:	430a      	orrs	r2, r1
 8004554:	492a      	ldr	r1, [pc, #168]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004556:	4313      	orrs	r3, r2
 8004558:	610b      	str	r3, [r1, #16]
 800455a:	e027      	b.n	80045ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	2b01      	cmp	r3, #1
 8004560:	d112      	bne.n	8004588 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004562:	4b27      	ldr	r3, [pc, #156]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 800456a:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800456e:	687a      	ldr	r2, [r7, #4]
 8004570:	6892      	ldr	r2, [r2, #8]
 8004572:	0211      	lsls	r1, r2, #8
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	6912      	ldr	r2, [r2, #16]
 8004578:	0852      	lsrs	r2, r2, #1
 800457a:	3a01      	subs	r2, #1
 800457c:	0552      	lsls	r2, r2, #21
 800457e:	430a      	orrs	r2, r1
 8004580:	491f      	ldr	r1, [pc, #124]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 8004582:	4313      	orrs	r3, r2
 8004584:	610b      	str	r3, [r1, #16]
 8004586:	e011      	b.n	80045ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8004588:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8004590:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004594:	687a      	ldr	r2, [r7, #4]
 8004596:	6892      	ldr	r2, [r2, #8]
 8004598:	0211      	lsls	r1, r2, #8
 800459a:	687a      	ldr	r2, [r7, #4]
 800459c:	6952      	ldr	r2, [r2, #20]
 800459e:	0852      	lsrs	r2, r2, #1
 80045a0:	3a01      	subs	r2, #1
 80045a2:	0652      	lsls	r2, r2, #25
 80045a4:	430a      	orrs	r2, r1
 80045a6:	4916      	ldr	r1, [pc, #88]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045a8:	4313      	orrs	r3, r2
 80045aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80045ac:	4b14      	ldr	r3, [pc, #80]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a13      	ldr	r2, [pc, #76]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045b2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80045b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045b8:	f7fc fece 	bl	8001358 <HAL_GetTick>
 80045bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045be:	e009      	b.n	80045d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80045c0:	f7fc feca 	bl	8001358 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68bb      	ldr	r3, [r7, #8]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b02      	cmp	r3, #2
 80045cc:	d902      	bls.n	80045d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	73fb      	strb	r3, [r7, #15]
          break;
 80045d2:	e005      	b.n	80045e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80045d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d0ef      	beq.n	80045c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80045e0:	7bfb      	ldrb	r3, [r7, #15]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d106      	bne.n	80045f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80045e6:	4b06      	ldr	r3, [pc, #24]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045e8:	691a      	ldr	r2, [r3, #16]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	699b      	ldr	r3, [r3, #24]
 80045ee:	4904      	ldr	r1, [pc, #16]	@ (8004600 <RCCEx_PLLSAI1_Config+0x1e4>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000

08004604 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b084      	sub	sp, #16
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
 800460c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800460e:	2300      	movs	r3, #0
 8004610:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8004612:	4b6a      	ldr	r3, [pc, #424]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004614:	68db      	ldr	r3, [r3, #12]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	2b00      	cmp	r3, #0
 800461c:	d018      	beq.n	8004650 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800461e:	4b67      	ldr	r3, [pc, #412]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	f003 0203 	and.w	r2, r3, #3
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	429a      	cmp	r2, r3
 800462c:	d10d      	bne.n	800464a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
       ||
 8004632:	2b00      	cmp	r3, #0
 8004634:	d009      	beq.n	800464a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8004636:	4b61      	ldr	r3, [pc, #388]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	091b      	lsrs	r3, r3, #4
 800463c:	f003 0307 	and.w	r3, r3, #7
 8004640:	1c5a      	adds	r2, r3, #1
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
       ||
 8004646:	429a      	cmp	r2, r3
 8004648:	d047      	beq.n	80046da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	73fb      	strb	r3, [r7, #15]
 800464e:	e044      	b.n	80046da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	2b03      	cmp	r3, #3
 8004656:	d018      	beq.n	800468a <RCCEx_PLLSAI2_Config+0x86>
 8004658:	2b03      	cmp	r3, #3
 800465a:	d825      	bhi.n	80046a8 <RCCEx_PLLSAI2_Config+0xa4>
 800465c:	2b01      	cmp	r3, #1
 800465e:	d002      	beq.n	8004666 <RCCEx_PLLSAI2_Config+0x62>
 8004660:	2b02      	cmp	r3, #2
 8004662:	d009      	beq.n	8004678 <RCCEx_PLLSAI2_Config+0x74>
 8004664:	e020      	b.n	80046a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8004666:	4b55      	ldr	r3, [pc, #340]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d11d      	bne.n	80046ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004676:	e01a      	b.n	80046ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8004678:	4b50      	ldr	r3, [pc, #320]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004680:	2b00      	cmp	r3, #0
 8004682:	d116      	bne.n	80046b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004688:	e013      	b.n	80046b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800468a:	4b4c      	ldr	r3, [pc, #304]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10f      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8004696:	4b49      	ldr	r3, [pc, #292]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d109      	bne.n	80046b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80046a6:	e006      	b.n	80046b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      break;
 80046ac:	e004      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046ae:	bf00      	nop
 80046b0:	e002      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046b2:	bf00      	nop
 80046b4:	e000      	b.n	80046b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80046b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80046b8:	7bfb      	ldrb	r3, [r7, #15]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d10d      	bne.n	80046da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80046be:	4b3f      	ldr	r3, [pc, #252]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	6819      	ldr	r1, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	3b01      	subs	r3, #1
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	430b      	orrs	r3, r1
 80046d4:	4939      	ldr	r1, [pc, #228]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80046da:	7bfb      	ldrb	r3, [r7, #15]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d167      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80046e0:	4b36      	ldr	r3, [pc, #216]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a35      	ldr	r2, [pc, #212]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80046e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80046ec:	f7fc fe34 	bl	8001358 <HAL_GetTick>
 80046f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80046f2:	e009      	b.n	8004708 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80046f4:	f7fc fe30 	bl	8001358 <HAL_GetTick>
 80046f8:	4602      	mov	r2, r0
 80046fa:	68bb      	ldr	r3, [r7, #8]
 80046fc:	1ad3      	subs	r3, r2, r3
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d902      	bls.n	8004708 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8004702:	2303      	movs	r3, #3
 8004704:	73fb      	strb	r3, [r7, #15]
        break;
 8004706:	e005      	b.n	8004714 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8004708:	4b2c      	ldr	r3, [pc, #176]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1ef      	bne.n	80046f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8004714:	7bfb      	ldrb	r3, [r7, #15]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d14a      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d111      	bne.n	8004744 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004720:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004722:	695b      	ldr	r3, [r3, #20]
 8004724:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8004728:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	6892      	ldr	r2, [r2, #8]
 8004730:	0211      	lsls	r1, r2, #8
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	68d2      	ldr	r2, [r2, #12]
 8004736:	0912      	lsrs	r2, r2, #4
 8004738:	0452      	lsls	r2, r2, #17
 800473a:	430a      	orrs	r2, r1
 800473c:	491f      	ldr	r1, [pc, #124]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800473e:	4313      	orrs	r3, r2
 8004740:	614b      	str	r3, [r1, #20]
 8004742:	e011      	b.n	8004768 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8004744:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004746:	695b      	ldr	r3, [r3, #20]
 8004748:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800474c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8004750:	687a      	ldr	r2, [r7, #4]
 8004752:	6892      	ldr	r2, [r2, #8]
 8004754:	0211      	lsls	r1, r2, #8
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	6912      	ldr	r2, [r2, #16]
 800475a:	0852      	lsrs	r2, r2, #1
 800475c:	3a01      	subs	r2, #1
 800475e:	0652      	lsls	r2, r2, #25
 8004760:	430a      	orrs	r2, r1
 8004762:	4916      	ldr	r1, [pc, #88]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004764:	4313      	orrs	r3, r2
 8004766:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8004768:	4b14      	ldr	r3, [pc, #80]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	4a13      	ldr	r2, [pc, #76]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 800476e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004772:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004774:	f7fc fdf0 	bl	8001358 <HAL_GetTick>
 8004778:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800477a:	e009      	b.n	8004790 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800477c:	f7fc fdec 	bl	8001358 <HAL_GetTick>
 8004780:	4602      	mov	r2, r0
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	1ad3      	subs	r3, r2, r3
 8004786:	2b02      	cmp	r3, #2
 8004788:	d902      	bls.n	8004790 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 800478a:	2303      	movs	r3, #3
 800478c:	73fb      	strb	r3, [r7, #15]
          break;
 800478e:	e005      	b.n	800479c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8004790:	4b0a      	ldr	r3, [pc, #40]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0ef      	beq.n	800477c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 800479c:	7bfb      	ldrb	r3, [r7, #15]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d106      	bne.n	80047b0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80047a2:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047a4:	695a      	ldr	r2, [r3, #20]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	695b      	ldr	r3, [r3, #20]
 80047aa:	4904      	ldr	r1, [pc, #16]	@ (80047bc <RCCEx_PLLSAI2_Config+0x1b8>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80047b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3710      	adds	r7, #16
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}
 80047ba:	bf00      	nop
 80047bc:	40021000 	.word	0x40021000

080047c0 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b089      	sub	sp, #36	@ 0x24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 80047ce:	2300      	movs	r3, #0
 80047d0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80047dc:	d10c      	bne.n	80047f8 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80047de:	4b6e      	ldr	r3, [pc, #440]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80047e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80047e4:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80047e8:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 80047ea:	69bb      	ldr	r3, [r7, #24]
 80047ec:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80047f0:	d112      	bne.n	8004818 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80047f2:	4b6a      	ldr	r3, [pc, #424]	@ (800499c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 80047f4:	61fb      	str	r3, [r7, #28]
 80047f6:	e00f      	b.n	8004818 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80047fe:	d10b      	bne.n	8004818 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8004800:	4b65      	ldr	r3, [pc, #404]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004802:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004806:	f003 7340 	and.w	r3, r3, #50331648	@ 0x3000000
 800480a:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 800480c:	69bb      	ldr	r3, [r7, #24]
 800480e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8004812:	d101      	bne.n	8004818 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8004814:	4b61      	ldr	r3, [pc, #388]	@ (800499c <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 8004816:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	2b00      	cmp	r3, #0
 800481c:	f040 80b4 	bne.w	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800482a:	d003      	beq.n	8004834 <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004832:	d135      	bne.n	80048a0 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004834:	4b58      	ldr	r3, [pc, #352]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800483c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8004840:	f040 80a1 	bne.w	8004986 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 8004844:	4b54      	ldr	r3, [pc, #336]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004846:	68db      	ldr	r3, [r3, #12]
 8004848:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800484c:	2b00      	cmp	r3, #0
 800484e:	f000 809a 	beq.w	8004986 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004852:	4b51      	ldr	r3, [pc, #324]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	091b      	lsrs	r3, r3, #4
 8004858:	f003 0307 	and.w	r3, r3, #7
 800485c:	3301      	adds	r3, #1
 800485e:	693a      	ldr	r2, [r7, #16]
 8004860:	fbb2 f3f3 	udiv	r3, r2, r3
 8004864:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004866:	4b4c      	ldr	r3, [pc, #304]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004868:	68db      	ldr	r3, [r3, #12]
 800486a:	0a1b      	lsrs	r3, r3, #8
 800486c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004870:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 8004872:	697b      	ldr	r3, [r7, #20]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8004878:	4b47      	ldr	r3, [pc, #284]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004880:	2b00      	cmp	r3, #0
 8004882:	d002      	beq.n	800488a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 8004884:	2311      	movs	r3, #17
 8004886:	617b      	str	r3, [r7, #20]
 8004888:	e001      	b.n	800488e <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 800488a:	2307      	movs	r3, #7
 800488c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800489e:	e072      	b.n	8004986 <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d133      	bne.n	800490e <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80048a6:	4b3c      	ldr	r3, [pc, #240]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80048ae:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80048b2:	d169      	bne.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80048b4:	4b38      	ldr	r3, [pc, #224]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048b6:	691b      	ldr	r3, [r3, #16]
 80048b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d063      	beq.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80048c0:	4b35      	ldr	r3, [pc, #212]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048c2:	68db      	ldr	r3, [r3, #12]
 80048c4:	091b      	lsrs	r3, r3, #4
 80048c6:	f003 0307 	and.w	r3, r3, #7
 80048ca:	3301      	adds	r3, #1
 80048cc:	693a      	ldr	r2, [r7, #16]
 80048ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80048d2:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80048d4:	4b30      	ldr	r3, [pc, #192]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048d6:	691b      	ldr	r3, [r3, #16]
 80048d8:	0a1b      	lsrs	r3, r3, #8
 80048da:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80048de:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d10a      	bne.n	80048fc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 80048e6:	4b2c      	ldr	r3, [pc, #176]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80048e8:	691b      	ldr	r3, [r3, #16]
 80048ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 80048f2:	2311      	movs	r3, #17
 80048f4:	617b      	str	r3, [r7, #20]
 80048f6:	e001      	b.n	80048fc <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 80048f8:	2307      	movs	r3, #7
 80048fa:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	fb03 f202 	mul.w	r2, r3, r2
 8004904:	697b      	ldr	r3, [r7, #20]
 8004906:	fbb2 f3f3 	udiv	r3, r2, r3
 800490a:	61fb      	str	r3, [r7, #28]
 800490c:	e03c      	b.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004914:	d003      	beq.n	800491e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800491c:	d134      	bne.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 800491e:	4b1e      	ldr	r3, [pc, #120]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004926:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800492a:	d12d      	bne.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 800492c:	4b1a      	ldr	r3, [pc, #104]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800492e:	695b      	ldr	r3, [r3, #20]
 8004930:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004934:	2b00      	cmp	r3, #0
 8004936:	d027      	beq.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004938:	4b17      	ldr	r3, [pc, #92]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800493a:	68db      	ldr	r3, [r3, #12]
 800493c:	091b      	lsrs	r3, r3, #4
 800493e:	f003 0307 	and.w	r3, r3, #7
 8004942:	3301      	adds	r3, #1
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	fbb2 f3f3 	udiv	r3, r2, r3
 800494a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800494c:	4b12      	ldr	r3, [pc, #72]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800494e:	695b      	ldr	r3, [r3, #20]
 8004950:	0a1b      	lsrs	r3, r3, #8
 8004952:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004956:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 8004958:	697b      	ldr	r3, [r7, #20]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d10a      	bne.n	8004974 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 800495e:	4b0e      	ldr	r3, [pc, #56]	@ (8004998 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004966:	2b00      	cmp	r3, #0
 8004968:	d002      	beq.n	8004970 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 800496a:	2311      	movs	r3, #17
 800496c:	617b      	str	r3, [r7, #20]
 800496e:	e001      	b.n	8004974 <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 8004970:	2307      	movs	r3, #7
 8004972:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	68fa      	ldr	r2, [r7, #12]
 8004978:	fb03 f202 	mul.w	r2, r3, r2
 800497c:	697b      	ldr	r3, [r7, #20]
 800497e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e000      	b.n	8004988 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 8004986:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 8004988:	69fb      	ldr	r3, [r7, #28]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3724      	adds	r7, #36	@ 0x24
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	40021000 	.word	0x40021000
 800499c:	001fff68 	.word	0x001fff68

080049a0 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	607a      	str	r2, [r7, #4]
 80049ac:	603b      	str	r3, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 80049ae:	68bb      	ldr	r3, [r7, #8]
 80049b0:	2b02      	cmp	r3, #2
 80049b2:	d904      	bls.n	80049be <HAL_SAI_InitProtocol+0x1e>
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	3b03      	subs	r3, #3
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d812      	bhi.n	80049e2 <HAL_SAI_InitProtocol+0x42>
 80049bc:	e008      	b.n	80049d0 <HAL_SAI_InitProtocol+0x30>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	68b9      	ldr	r1, [r7, #8]
 80049c4:	68f8      	ldr	r0, [r7, #12]
 80049c6:	f000 fba3 	bl	8005110 <SAI_InitI2S>
 80049ca:	4603      	mov	r3, r0
 80049cc:	75fb      	strb	r3, [r7, #23]
      break;
 80049ce:	e00b      	b.n	80049e8 <HAL_SAI_InitProtocol+0x48>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	687a      	ldr	r2, [r7, #4]
 80049d4:	68b9      	ldr	r1, [r7, #8]
 80049d6:	68f8      	ldr	r0, [r7, #12]
 80049d8:	f000 fc4c 	bl	8005274 <SAI_InitPCM>
 80049dc:	4603      	mov	r3, r0
 80049de:	75fb      	strb	r3, [r7, #23]
      break;
 80049e0:	e002      	b.n	80049e8 <HAL_SAI_InitProtocol+0x48>
    default :
      status = HAL_ERROR;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
      break;
 80049e6:	bf00      	nop
  }

  if (status == HAL_OK)
 80049e8:	7dfb      	ldrb	r3, [r7, #23]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d104      	bne.n	80049f8 <HAL_SAI_InitProtocol+0x58>
  {
    status = HAL_SAI_Init(hsai);
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f808 	bl	8004a04 <HAL_SAI_Init>
 80049f4:	4603      	mov	r3, r0
 80049f6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 80049f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3718      	adds	r7, #24
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
	...

08004a04 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b088      	sub	sp, #32
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e155      	b.n	8004cc2 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc fa04 	bl	8000e38 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f000 fca1 	bl	8005378 <SAI_Disable>
 8004a36:	4603      	mov	r3, r0
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d001      	beq.n	8004a40 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8004a3c:	2301      	movs	r3, #1
 8004a3e:	e140      	b.n	8004cc2 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	2202      	movs	r2, #2
 8004a44:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d00c      	beq.n	8004a6a <HAL_SAI_Init+0x66>
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d80d      	bhi.n	8004a70 <HAL_SAI_Init+0x6c>
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d002      	beq.n	8004a5e <HAL_SAI_Init+0x5a>
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d003      	beq.n	8004a64 <HAL_SAI_Init+0x60>
 8004a5c:	e008      	b.n	8004a70 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	61fb      	str	r3, [r7, #28]
      break;
 8004a62:	e008      	b.n	8004a76 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8004a64:	2310      	movs	r3, #16
 8004a66:	61fb      	str	r3, [r7, #28]
      break;
 8004a68:	e005      	b.n	8004a76 <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8004a6a:	2320      	movs	r3, #32
 8004a6c:	61fb      	str	r3, [r7, #28]
      break;
 8004a6e:	e002      	b.n	8004a76 <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8004a70:	2300      	movs	r3, #0
 8004a72:	61fb      	str	r3, [r7, #28]
      break;
 8004a74:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	689b      	ldr	r3, [r3, #8]
 8004a7a:	2b03      	cmp	r3, #3
 8004a7c:	d81d      	bhi.n	8004aba <HAL_SAI_Init+0xb6>
 8004a7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004a84 <HAL_SAI_Init+0x80>)
 8004a80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a84:	08004a95 	.word	0x08004a95
 8004a88:	08004a9b 	.word	0x08004a9b
 8004a8c:	08004aa3 	.word	0x08004aa3
 8004a90:	08004aab 	.word	0x08004aab
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8004a94:	2300      	movs	r3, #0
 8004a96:	617b      	str	r3, [r7, #20]
      break;
 8004a98:	e012      	b.n	8004ac0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8004a9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004a9e:	617b      	str	r3, [r7, #20]
      break;
 8004aa0:	e00e      	b.n	8004ac0 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004aa2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004aa6:	617b      	str	r3, [r7, #20]
      break;
 8004aa8:	e00a      	b.n	8004ac0 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8004aaa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004aae:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8004ab0:	69fb      	ldr	r3, [r7, #28]
 8004ab2:	f043 0301 	orr.w	r3, r3, #1
 8004ab6:	61fb      	str	r3, [r7, #28]
      break;
 8004ab8:	e002      	b.n	8004ac0 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
      break;
 8004abe:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	4a81      	ldr	r2, [pc, #516]	@ (8004ccc <HAL_SAI_Init+0x2c8>)
 8004ac6:	4293      	cmp	r3, r2
 8004ac8:	d004      	beq.n	8004ad4 <HAL_SAI_Init+0xd0>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	4a80      	ldr	r2, [pc, #512]	@ (8004cd0 <HAL_SAI_Init+0x2cc>)
 8004ad0:	4293      	cmp	r3, r2
 8004ad2:	d103      	bne.n	8004adc <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8004ad4:	4a7f      	ldr	r2, [pc, #508]	@ (8004cd4 <HAL_SAI_Init+0x2d0>)
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	6013      	str	r3, [r2, #0]
 8004ada:	e002      	b.n	8004ae2 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8004adc:	4a7e      	ldr	r2, [pc, #504]	@ (8004cd8 <HAL_SAI_Init+0x2d4>)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	69db      	ldr	r3, [r3, #28]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d041      	beq.n	8004b6e <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a77      	ldr	r2, [pc, #476]	@ (8004ccc <HAL_SAI_Init+0x2c8>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d004      	beq.n	8004afe <HAL_SAI_Init+0xfa>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	4a75      	ldr	r2, [pc, #468]	@ (8004cd0 <HAL_SAI_Init+0x2cc>)
 8004afa:	4293      	cmp	r3, r2
 8004afc:	d105      	bne.n	8004b0a <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8004afe:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8004b02:	f7fe ff1d 	bl	8003940 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b06:	6138      	str	r0, [r7, #16]
 8004b08:	e004      	b.n	8004b14 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8004b0a:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8004b0e:	f7fe ff17 	bl	8003940 <HAL_RCCEx_GetPeriphCLKFreq>
 8004b12:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8004b14:	693a      	ldr	r2, [r7, #16]
 8004b16:	4613      	mov	r3, r2
 8004b18:	009b      	lsls	r3, r3, #2
 8004b1a:	4413      	add	r3, r2
 8004b1c:	005b      	lsls	r3, r3, #1
 8004b1e:	461a      	mov	r2, r3
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	69db      	ldr	r3, [r3, #28]
 8004b24:	025b      	lsls	r3, r3, #9
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	4a6b      	ldr	r2, [pc, #428]	@ (8004cdc <HAL_SAI_Init+0x2d8>)
 8004b30:	fba2 2303 	umull	r2, r3, r2, r3
 8004b34:	08da      	lsrs	r2, r3, #3
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8004b3a:	68f9      	ldr	r1, [r7, #12]
 8004b3c:	4b67      	ldr	r3, [pc, #412]	@ (8004cdc <HAL_SAI_Init+0x2d8>)
 8004b3e:	fba3 2301 	umull	r2, r3, r3, r1
 8004b42:	08da      	lsrs	r2, r3, #3
 8004b44:	4613      	mov	r3, r2
 8004b46:	009b      	lsls	r3, r3, #2
 8004b48:	4413      	add	r3, r2
 8004b4a:	005b      	lsls	r3, r3, #1
 8004b4c:	1aca      	subs	r2, r1, r3
 8004b4e:	2a08      	cmp	r2, #8
 8004b50:	d904      	bls.n	8004b5c <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b60:	2b04      	cmp	r3, #4
 8004b62:	d104      	bne.n	8004b6e <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a1b      	ldr	r3, [r3, #32]
 8004b68:	085a      	lsrs	r2, r3, #1
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d003      	beq.n	8004b7e <HAL_SAI_Init+0x17a>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	685b      	ldr	r3, [r3, #4]
 8004b7a:	2b02      	cmp	r3, #2
 8004b7c:	d109      	bne.n	8004b92 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d101      	bne.n	8004b8a <HAL_SAI_Init+0x186>
 8004b86:	2300      	movs	r3, #0
 8004b88:	e001      	b.n	8004b8e <HAL_SAI_Init+0x18a>
 8004b8a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b8e:	61bb      	str	r3, [r7, #24]
 8004b90:	e008      	b.n	8004ba4 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b96:	2b01      	cmp	r3, #1
 8004b98:	d102      	bne.n	8004ba0 <HAL_SAI_Init+0x19c>
 8004b9a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004b9e:	e000      	b.n	8004ba2 <HAL_SAI_Init+0x19e>
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	6819      	ldr	r1, [r3, #0]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	4b4c      	ldr	r3, [pc, #304]	@ (8004ce0 <HAL_SAI_Init+0x2dc>)
 8004bb0:	400b      	ands	r3, r1
 8004bb2:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	6819      	ldr	r1, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bc2:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bc8:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bce:	431a      	orrs	r2, r3
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ckstr_bits | syncen_bits |                             \
 8004bdc:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8004be8:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	051b      	lsls	r3, r3, #20
 8004bf0:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	687a      	ldr	r2, [r7, #4]
 8004c02:	6812      	ldr	r2, [r2, #0]
 8004c04:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 8004c08:	f023 030f 	bic.w	r3, r3, #15
 8004c0c:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	699a      	ldr	r2, [r3, #24]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c1c:	431a      	orrs	r2, r3
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	430a      	orrs	r2, r1
 8004c2a:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	6899      	ldr	r1, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	4b2b      	ldr	r3, [pc, #172]	@ (8004ce4 <HAL_SAI_Init+0x2e0>)
 8004c38:	400b      	ands	r3, r1
 8004c3a:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6899      	ldr	r1, [r3, #8]
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c46:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c4c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                           hsai->FrameInit.FSOffset |
 8004c52:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                           hsai->FrameInit.FSDefinition |
 8004c58:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8004c62:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	430a      	orrs	r2, r1
 8004c6a:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68d9      	ldr	r1, [r3, #12]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8004c7a:	400b      	ands	r3, r1
 8004c7c:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68d9      	ldr	r1, [r3, #12]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c8c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004c92:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004c94:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	021b      	lsls	r3, r3, #8
 8004c9e:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	430a      	orrs	r2, r1
 8004ca6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	2200      	movs	r2, #0
 8004cac:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2200      	movs	r2, #0
 8004cbc:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8004cc0:	2300      	movs	r3, #0
}
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	3720      	adds	r7, #32
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	40015404 	.word	0x40015404
 8004cd0:	40015424 	.word	0x40015424
 8004cd4:	40015400 	.word	0x40015400
 8004cd8:	40015800 	.word	0x40015800
 8004cdc:	cccccccd 	.word	0xcccccccd
 8004ce0:	ff05c010 	.word	0xff05c010
 8004ce4:	fff88000 	.word	0xfff88000

08004ce8 <HAL_SAI_Abort>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Abort(SAI_HandleTypeDef *hsai)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	f893 307c 	ldrb.w	r3, [r3, #124]	@ 0x7c
 8004cfa:	2b01      	cmp	r3, #1
 8004cfc:	d101      	bne.n	8004d02 <HAL_SAI_Abort+0x1a>
 8004cfe:	2302      	movs	r3, #2
 8004d00:	e053      	b.n	8004daa <HAL_SAI_Abort+0xc2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2201      	movs	r2, #1
 8004d06:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 fb34 	bl	8005378 <SAI_Disable>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d001      	beq.n	8004d1a <HAL_SAI_Abort+0x32>
  {
    status = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	73fb      	strb	r3, [r7, #15]
  }

  /* Check SAI DMA is enabled or not */
  if ((hsai->Instance->CR1 & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d28:	d125      	bne.n	8004d76 <HAL_SAI_Abort+0x8e>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8004d38:	601a      	str	r2, [r3, #0]

    /* Abort the SAI Tx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b12      	cmp	r3, #18
 8004d44:	d108      	bne.n	8004d58 <HAL_SAI_Abort+0x70>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d004      	beq.n	8004d58 <HAL_SAI_Abort+0x70>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmatx);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004d52:	4618      	mov	r0, r3
 8004d54:	f7fc fcfa 	bl	800174c <HAL_DMA_Abort>
    }

    /* Abort the SAI Rx DMA Stream */
    if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b22      	cmp	r3, #34	@ 0x22
 8004d62:	d108      	bne.n	8004d76 <HAL_SAI_Abort+0x8e>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d004      	beq.n	8004d76 <HAL_SAI_Abort+0x8e>
    {
      /* No need to check the returned value of HAL_DMA_Abort. */
      /* Only HAL_DMA_ERROR_NO_XFER can be returned in case of error and it's not an error for SAI. */
      (void) HAL_DMA_Abort(hsai->hdmarx);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d70:	4618      	mov	r0, r3
 8004d72:	f7fc fceb 	bl	800174c <HAL_DMA_Abort>
    }
  }

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f04f 32ff 	mov.w	r2, #4294967295
 8004d86:	619a      	str	r2, [r3, #24]

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	685a      	ldr	r2, [r3, #4]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f042 0208 	orr.w	r2, r2, #8
 8004d96:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 207c 	strb.w	r2, [r3, #124]	@ 0x7c

  return status;
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3710      	adds	r7, #16
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <HAL_SAI_IRQHandler>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
void HAL_SAI_IRQHandler(SAI_HandleTypeDef *hsai)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b086      	sub	sp, #24
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  if (hsai->State != HAL_SAI_STATE_RESET)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	f000 8192 	beq.w	80050ee <HAL_SAI_IRQHandler+0x33a>
  {
    uint32_t itflags = hsai->Instance->SR;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	695b      	ldr	r3, [r3, #20]
 8004dd0:	617b      	str	r3, [r7, #20]
    uint32_t itsources = hsai->Instance->IMR;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	691b      	ldr	r3, [r3, #16]
 8004dd8:	613b      	str	r3, [r7, #16]
    uint32_t cr1config = hsai->Instance->CR1;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	60fb      	str	r3, [r7, #12]
    uint32_t tmperror;

    /* SAI Fifo request interrupt occurred -----------------------------------*/
    if (((itflags & SAI_xSR_FREQ) == SAI_xSR_FREQ) && ((itsources & SAI_IT_FREQ) == SAI_IT_FREQ))
 8004de2:	697b      	ldr	r3, [r7, #20]
 8004de4:	f003 0308 	and.w	r3, r3, #8
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d009      	beq.n	8004e00 <HAL_SAI_IRQHandler+0x4c>
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f003 0308 	and.w	r3, r3, #8
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d004      	beq.n	8004e00 <HAL_SAI_IRQHandler+0x4c>
    {
      hsai->InterruptServiceRoutine(hsai);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	4798      	blx	r3
 8004dfe:	e176      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
    }
    /* SAI Overrun error interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_OVRUDR) == SAI_FLAG_OVRUDR) && ((itsources & SAI_IT_OVRUDR) == SAI_IT_OVRUDR))
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01e      	beq.n	8004e48 <HAL_SAI_IRQHandler+0x94>
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	f003 0301 	and.w	r3, r3, #1
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d019      	beq.n	8004e48 <HAL_SAI_IRQHandler+0x94>
    {
      /* Clear the SAI Overrun flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_OVRUDR);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	2201      	movs	r2, #1
 8004e1a:	619a      	str	r2, [r3, #24]
      /* Get the SAI error code */
      tmperror = ((hsai->State == HAL_SAI_STATE_BUSY_RX) ? HAL_SAI_ERROR_OVR : HAL_SAI_ERROR_UDR);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f893 307d 	ldrb.w	r3, [r3, #125]	@ 0x7d
 8004e22:	b2db      	uxtb	r3, r3
 8004e24:	2b22      	cmp	r3, #34	@ 0x22
 8004e26:	d101      	bne.n	8004e2c <HAL_SAI_IRQHandler+0x78>
 8004e28:	2301      	movs	r3, #1
 8004e2a:	e000      	b.n	8004e2e <HAL_SAI_IRQHandler+0x7a>
 8004e2c:	2302      	movs	r3, #2
 8004e2e:	60bb      	str	r3, [r7, #8]
      /* Change the SAI error code */
      hsai->ErrorCode |= tmperror;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	f8d3 2080 	ldr.w	r2, [r3, #128]	@ 0x80
 8004e36:	68bb      	ldr	r3, [r7, #8]
 8004e38:	431a      	orrs	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f95b 	bl	80050fc <HAL_SAI_ErrorCallback>
 8004e46:	e152      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
#endif
    }
    /* SAI mutedet interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_MUTEDET) == SAI_FLAG_MUTEDET) && ((itsources & SAI_IT_MUTEDET) == SAI_IT_MUTEDET))
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	f003 0302 	and.w	r3, r3, #2
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d011      	beq.n	8004e76 <HAL_SAI_IRQHandler+0xc2>
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0302 	and.w	r3, r3, #2
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d00c      	beq.n	8004e76 <HAL_SAI_IRQHandler+0xc2>
    {
      /* Clear the SAI mutedet flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_MUTEDET);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	2202      	movs	r2, #2
 8004e62:	619a      	str	r2, [r3, #24]
      /* call the call back function */
      if (hsai->mutecallback != NULL)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8140 	beq.w	80050ee <HAL_SAI_IRQHandler+0x33a>
      {
        /* inform the user that an RX mute event has been detected */
        hsai->mutecallback();
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004e72:	4798      	blx	r3
      if (hsai->mutecallback != NULL)
 8004e74:	e13b      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
      }
    }
    /* SAI AFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_AFSDET) == SAI_FLAG_AFSDET) && ((itsources & SAI_IT_AFSDET) == SAI_IT_AFSDET))
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 0320 	and.w	r3, r3, #32
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d055      	beq.n	8004f2c <HAL_SAI_IRQHandler+0x178>
 8004e80:	693b      	ldr	r3, [r7, #16]
 8004e82:	f003 0320 	and.w	r3, r3, #32
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d050      	beq.n	8004f2c <HAL_SAI_IRQHandler+0x178>
    {
      /* Clear the SAI AFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_AFSDET);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_AFSDET;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d038      	beq.n	8004f1e <HAL_SAI_IRQHandler+0x16a>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d016      	beq.n	8004ee2 <HAL_SAI_IRQHandler+0x12e>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004eb8:	4a8f      	ldr	r2, [pc, #572]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 8004eba:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7fc fc81 	bl	80017c8 <HAL_DMA_Abort_IT>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d00a      	beq.n	8004ee2 <HAL_SAI_IRQHandler+0x12e>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ed2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004edc:	6878      	ldr	r0, [r7, #4]
 8004ede:	f000 f90d 	bl	80050fc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	f000 80fc 	beq.w	80050e4 <HAL_SAI_IRQHandler+0x330>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef0:	4a81      	ldr	r2, [pc, #516]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 8004ef2:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7fc fc65 	bl	80017c8 <HAL_DMA_Abort_IT>
 8004efe:	4603      	mov	r3, r0
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f000 80ef 	beq.w	80050e4 <HAL_SAI_IRQHandler+0x330>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f0c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f000 f8f0 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f1c:	e0e2      	b.n	80050e4 <HAL_SAI_IRQHandler+0x330>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7ff fee2 	bl	8004ce8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 f8e9 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f2a:	e0db      	b.n	80050e4 <HAL_SAI_IRQHandler+0x330>
#endif
      }
    }
    /* SAI LFSDET interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_LFSDET) == SAI_FLAG_LFSDET) && ((itsources & SAI_IT_LFSDET) == SAI_IT_LFSDET))
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d055      	beq.n	8004fe2 <HAL_SAI_IRQHandler+0x22e>
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d050      	beq.n	8004fe2 <HAL_SAI_IRQHandler+0x22e>
    {
      /* Clear the SAI LFSDET flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_LFSDET);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	2240      	movs	r2, #64	@ 0x40
 8004f46:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_LFSDET;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f4e:	f043 0208 	orr.w	r2, r3, #8
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d038      	beq.n	8004fd4 <HAL_SAI_IRQHandler+0x220>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d016      	beq.n	8004f98 <HAL_SAI_IRQHandler+0x1e4>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f6e:	4a62      	ldr	r2, [pc, #392]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 8004f70:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004f76:	4618      	mov	r0, r3
 8004f78:	f7fc fc26 	bl	80017c8 <HAL_DMA_Abort_IT>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00a      	beq.n	8004f98 <HAL_SAI_IRQHandler+0x1e4>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004f88:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004f92:	6878      	ldr	r0, [r7, #4]
 8004f94:	f000 f8b2 	bl	80050fc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	f000 80a3 	beq.w	80050e8 <HAL_SAI_IRQHandler+0x334>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fa6:	4a54      	ldr	r2, [pc, #336]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 8004fa8:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f7fc fc0a 	bl	80017c8 <HAL_DMA_Abort_IT>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	f000 8096 	beq.w	80050e8 <HAL_SAI_IRQHandler+0x334>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fc2:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f895 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fd2:	e089      	b.n	80050e8 <HAL_SAI_IRQHandler+0x334>
      }
      else
      {
        /* Abort SAI */
        /* No need to check return value because HAL_SAI_ErrorCallback will be called later */
        (void) HAL_SAI_Abort(hsai);
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff fe87 	bl	8004ce8 <HAL_SAI_Abort>

        /* Set error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f88e 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8004fe0:	e082      	b.n	80050e8 <HAL_SAI_IRQHandler+0x334>
#endif
      }
    }
    /* SAI WCKCFG interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_WCKCFG) == SAI_FLAG_WCKCFG) && ((itsources & SAI_IT_WCKCFG) == SAI_IT_WCKCFG))
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f003 0304 	and.w	r3, r3, #4
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d061      	beq.n	80050b0 <HAL_SAI_IRQHandler+0x2fc>
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d05c      	beq.n	80050b0 <HAL_SAI_IRQHandler+0x2fc>
    {
      /* Clear the SAI WCKCFG flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_WCKCFG);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2204      	movs	r2, #4
 8004ffc:	619a      	str	r2, [r3, #24]

      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_WCKCFG;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005004:	f043 0220 	orr.w	r2, r3, #32
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Check SAI DMA is enabled or not */
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d036      	beq.n	8005086 <HAL_SAI_IRQHandler+0x2d2>
      {
        /* Abort the SAI DMA Streams */
        if (hsai->hdmatx != NULL)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800501c:	2b00      	cmp	r3, #0
 800501e:	d016      	beq.n	800504e <HAL_SAI_IRQHandler+0x29a>
        {
          /* Set the DMA Tx abort callback */
          hsai->hdmatx->XferAbortCallback = SAI_DMAAbort;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005024:	4a34      	ldr	r2, [pc, #208]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 8005026:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmatx) != HAL_OK)
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800502c:	4618      	mov	r0, r3
 800502e:	f7fc fbcb 	bl	80017c8 <HAL_DMA_Abort_IT>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	d00a      	beq.n	800504e <HAL_SAI_IRQHandler+0x29a>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800503e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 8005048:	6878      	ldr	r0, [r7, #4]
 800504a:	f000 f857 	bl	80050fc <HAL_SAI_ErrorCallback>
#endif
          }
        }
        if (hsai->hdmarx != NULL)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005052:	2b00      	cmp	r3, #0
 8005054:	d04a      	beq.n	80050ec <HAL_SAI_IRQHandler+0x338>
        {
          /* Set the DMA Rx abort callback */
          hsai->hdmarx->XferAbortCallback = SAI_DMAAbort;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800505a:	4a27      	ldr	r2, [pc, #156]	@ (80050f8 <HAL_SAI_IRQHandler+0x344>)
 800505c:	639a      	str	r2, [r3, #56]	@ 0x38

          /* Abort DMA in IT mode */
          if (HAL_DMA_Abort_IT(hsai->hdmarx) != HAL_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005062:	4618      	mov	r0, r3
 8005064:	f7fc fbb0 	bl	80017c8 <HAL_DMA_Abort_IT>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d03e      	beq.n	80050ec <HAL_SAI_IRQHandler+0x338>
          {
            /* Update SAI error code */
            hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005074:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* Call SAI error callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
            hsai->ErrorCallback(hsai);
#else
            HAL_SAI_ErrorCallback(hsai);
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f000 f83c 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 8005084:	e032      	b.n	80050ec <HAL_SAI_IRQHandler+0x338>
      }
      else
      {
        /* If WCKCFG occurs, SAI audio block is automatically disabled */
        /* Disable all interrupts and clear all flags */
        hsai->Instance->IMR = 0U;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2200      	movs	r2, #0
 800508c:	611a      	str	r2, [r3, #16]
        hsai->Instance->CLRFR = 0xFFFFFFFFU;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f04f 32ff 	mov.w	r2, #4294967295
 8005096:	619a      	str	r2, [r3, #24]
        /* Set the SAI state to ready to be able to start again the process */
        hsai->State = HAL_SAI_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2201      	movs	r2, #1
 800509c:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

        /* Initialize XferCount */
        hsai->XferCount = 0U;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

        /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
        hsai->ErrorCallback(hsai);
#else
        HAL_SAI_ErrorCallback(hsai);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f827 	bl	80050fc <HAL_SAI_ErrorCallback>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050ae:	e01d      	b.n	80050ec <HAL_SAI_IRQHandler+0x338>
#endif
      }
    }
    /* SAI CNRDY interrupt occurred ----------------------------------*/
    else if (((itflags & SAI_FLAG_CNRDY) == SAI_FLAG_CNRDY) && ((itsources & SAI_IT_CNRDY) == SAI_IT_CNRDY))
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d019      	beq.n	80050ee <HAL_SAI_IRQHandler+0x33a>
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f003 0310 	and.w	r3, r3, #16
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d014      	beq.n	80050ee <HAL_SAI_IRQHandler+0x33a>
    {
      /* Clear the SAI CNRDY flag */
      __HAL_SAI_CLEAR_FLAG(hsai, SAI_FLAG_CNRDY);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	2210      	movs	r2, #16
 80050ca:	619a      	str	r2, [r3, #24]
      /* Change the SAI error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_CNREADY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d2:	f043 0210 	orr.w	r2, r3, #16
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      /* the transfer is not stopped, we will forward the information to the user and we let the user decide what needs to be done */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
      hsai->ErrorCallback(hsai);
#else
      HAL_SAI_ErrorCallback(hsai);
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 f80d 	bl	80050fc <HAL_SAI_ErrorCallback>
    else
    {
      /* Nothing to do */
    }
  }
}
 80050e2:	e004      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050e4:	bf00      	nop
 80050e6:	e002      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050e8:	bf00      	nop
 80050ea:	e000      	b.n	80050ee <HAL_SAI_IRQHandler+0x33a>
      if ((cr1config & SAI_xCR1_DMAEN) == SAI_xCR1_DMAEN)
 80050ec:	bf00      	nop
}
 80050ee:	bf00      	nop
 80050f0:	3718      	adds	r7, #24
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	080053ed 	.word	0x080053ed

080050fc <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 80050fc:	b480      	push	{r7}
 80050fe:	b083      	sub	sp, #12
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8005104:	bf00      	nop
 8005106:	370c      	adds	r7, #12
 8005108:	46bd      	mov	sp, r7
 800510a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510e:	4770      	bx	lr

08005110 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *         the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
 800511c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800511e:	2300      	movs	r3, #0
 8005120:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	2200      	movs	r2, #0
 8005126:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2200      	movs	r2, #0
 800512c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <SAI_InitI2S+0x2e>
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	2b02      	cmp	r3, #2
 800513c:	d103      	bne.n	8005146 <SAI_InitI2S+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2200      	movs	r2, #0
 8005142:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005144:	e002      	b.n	800514c <SAI_InitI2S+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	2201      	movs	r2, #1
 800514a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005152:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800515a:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->SlotInit.FirstBitOffset  = 0;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	2200      	movs	r2, #0
 8005160:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d001      	beq.n	8005176 <SAI_InitI2S+0x66>
  {
    return HAL_ERROR;
 8005172:	2301      	movs	r3, #1
 8005174:	e077      	b.n	8005266 <SAI_InitI2S+0x156>
  }

  if (protocol == SAI_I2S_STANDARD)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d107      	bne.n	800518c <SAI_InitI2S+0x7c>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	2200      	movs	r2, #0
 8005180:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005188:	651a      	str	r2, [r3, #80]	@ 0x50
 800518a:	e006      	b.n	800519a <SAI_InitI2S+0x8a>
  }
  else
  {
     /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8005192:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	2200      	movs	r2, #0
 8005198:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Frame definition */
  switch (datasize)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2b03      	cmp	r3, #3
 800519e:	d84f      	bhi.n	8005240 <SAI_InitI2S+0x130>
 80051a0:	a201      	add	r2, pc, #4	@ (adr r2, 80051a8 <SAI_InitI2S+0x98>)
 80051a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051a6:	bf00      	nop
 80051a8:	080051b9 	.word	0x080051b9
 80051ac:	080051db 	.word	0x080051db
 80051b0:	080051fd 	.word	0x080051fd
 80051b4:	0800521f 	.word	0x0800521f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	2280      	movs	r2, #128	@ 0x80
 80051bc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	085b      	lsrs	r3, r3, #1
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	085b      	lsrs	r3, r3, #1
 80051cc:	011a      	lsls	r2, r3, #4
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	2240      	movs	r2, #64	@ 0x40
 80051d6:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051d8:	e035      	b.n	8005246 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2280      	movs	r2, #128	@ 0x80
 80051de:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	085b      	lsrs	r3, r3, #1
 80051e4:	019a      	lsls	r2, r3, #6
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	085b      	lsrs	r3, r3, #1
 80051ee:	015a      	lsls	r2, r3, #5
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2280      	movs	r2, #128	@ 0x80
 80051f8:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 80051fa:	e024      	b.n	8005246 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	22c0      	movs	r2, #192	@ 0xc0
 8005200:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	085b      	lsrs	r3, r3, #1
 8005206:	019a      	lsls	r2, r3, #6
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	085b      	lsrs	r3, r3, #1
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2280      	movs	r2, #128	@ 0x80
 800521a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800521c:	e013      	b.n	8005246 <SAI_InitI2S+0x136>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	22e0      	movs	r2, #224	@ 0xe0
 8005222:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	085b      	lsrs	r3, r3, #1
 8005228:	019a      	lsls	r2, r3, #6
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800522e:	683b      	ldr	r3, [r7, #0]
 8005230:	085b      	lsrs	r3, r3, #1
 8005232:	015a      	lsls	r2, r3, #5
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	645a      	str	r2, [r3, #68]	@ 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	2280      	movs	r2, #128	@ 0x80
 800523c:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800523e:	e002      	b.n	8005246 <SAI_InitI2S+0x136>
    default :
      status = HAL_ERROR;
 8005240:	2301      	movs	r3, #1
 8005242:	75fb      	strb	r3, [r7, #23]
      break;
 8005244:	bf00      	nop
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	2b02      	cmp	r3, #2
 800524a:	d10b      	bne.n	8005264 <SAI_InitI2S+0x154>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b01      	cmp	r3, #1
 8005250:	d102      	bne.n	8005258 <SAI_InitI2S+0x148>
    {
      hsai->SlotInit.FirstBitOffset = 16;
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2210      	movs	r2, #16
 8005256:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2b02      	cmp	r3, #2
 800525c:	d102      	bne.n	8005264 <SAI_InitI2S+0x154>
    {
      hsai->SlotInit.FirstBitOffset = 8;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	2208      	movs	r2, #8
 8005262:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  return status;
 8005264:	7dfb      	ldrb	r3, [r7, #23]
}
 8005266:	4618      	mov	r0, r3
 8005268:	371c      	adds	r7, #28
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop

08005274 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8005274:	b480      	push	{r7}
 8005276:	b087      	sub	sp, #28
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]
 8005280:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	75fb      	strb	r3, [r7, #23]

  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2200      	movs	r2, #0
 8005290:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d003      	beq.n	80052a2 <SAI_InitPCM+0x2e>
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	2b02      	cmp	r3, #2
 80052a0:	d103      	bne.n	80052aa <SAI_InitPCM+0x36>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2201      	movs	r2, #1
 80052a6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80052a8:	e002      	b.n	80052b0 <SAI_InitPCM+0x3c>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	2200      	movs	r2, #0
 80052ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	2200      	movs	r2, #0
 80052b4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80052bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80052c4:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->SlotInit.FirstBitOffset  = 0;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	2200      	movs	r2, #0
 80052ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->SlotInit.SlotNumber      = nbslot;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	683a      	ldr	r2, [r7, #0]
 80052d0:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80052d8:	661a      	str	r2, [r3, #96]	@ 0x60

  if (protocol == SAI_PCM_SHORT)
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	2b04      	cmp	r3, #4
 80052de:	d103      	bne.n	80052e8 <SAI_InitPCM+0x74>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2201      	movs	r2, #1
 80052e4:	645a      	str	r2, [r3, #68]	@ 0x44
 80052e6:	e002      	b.n	80052ee <SAI_InitPCM+0x7a>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	220d      	movs	r2, #13
 80052ec:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  switch (datasize)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2b03      	cmp	r3, #3
 80052f2:	d837      	bhi.n	8005364 <SAI_InitPCM+0xf0>
 80052f4:	a201      	add	r2, pc, #4	@ (adr r2, 80052fc <SAI_InitPCM+0x88>)
 80052f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052fa:	bf00      	nop
 80052fc:	0800530d 	.word	0x0800530d
 8005300:	08005323 	.word	0x08005323
 8005304:	08005339 	.word	0x08005339
 8005308:	0800534f 	.word	0x0800534f
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	2280      	movs	r2, #128	@ 0x80
 8005310:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8005312:	683b      	ldr	r3, [r7, #0]
 8005314:	011a      	lsls	r2, r3, #4
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2240      	movs	r2, #64	@ 0x40
 800531e:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005320:	e023      	b.n	800536a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2280      	movs	r2, #128	@ 0x80
 8005326:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2280      	movs	r2, #128	@ 0x80
 8005334:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005336:	e018      	b.n	800536a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	22c0      	movs	r2, #192	@ 0xc0
 800533c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2280      	movs	r2, #128	@ 0x80
 800534a:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 800534c:	e00d      	b.n	800536a <SAI_InitPCM+0xf6>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	22e0      	movs	r2, #224	@ 0xe0
 8005352:	635a      	str	r2, [r3, #52]	@ 0x34
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	015a      	lsls	r2, r3, #5
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	641a      	str	r2, [r3, #64]	@ 0x40
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2280      	movs	r2, #128	@ 0x80
 8005360:	659a      	str	r2, [r3, #88]	@ 0x58
      break;
 8005362:	e002      	b.n	800536a <SAI_InitPCM+0xf6>
    default :
      status = HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	75fb      	strb	r3, [r7, #23]
      break;
 8005368:	bf00      	nop
  }

  return status;
 800536a:	7dfb      	ldrb	r3, [r7, #23]
}
 800536c:	4618      	mov	r0, r3
 800536e:	371c      	adds	r7, #28
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr

08005378 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005378:	b480      	push	{r7}
 800537a:	b085      	sub	sp, #20
 800537c:	af00      	add	r7, sp, #0
 800537e:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005380:	4b18      	ldr	r3, [pc, #96]	@ (80053e4 <SAI_Disable+0x6c>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	4a18      	ldr	r2, [pc, #96]	@ (80053e8 <SAI_Disable+0x70>)
 8005386:	fba2 2303 	umull	r2, r3, r2, r3
 800538a:	0b1b      	lsrs	r3, r3, #12
 800538c:	009b      	lsls	r3, r3, #2
 800538e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005390:	2300      	movs	r3, #0
 8005392:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681a      	ldr	r2, [r3, #0]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80053a2:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d10a      	bne.n	80053c0 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80053b0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
      status = HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	72fb      	strb	r3, [r7, #11]
      break;
 80053be:	e009      	b.n	80053d4 <SAI_Disable+0x5c>
    }
    count--;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	3b01      	subs	r3, #1
 80053c4:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e7      	bne.n	80053a4 <SAI_Disable+0x2c>

  return status;
 80053d4:	7afb      	ldrb	r3, [r7, #11]
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	3714      	adds	r7, #20
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000000 	.word	0x20000000
 80053e8:	95cbec1b 	.word	0x95cbec1b

080053ec <SAI_DMAAbort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053f8:	60fb      	str	r3, [r7, #12]

  /* Disable DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8005408:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts and clear all flags */
  hsai->Instance->IMR = 0U;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	2200      	movs	r2, #0
 8005410:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f04f 32ff 	mov.w	r2, #4294967295
 800541a:	619a      	str	r2, [r3, #24]

  if (hsai->ErrorCode != HAL_SAI_ERROR_WCKCFG)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005422:	2b20      	cmp	r3, #32
 8005424:	d00a      	beq.n	800543c <SAI_DMAAbort+0x50>
  {
    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8005426:	68f8      	ldr	r0, [r7, #12]
 8005428:	f7ff ffa6 	bl	8005378 <SAI_Disable>

    /* Flush the fifo */
    SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f042 0208 	orr.w	r2, r2, #8
 800543a:	605a      	str	r2, [r3, #4]
  }
  /* Set the SAI state to ready to be able to start again the process */
  hsai->State = HAL_SAI_STATE_READY;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2201      	movs	r2, #1
 8005440:	f883 207d 	strb.w	r2, [r3, #125]	@ 0x7d

  /* Initialize XferCount */
  hsai->XferCount = 0U;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	2200      	movs	r2, #0
 8005448:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a

  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	f7ff fe55 	bl	80050fc <HAL_SAI_ErrorCallback>
#endif
}
 8005452:	bf00      	nop
 8005454:	3710      	adds	r7, #16
 8005456:	46bd      	mov	sp, r7
 8005458:	bd80      	pop	{r7, pc}

0800545a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800545a:	b580      	push	{r7, lr}
 800545c:	b084      	sub	sp, #16
 800545e:	af00      	add	r7, sp, #0
 8005460:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d101      	bne.n	800546c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005468:	2301      	movs	r3, #1
 800546a:	e095      	b.n	8005598 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005470:	2b00      	cmp	r3, #0
 8005472:	d108      	bne.n	8005486 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800547c:	d009      	beq.n	8005492 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	61da      	str	r2, [r3, #28]
 8005484:	e005      	b.n	8005492 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2200      	movs	r2, #0
 800548a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	2200      	movs	r2, #0
 8005490:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2200      	movs	r2, #0
 8005496:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800549e:	b2db      	uxtb	r3, r3
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d106      	bne.n	80054b2 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054ac:	6878      	ldr	r0, [r7, #4]
 80054ae:	f7fb fbfd 	bl	8000cac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2202      	movs	r2, #2
 80054b6:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054c8:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054d2:	d902      	bls.n	80054da <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80054d4:	2300      	movs	r3, #0
 80054d6:	60fb      	str	r3, [r7, #12]
 80054d8:	e002      	b.n	80054e0 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80054da:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80054de:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80054e8:	d007      	beq.n	80054fa <HAL_SPI_Init+0xa0>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	68db      	ldr	r3, [r3, #12]
 80054ee:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80054f2:	d002      	beq.n	80054fa <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800553c:	ea42 0103 	orr.w	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005544:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0204 	and.w	r2, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555e:	f003 0310 	and.w	r3, r3, #16
 8005562:	431a      	orrs	r2, r3
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005568:	f003 0308 	and.w	r3, r3, #8
 800556c:	431a      	orrs	r2, r3
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68db      	ldr	r3, [r3, #12]
 8005572:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005576:	ea42 0103 	orr.w	r1, r2, r3
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	430a      	orrs	r2, r1
 8005586:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2200      	movs	r2, #0
 800558c:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2201      	movs	r2, #1
 8005592:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8005596:	2300      	movs	r3, #0
}
 8005598:	4618      	mov	r0, r3
 800559a:	3710      	adds	r7, #16
 800559c:	46bd      	mov	sp, r7
 800559e:	bd80      	pop	{r7, pc}

080055a0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b088      	sub	sp, #32
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	60f8      	str	r0, [r7, #12]
 80055a8:	60b9      	str	r1, [r7, #8]
 80055aa:	603b      	str	r3, [r7, #0]
 80055ac:	4613      	mov	r3, r2
 80055ae:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055b0:	f7fb fed2 	bl	8001358 <HAL_GetTick>
 80055b4:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80055b6:	88fb      	ldrh	r3, [r7, #6]
 80055b8:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80055c0:	b2db      	uxtb	r3, r3
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d001      	beq.n	80055ca <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80055c6:	2302      	movs	r3, #2
 80055c8:	e15c      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d002      	beq.n	80055d6 <HAL_SPI_Transmit+0x36>
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d101      	bne.n	80055da <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e154      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d101      	bne.n	80055e8 <HAL_SPI_Transmit+0x48>
 80055e4:	2302      	movs	r3, #2
 80055e6:	e14d      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2203      	movs	r2, #3
 80055f4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	68ba      	ldr	r2, [r7, #8]
 8005602:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	88fa      	ldrh	r2, [r7, #6]
 800560e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	2200      	movs	r2, #0
 8005622:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	2200      	movs	r2, #0
 800562a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800562c:	68fb      	ldr	r3, [r7, #12]
 800562e:	2200      	movs	r2, #0
 8005630:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	689b      	ldr	r3, [r3, #8]
 8005636:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800563a:	d10f      	bne.n	800565c <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	681a      	ldr	r2, [r3, #0]
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800564a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800565a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005666:	2b40      	cmp	r3, #64	@ 0x40
 8005668:	d007      	beq.n	800567a <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005678:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	68db      	ldr	r3, [r3, #12]
 800567e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005682:	d952      	bls.n	800572a <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	2b00      	cmp	r3, #0
 800568a:	d002      	beq.n	8005692 <HAL_SPI_Transmit+0xf2>
 800568c:	8b7b      	ldrh	r3, [r7, #26]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d145      	bne.n	800571e <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005696:	881a      	ldrh	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056a2:	1c9a      	adds	r2, r3, #2
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	3b01      	subs	r3, #1
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056b6:	e032      	b.n	800571e <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	689b      	ldr	r3, [r3, #8]
 80056be:	f003 0302 	and.w	r3, r3, #2
 80056c2:	2b02      	cmp	r3, #2
 80056c4:	d112      	bne.n	80056ec <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056ca:	881a      	ldrh	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80056d6:	1c9a      	adds	r2, r3, #2
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80056e0:	b29b      	uxth	r3, r3
 80056e2:	3b01      	subs	r3, #1
 80056e4:	b29a      	uxth	r2, r3
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80056ea:	e018      	b.n	800571e <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056ec:	f7fb fe34 	bl	8001358 <HAL_GetTick>
 80056f0:	4602      	mov	r2, r0
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	1ad3      	subs	r3, r2, r3
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d803      	bhi.n	8005704 <HAL_SPI_Transmit+0x164>
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005702:	d102      	bne.n	800570a <HAL_SPI_Transmit+0x16a>
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d109      	bne.n	800571e <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2200      	movs	r2, #0
 8005716:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800571a:	2303      	movs	r3, #3
 800571c:	e0b2      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1c7      	bne.n	80056b8 <HAL_SPI_Transmit+0x118>
 8005728:	e083      	b.n	8005832 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d002      	beq.n	8005738 <HAL_SPI_Transmit+0x198>
 8005732:	8b7b      	ldrh	r3, [r7, #26]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d177      	bne.n	8005828 <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800573c:	b29b      	uxth	r3, r3
 800573e:	2b01      	cmp	r3, #1
 8005740:	d912      	bls.n	8005768 <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	881a      	ldrh	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005752:	1c9a      	adds	r2, r3, #2
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800575c:	b29b      	uxth	r3, r3
 800575e:	3b02      	subs	r3, #2
 8005760:	b29a      	uxth	r2, r3
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005766:	e05f      	b.n	8005828 <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	330c      	adds	r3, #12
 8005772:	7812      	ldrb	r2, [r2, #0]
 8005774:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005784:	b29b      	uxth	r3, r3
 8005786:	3b01      	subs	r3, #1
 8005788:	b29a      	uxth	r2, r3
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800578e:	e04b      	b.n	8005828 <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	689b      	ldr	r3, [r3, #8]
 8005796:	f003 0302 	and.w	r3, r3, #2
 800579a:	2b02      	cmp	r3, #2
 800579c:	d12b      	bne.n	80057f6 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	2b01      	cmp	r3, #1
 80057a6:	d912      	bls.n	80057ce <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057ac:	881a      	ldrh	r2, [r3, #0]
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057b8:	1c9a      	adds	r2, r3, #2
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057c2:	b29b      	uxth	r3, r3
 80057c4:	3b02      	subs	r3, #2
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057cc:	e02c      	b.n	8005828 <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	330c      	adds	r3, #12
 80057d8:	7812      	ldrb	r2, [r2, #0]
 80057da:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80057e0:	1c5a      	adds	r2, r3, #1
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80057ea:	b29b      	uxth	r3, r3
 80057ec:	3b01      	subs	r3, #1
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80057f4:	e018      	b.n	8005828 <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80057f6:	f7fb fdaf 	bl	8001358 <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	683a      	ldr	r2, [r7, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d803      	bhi.n	800580e <HAL_SPI_Transmit+0x26e>
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580c:	d102      	bne.n	8005814 <HAL_SPI_Transmit+0x274>
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d109      	bne.n	8005828 <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	2201      	movs	r2, #1
 8005818:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8005824:	2303      	movs	r3, #3
 8005826:	e02d      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ae      	bne.n	8005790 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005832:	69fa      	ldr	r2, [r7, #28]
 8005834:	6839      	ldr	r1, [r7, #0]
 8005836:	68f8      	ldr	r0, [r7, #12]
 8005838:	f000 f946 	bl	8005ac8 <SPI_EndRxTxTransaction>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d002      	beq.n	8005848 <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	2220      	movs	r2, #32
 8005846:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	689b      	ldr	r3, [r3, #8]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d10a      	bne.n	8005866 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005850:	2300      	movs	r3, #0
 8005852:	617b      	str	r3, [r7, #20]
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	68db      	ldr	r3, [r3, #12]
 800585a:	617b      	str	r3, [r7, #20]
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2201      	movs	r2, #1
 800586a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800587a:	2b00      	cmp	r3, #0
 800587c:	d001      	beq.n	8005882 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 800587e:	2301      	movs	r3, #1
 8005880:	e000      	b.n	8005884 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8005882:	2300      	movs	r3, #0
  }
}
 8005884:	4618      	mov	r0, r3
 8005886:	3720      	adds	r7, #32
 8005888:	46bd      	mov	sp, r7
 800588a:	bd80      	pop	{r7, pc}

0800588c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b088      	sub	sp, #32
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	603b      	str	r3, [r7, #0]
 8005898:	4613      	mov	r3, r2
 800589a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800589c:	f7fb fd5c 	bl	8001358 <HAL_GetTick>
 80058a0:	4602      	mov	r2, r0
 80058a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058a4:	1a9b      	subs	r3, r3, r2
 80058a6:	683a      	ldr	r2, [r7, #0]
 80058a8:	4413      	add	r3, r2
 80058aa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80058ac:	f7fb fd54 	bl	8001358 <HAL_GetTick>
 80058b0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80058b2:	4b39      	ldr	r3, [pc, #228]	@ (8005998 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	015b      	lsls	r3, r3, #5
 80058b8:	0d1b      	lsrs	r3, r3, #20
 80058ba:	69fa      	ldr	r2, [r7, #28]
 80058bc:	fb02 f303 	mul.w	r3, r2, r3
 80058c0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058c2:	e054      	b.n	800596e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ca:	d050      	beq.n	800596e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80058cc:	f7fb fd44 	bl	8001358 <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	69bb      	ldr	r3, [r7, #24]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	69fa      	ldr	r2, [r7, #28]
 80058d8:	429a      	cmp	r2, r3
 80058da:	d902      	bls.n	80058e2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d13d      	bne.n	800595e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80058f0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	685b      	ldr	r3, [r3, #4]
 80058f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80058fa:	d111      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x94>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	689b      	ldr	r3, [r3, #8]
 8005900:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005904:	d004      	beq.n	8005910 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	689b      	ldr	r3, [r3, #8]
 800590a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800590e:	d107      	bne.n	8005920 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800591e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005924:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005928:	d10f      	bne.n	800594a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005938:	601a      	str	r2, [r3, #0]
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005948:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2200      	movs	r2, #0
 8005956:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e017      	b.n	800598e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005964:	2300      	movs	r3, #0
 8005966:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	3b01      	subs	r3, #1
 800596c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	689a      	ldr	r2, [r3, #8]
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	4013      	ands	r3, r2
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	429a      	cmp	r2, r3
 800597c:	bf0c      	ite	eq
 800597e:	2301      	moveq	r3, #1
 8005980:	2300      	movne	r3, #0
 8005982:	b2db      	uxtb	r3, r3
 8005984:	461a      	mov	r2, r3
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	429a      	cmp	r2, r3
 800598a:	d19b      	bne.n	80058c4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3720      	adds	r7, #32
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20000000 	.word	0x20000000

0800599c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b08a      	sub	sp, #40	@ 0x28
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	60f8      	str	r0, [r7, #12]
 80059a4:	60b9      	str	r1, [r7, #8]
 80059a6:	607a      	str	r2, [r7, #4]
 80059a8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80059aa:	2300      	movs	r3, #0
 80059ac:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80059ae:	f7fb fcd3 	bl	8001358 <HAL_GetTick>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b6:	1a9b      	subs	r3, r3, r2
 80059b8:	683a      	ldr	r2, [r7, #0]
 80059ba:	4413      	add	r3, r2
 80059bc:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 80059be:	f7fb fccb 	bl	8001358 <HAL_GetTick>
 80059c2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	330c      	adds	r3, #12
 80059ca:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80059cc:	4b3d      	ldr	r3, [pc, #244]	@ (8005ac4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	00da      	lsls	r2, r3, #3
 80059d8:	1ad3      	subs	r3, r2, r3
 80059da:	0d1b      	lsrs	r3, r3, #20
 80059dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80059e4:	e060      	b.n	8005aa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80059ec:	d107      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0x62>
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d104      	bne.n	80059fe <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80059f4:	69fb      	ldr	r3, [r7, #28]
 80059f6:	781b      	ldrb	r3, [r3, #0]
 80059f8:	b2db      	uxtb	r3, r3
 80059fa:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80059fc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80059fe:	683b      	ldr	r3, [r7, #0]
 8005a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a04:	d050      	beq.n	8005aa8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005a06:	f7fb fca7 	bl	8001358 <HAL_GetTick>
 8005a0a:	4602      	mov	r2, r0
 8005a0c:	6a3b      	ldr	r3, [r7, #32]
 8005a0e:	1ad3      	subs	r3, r2, r3
 8005a10:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a12:	429a      	cmp	r2, r3
 8005a14:	d902      	bls.n	8005a1c <SPI_WaitFifoStateUntilTimeout+0x80>
 8005a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d13d      	bne.n	8005a98 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	685a      	ldr	r2, [r3, #4]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005a2a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a34:	d111      	bne.n	8005a5a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005a3e:	d004      	beq.n	8005a4a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005a48:	d107      	bne.n	8005a5a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005a58:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005a62:	d10f      	bne.n	8005a84 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005a72:	601a      	str	r2, [r3, #0]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a82:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2200      	movs	r2, #0
 8005a90:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8005a94:	2303      	movs	r3, #3
 8005a96:	e010      	b.n	8005aba <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005a98:	69bb      	ldr	r3, [r7, #24]
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d101      	bne.n	8005aa2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8005aa2:	69bb      	ldr	r3, [r7, #24]
 8005aa4:	3b01      	subs	r3, #1
 8005aa6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	689a      	ldr	r2, [r3, #8]
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d196      	bne.n	80059e6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005ab8:	2300      	movs	r3, #0
}
 8005aba:	4618      	mov	r0, r3
 8005abc:	3728      	adds	r7, #40	@ 0x28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	bd80      	pop	{r7, pc}
 8005ac2:	bf00      	nop
 8005ac4:	20000000 	.word	0x20000000

08005ac8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b086      	sub	sp, #24
 8005acc:	af02      	add	r7, sp, #8
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	9300      	str	r3, [sp, #0]
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	2200      	movs	r2, #0
 8005adc:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff ff5b 	bl	800599c <SPI_WaitFifoStateUntilTimeout>
 8005ae6:	4603      	mov	r3, r0
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d007      	beq.n	8005afc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005af0:	f043 0220 	orr.w	r2, r3, #32
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005af8:	2303      	movs	r3, #3
 8005afa:	e027      	b.n	8005b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	9300      	str	r3, [sp, #0]
 8005b00:	68bb      	ldr	r3, [r7, #8]
 8005b02:	2200      	movs	r2, #0
 8005b04:	2180      	movs	r1, #128	@ 0x80
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f7ff fec0 	bl	800588c <SPI_WaitFlagStateUntilTimeout>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d007      	beq.n	8005b22 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b16:	f043 0220 	orr.w	r2, r3, #32
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b1e:	2303      	movs	r3, #3
 8005b20:	e014      	b.n	8005b4c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	9300      	str	r3, [sp, #0]
 8005b26:	68bb      	ldr	r3, [r7, #8]
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8005b2e:	68f8      	ldr	r0, [r7, #12]
 8005b30:	f7ff ff34 	bl	800599c <SPI_WaitFifoStateUntilTimeout>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d007      	beq.n	8005b4a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005b3e:	f043 0220 	orr.w	r2, r3, #32
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8005b46:	2303      	movs	r3, #3
 8005b48:	e000      	b.n	8005b4c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	3710      	adds	r7, #16
 8005b50:	46bd      	mov	sp, r7
 8005b52:	bd80      	pop	{r7, pc}

08005b54 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e040      	b.n	8005be8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f7fb f8fa 	bl	8000d70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2224      	movs	r2, #36	@ 0x24
 8005b80:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f022 0201 	bic.w	r2, r2, #1
 8005b90:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8005b9a:	6878      	ldr	r0, [r7, #4]
 8005b9c:	f000 fe90 	bl	80068c0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f000 fbd5 	bl	8006350 <UART_SetConfig>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	2b01      	cmp	r3, #1
 8005baa:	d101      	bne.n	8005bb0 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8005bac:	2301      	movs	r3, #1
 8005bae:	e01b      	b.n	8005be8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	685a      	ldr	r2, [r3, #4]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bbe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689a      	ldr	r2, [r3, #8]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	f042 0201 	orr.w	r2, r2, #1
 8005bde:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 ff0f 	bl	8006a04 <UART_CheckIdleState>
 8005be6:	4603      	mov	r3, r0
}
 8005be8:	4618      	mov	r0, r3
 8005bea:	3708      	adds	r7, #8
 8005bec:	46bd      	mov	sp, r7
 8005bee:	bd80      	pop	{r7, pc}

08005bf0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08a      	sub	sp, #40	@ 0x28
 8005bf4:	af02      	add	r7, sp, #8
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	603b      	str	r3, [r7, #0]
 8005bfc:	4613      	mov	r3, r2
 8005bfe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	d177      	bne.n	8005cf8 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d002      	beq.n	8005c14 <HAL_UART_Transmit+0x24>
 8005c0e:	88fb      	ldrh	r3, [r7, #6]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e070      	b.n	8005cfa <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	2221      	movs	r2, #33	@ 0x21
 8005c24:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c26:	f7fb fb97 	bl	8001358 <HAL_GetTick>
 8005c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	88fa      	ldrh	r2, [r7, #6]
 8005c30:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	88fa      	ldrh	r2, [r7, #6]
 8005c38:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	689b      	ldr	r3, [r3, #8]
 8005c40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c44:	d108      	bne.n	8005c58 <HAL_UART_Transmit+0x68>
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	691b      	ldr	r3, [r3, #16]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d104      	bne.n	8005c58 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005c4e:	2300      	movs	r3, #0
 8005c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	61bb      	str	r3, [r7, #24]
 8005c56:	e003      	b.n	8005c60 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c60:	e02f      	b.n	8005cc2 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	9300      	str	r3, [sp, #0]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	2180      	movs	r1, #128	@ 0x80
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 ff71 	bl	8006b54 <UART_WaitOnFlagUntilTimeout>
 8005c72:	4603      	mov	r3, r0
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d004      	beq.n	8005c82 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	2220      	movs	r2, #32
 8005c7c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e03b      	b.n	8005cfa <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d10b      	bne.n	8005ca0 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	881a      	ldrh	r2, [r3, #0]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c94:	b292      	uxth	r2, r2
 8005c96:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c98:	69bb      	ldr	r3, [r7, #24]
 8005c9a:	3302      	adds	r3, #2
 8005c9c:	61bb      	str	r3, [r7, #24]
 8005c9e:	e007      	b.n	8005cb0 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	781a      	ldrb	r2, [r3, #0]
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	3301      	adds	r3, #1
 8005cae:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1c9      	bne.n	8005c62 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	9300      	str	r3, [sp, #0]
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	2140      	movs	r1, #64	@ 0x40
 8005cd8:	68f8      	ldr	r0, [r7, #12]
 8005cda:	f000 ff3b 	bl	8006b54 <UART_WaitOnFlagUntilTimeout>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d004      	beq.n	8005cee <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	2220      	movs	r2, #32
 8005ce8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005cea:	2303      	movs	r3, #3
 8005cec:	e005      	b.n	8005cfa <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2220      	movs	r2, #32
 8005cf2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	e000      	b.n	8005cfa <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005cf8:	2302      	movs	r3, #2
  }
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3720      	adds	r7, #32
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
	...

08005d04 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b0ba      	sub	sp, #232	@ 0xe8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d2a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d2e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d32:	4013      	ands	r3, r2
 8005d34:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d115      	bne.n	8005d6c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005d40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d44:	f003 0320 	and.w	r3, r3, #32
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d00f      	beq.n	8005d6c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005d4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d50:	f003 0320 	and.w	r3, r3, #32
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d009      	beq.n	8005d6c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	f000 82ca 	beq.w	80062f6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d66:	6878      	ldr	r0, [r7, #4]
 8005d68:	4798      	blx	r3
      }
      return;
 8005d6a:	e2c4      	b.n	80062f6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8005d6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	f000 8117 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005d76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d106      	bne.n	8005d90 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005d82:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005d86:	4b85      	ldr	r3, [pc, #532]	@ (8005f9c <HAL_UART_IRQHandler+0x298>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	f000 810a 	beq.w	8005fa4 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d94:	f003 0301 	and.w	r3, r3, #1
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d011      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xbc>
 8005d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d00b      	beq.n	8005dc0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2201      	movs	r2, #1
 8005dae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005db6:	f043 0201 	orr.w	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dc4:	f003 0302 	and.w	r3, r3, #2
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d011      	beq.n	8005df0 <HAL_UART_IRQHandler+0xec>
 8005dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005dd0:	f003 0301 	and.w	r3, r3, #1
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d00b      	beq.n	8005df0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2202      	movs	r2, #2
 8005dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005de6:	f043 0204 	orr.w	r2, r3, #4
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005df4:	f003 0304 	and.w	r3, r3, #4
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d011      	beq.n	8005e20 <HAL_UART_IRQHandler+0x11c>
 8005dfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d00b      	beq.n	8005e20 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	2204      	movs	r2, #4
 8005e0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e16:	f043 0202 	orr.w	r2, r3, #2
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e24:	f003 0308 	and.w	r3, r3, #8
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d017      	beq.n	8005e5c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e30:	f003 0320 	and.w	r3, r3, #32
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d105      	bne.n	8005e44 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005e38:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e3c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d00b      	beq.n	8005e5c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	2208      	movs	r2, #8
 8005e4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e52:	f043 0208 	orr.w	r2, r3, #8
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e60:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d012      	beq.n	8005e8e <HAL_UART_IRQHandler+0x18a>
 8005e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e6c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d00c      	beq.n	8005e8e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005e7c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e84:	f043 0220 	orr.w	r2, r3, #32
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	f000 8230 	beq.w	80062fa <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005e9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d00d      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005ea6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eaa:	f003 0320 	and.w	r3, r3, #32
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d003      	beq.n	8005ec2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ec8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ed6:	2b40      	cmp	r3, #64	@ 0x40
 8005ed8:	d005      	beq.n	8005ee6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005ede:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d04f      	beq.n	8005f86 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fea1 	bl	8006c2e <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ef6:	2b40      	cmp	r3, #64	@ 0x40
 8005ef8:	d141      	bne.n	8005f7e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	3308      	adds	r3, #8
 8005f00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f04:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f08:	e853 3f00 	ldrex	r3, [r3]
 8005f0c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f10:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f14:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3308      	adds	r3, #8
 8005f22:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f26:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f2a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f2e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f32:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f36:	e841 2300 	strex	r3, r2, [r1]
 8005f3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f3e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1d9      	bne.n	8005efa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d013      	beq.n	8005f76 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f52:	4a13      	ldr	r2, [pc, #76]	@ (8005fa0 <HAL_UART_IRQHandler+0x29c>)
 8005f54:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f7fb fc34 	bl	80017c8 <HAL_DMA_Abort_IT>
 8005f60:	4603      	mov	r3, r0
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d017      	beq.n	8005f96 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8005f70:	4610      	mov	r0, r2
 8005f72:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f74:	e00f      	b.n	8005f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f76:	6878      	ldr	r0, [r7, #4]
 8005f78:	f000 f9d4 	bl	8006324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f7c:	e00b      	b.n	8005f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 f9d0 	bl	8006324 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f84:	e007      	b.n	8005f96 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 f9cc 	bl	8006324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8005f94:	e1b1      	b.n	80062fa <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f96:	bf00      	nop
    return;
 8005f98:	e1af      	b.n	80062fa <HAL_UART_IRQHandler+0x5f6>
 8005f9a:	bf00      	nop
 8005f9c:	04000120 	.word	0x04000120
 8005fa0:	08006cf7 	.word	0x08006cf7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	f040 816a 	bne.w	8006282 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fb2:	f003 0310 	and.w	r3, r3, #16
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 8163 	beq.w	8006282 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fc0:	f003 0310 	and.w	r3, r3, #16
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	f000 815c 	beq.w	8006282 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2210      	movs	r2, #16
 8005fd0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fdc:	2b40      	cmp	r3, #64	@ 0x40
 8005fde:	f040 80d4 	bne.w	800618a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	685b      	ldr	r3, [r3, #4]
 8005fea:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005fee:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	f000 80ad 	beq.w	8006152 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005ffe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006002:	429a      	cmp	r2, r3
 8006004:	f080 80a5 	bcs.w	8006152 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800600e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f003 0320 	and.w	r3, r3, #32
 800601e:	2b00      	cmp	r3, #0
 8006020:	f040 8086 	bne.w	8006130 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800602c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006030:	e853 3f00 	ldrex	r3, [r3]
 8006034:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006038:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800603c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006040:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	461a      	mov	r2, r3
 800604a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 800604e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8006052:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006056:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800605a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800605e:	e841 2300 	strex	r3, r2, [r1]
 8006062:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006066:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1da      	bne.n	8006024 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3308      	adds	r3, #8
 8006074:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006078:	e853 3f00 	ldrex	r3, [r3]
 800607c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800607e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006080:	f023 0301 	bic.w	r3, r3, #1
 8006084:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	3308      	adds	r3, #8
 800608e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006092:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006096:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006098:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800609a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800609e:	e841 2300 	strex	r3, r2, [r1]
 80060a2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060a4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1e1      	bne.n	800606e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	3308      	adds	r3, #8
 80060b0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060b2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80060b4:	e853 3f00 	ldrex	r3, [r3]
 80060b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80060ba:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060bc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80060c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3308      	adds	r3, #8
 80060ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80060ce:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80060d0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060d2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80060d4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80060d6:	e841 2300 	strex	r3, r2, [r1]
 80060da:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80060dc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d1e3      	bne.n	80060aa <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	2220      	movs	r2, #32
 80060e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	2200      	movs	r2, #0
 80060ee:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80060f8:	e853 3f00 	ldrex	r3, [r3]
 80060fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80060fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006100:	f023 0310 	bic.w	r3, r3, #16
 8006104:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	461a      	mov	r2, r3
 800610e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006112:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006114:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006116:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800611a:	e841 2300 	strex	r3, r2, [r1]
 800611e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006120:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006122:	2b00      	cmp	r3, #0
 8006124:	d1e4      	bne.n	80060f0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800612a:	4618      	mov	r0, r3
 800612c:	f7fb fb0e 	bl	800174c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2202      	movs	r2, #2
 8006134:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006142:	b29b      	uxth	r3, r3
 8006144:	1ad3      	subs	r3, r2, r3
 8006146:	b29b      	uxth	r3, r3
 8006148:	4619      	mov	r1, r3
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f000 f8f4 	bl	8006338 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006150:	e0d5      	b.n	80062fe <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006158:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800615c:	429a      	cmp	r2, r3
 800615e:	f040 80ce 	bne.w	80062fe <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f003 0320 	and.w	r3, r3, #32
 800616e:	2b20      	cmp	r3, #32
 8006170:	f040 80c5 	bne.w	80062fe <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2202      	movs	r2, #2
 8006178:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006180:	4619      	mov	r1, r3
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f000 f8d8 	bl	8006338 <HAL_UARTEx_RxEventCallback>
      return;
 8006188:	e0b9      	b.n	80062fe <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8006196:	b29b      	uxth	r3, r3
 8006198:	1ad3      	subs	r3, r2, r3
 800619a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	f000 80ab 	beq.w	8006302 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 80061ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 80a6 	beq.w	8006302 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061c6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	461a      	mov	r2, r3
 80061d4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80061da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061e0:	e841 2300 	strex	r3, r2, [r1]
 80061e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80061e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d1e4      	bne.n	80061b6 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	3308      	adds	r3, #8
 80061f2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f6:	e853 3f00 	ldrex	r3, [r3]
 80061fa:	623b      	str	r3, [r7, #32]
   return(result);
 80061fc:	6a3b      	ldr	r3, [r7, #32]
 80061fe:	f023 0301 	bic.w	r3, r3, #1
 8006202:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006210:	633a      	str	r2, [r7, #48]	@ 0x30
 8006212:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006214:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006216:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006218:	e841 2300 	strex	r3, r2, [r1]
 800621c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800621e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006220:	2b00      	cmp	r3, #0
 8006222:	d1e3      	bne.n	80061ec <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2220      	movs	r2, #32
 8006228:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2200      	movs	r2, #0
 8006236:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	e853 3f00 	ldrex	r3, [r3]
 8006244:	60fb      	str	r3, [r7, #12]
   return(result);
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	f023 0310 	bic.w	r3, r3, #16
 800624c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625e:	69b9      	ldr	r1, [r7, #24]
 8006260:	69fa      	ldr	r2, [r7, #28]
 8006262:	e841 2300 	strex	r3, r2, [r1]
 8006266:	617b      	str	r3, [r7, #20]
   return(result);
 8006268:	697b      	ldr	r3, [r7, #20]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d1e4      	bne.n	8006238 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	2202      	movs	r2, #2
 8006272:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f85c 	bl	8006338 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006280:	e03f      	b.n	8006302 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006282:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006286:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00e      	beq.n	80062ac <HAL_UART_IRQHandler+0x5a8>
 800628e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006296:	2b00      	cmp	r3, #0
 8006298:	d008      	beq.n	80062ac <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80062a2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062a4:	6878      	ldr	r0, [r7, #4]
 80062a6:	f000 fd66 	bl	8006d76 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062aa:	e02d      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80062ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80062b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062bc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d008      	beq.n	80062d6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d01c      	beq.n	8006306 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	4798      	blx	r3
    }
    return;
 80062d4:	e017      	b.n	8006306 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d012      	beq.n	8006308 <HAL_UART_IRQHandler+0x604>
 80062e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d00c      	beq.n	8006308 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fd17 	bl	8006d22 <UART_EndTransmit_IT>
    return;
 80062f4:	e008      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
      return;
 80062f6:	bf00      	nop
 80062f8:	e006      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
    return;
 80062fa:	bf00      	nop
 80062fc:	e004      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
      return;
 80062fe:	bf00      	nop
 8006300:	e002      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
      return;
 8006302:	bf00      	nop
 8006304:	e000      	b.n	8006308 <HAL_UART_IRQHandler+0x604>
    return;
 8006306:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8006308:	37e8      	adds	r7, #232	@ 0xe8
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}
 800630e:	bf00      	nop

08006310 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006310:	b480      	push	{r7}
 8006312:	b083      	sub	sp, #12
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006318:	bf00      	nop
 800631a:	370c      	adds	r7, #12
 800631c:	46bd      	mov	sp, r7
 800631e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006322:	4770      	bx	lr

08006324 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
 8006340:	460b      	mov	r3, r1
 8006342:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006350:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006354:	b08a      	sub	sp, #40	@ 0x28
 8006356:	af00      	add	r7, sp, #0
 8006358:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800635a:	2300      	movs	r3, #0
 800635c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	689a      	ldr	r2, [r3, #8]
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	691b      	ldr	r3, [r3, #16]
 8006368:	431a      	orrs	r2, r3
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	695b      	ldr	r3, [r3, #20]
 800636e:	431a      	orrs	r2, r3
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	4313      	orrs	r3, r2
 8006376:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	4ba4      	ldr	r3, [pc, #656]	@ (8006610 <UART_SetConfig+0x2c0>)
 8006380:	4013      	ands	r3, r2
 8006382:	68fa      	ldr	r2, [r7, #12]
 8006384:	6812      	ldr	r2, [r2, #0]
 8006386:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006388:	430b      	orrs	r3, r1
 800638a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	68da      	ldr	r2, [r3, #12]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	430a      	orrs	r2, r1
 80063a0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	4a99      	ldr	r2, [pc, #612]	@ (8006614 <UART_SetConfig+0x2c4>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d004      	beq.n	80063bc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	6a1b      	ldr	r3, [r3, #32]
 80063b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063b8:	4313      	orrs	r3, r2
 80063ba:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	689b      	ldr	r3, [r3, #8]
 80063c2:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063cc:	430a      	orrs	r2, r1
 80063ce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a90      	ldr	r2, [pc, #576]	@ (8006618 <UART_SetConfig+0x2c8>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d126      	bne.n	8006428 <UART_SetConfig+0xd8>
 80063da:	4b90      	ldr	r3, [pc, #576]	@ (800661c <UART_SetConfig+0x2cc>)
 80063dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e0:	f003 0303 	and.w	r3, r3, #3
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d81b      	bhi.n	8006420 <UART_SetConfig+0xd0>
 80063e8:	a201      	add	r2, pc, #4	@ (adr r2, 80063f0 <UART_SetConfig+0xa0>)
 80063ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063ee:	bf00      	nop
 80063f0:	08006401 	.word	0x08006401
 80063f4:	08006411 	.word	0x08006411
 80063f8:	08006409 	.word	0x08006409
 80063fc:	08006419 	.word	0x08006419
 8006400:	2301      	movs	r3, #1
 8006402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006406:	e116      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006408:	2302      	movs	r3, #2
 800640a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800640e:	e112      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006410:	2304      	movs	r3, #4
 8006412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006416:	e10e      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006418:	2308      	movs	r3, #8
 800641a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800641e:	e10a      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006420:	2310      	movs	r3, #16
 8006422:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006426:	e106      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a7c      	ldr	r2, [pc, #496]	@ (8006620 <UART_SetConfig+0x2d0>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d138      	bne.n	80064a4 <UART_SetConfig+0x154>
 8006432:	4b7a      	ldr	r3, [pc, #488]	@ (800661c <UART_SetConfig+0x2cc>)
 8006434:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006438:	f003 030c 	and.w	r3, r3, #12
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d82d      	bhi.n	800649c <UART_SetConfig+0x14c>
 8006440:	a201      	add	r2, pc, #4	@ (adr r2, 8006448 <UART_SetConfig+0xf8>)
 8006442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006446:	bf00      	nop
 8006448:	0800647d 	.word	0x0800647d
 800644c:	0800649d 	.word	0x0800649d
 8006450:	0800649d 	.word	0x0800649d
 8006454:	0800649d 	.word	0x0800649d
 8006458:	0800648d 	.word	0x0800648d
 800645c:	0800649d 	.word	0x0800649d
 8006460:	0800649d 	.word	0x0800649d
 8006464:	0800649d 	.word	0x0800649d
 8006468:	08006485 	.word	0x08006485
 800646c:	0800649d 	.word	0x0800649d
 8006470:	0800649d 	.word	0x0800649d
 8006474:	0800649d 	.word	0x0800649d
 8006478:	08006495 	.word	0x08006495
 800647c:	2300      	movs	r3, #0
 800647e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006482:	e0d8      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006484:	2302      	movs	r3, #2
 8006486:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800648a:	e0d4      	b.n	8006636 <UART_SetConfig+0x2e6>
 800648c:	2304      	movs	r3, #4
 800648e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006492:	e0d0      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006494:	2308      	movs	r3, #8
 8006496:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800649a:	e0cc      	b.n	8006636 <UART_SetConfig+0x2e6>
 800649c:	2310      	movs	r3, #16
 800649e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064a2:	e0c8      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a5e      	ldr	r2, [pc, #376]	@ (8006624 <UART_SetConfig+0x2d4>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d125      	bne.n	80064fa <UART_SetConfig+0x1aa>
 80064ae:	4b5b      	ldr	r3, [pc, #364]	@ (800661c <UART_SetConfig+0x2cc>)
 80064b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064b4:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064b8:	2b30      	cmp	r3, #48	@ 0x30
 80064ba:	d016      	beq.n	80064ea <UART_SetConfig+0x19a>
 80064bc:	2b30      	cmp	r3, #48	@ 0x30
 80064be:	d818      	bhi.n	80064f2 <UART_SetConfig+0x1a2>
 80064c0:	2b20      	cmp	r3, #32
 80064c2:	d00a      	beq.n	80064da <UART_SetConfig+0x18a>
 80064c4:	2b20      	cmp	r3, #32
 80064c6:	d814      	bhi.n	80064f2 <UART_SetConfig+0x1a2>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <UART_SetConfig+0x182>
 80064cc:	2b10      	cmp	r3, #16
 80064ce:	d008      	beq.n	80064e2 <UART_SetConfig+0x192>
 80064d0:	e00f      	b.n	80064f2 <UART_SetConfig+0x1a2>
 80064d2:	2300      	movs	r3, #0
 80064d4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064d8:	e0ad      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064da:	2302      	movs	r3, #2
 80064dc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e0:	e0a9      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064e2:	2304      	movs	r3, #4
 80064e4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064e8:	e0a5      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064ea:	2308      	movs	r3, #8
 80064ec:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f0:	e0a1      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064f2:	2310      	movs	r3, #16
 80064f4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80064f8:	e09d      	b.n	8006636 <UART_SetConfig+0x2e6>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	4a4a      	ldr	r2, [pc, #296]	@ (8006628 <UART_SetConfig+0x2d8>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d125      	bne.n	8006550 <UART_SetConfig+0x200>
 8006504:	4b45      	ldr	r3, [pc, #276]	@ (800661c <UART_SetConfig+0x2cc>)
 8006506:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800650a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800650e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006510:	d016      	beq.n	8006540 <UART_SetConfig+0x1f0>
 8006512:	2bc0      	cmp	r3, #192	@ 0xc0
 8006514:	d818      	bhi.n	8006548 <UART_SetConfig+0x1f8>
 8006516:	2b80      	cmp	r3, #128	@ 0x80
 8006518:	d00a      	beq.n	8006530 <UART_SetConfig+0x1e0>
 800651a:	2b80      	cmp	r3, #128	@ 0x80
 800651c:	d814      	bhi.n	8006548 <UART_SetConfig+0x1f8>
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <UART_SetConfig+0x1d8>
 8006522:	2b40      	cmp	r3, #64	@ 0x40
 8006524:	d008      	beq.n	8006538 <UART_SetConfig+0x1e8>
 8006526:	e00f      	b.n	8006548 <UART_SetConfig+0x1f8>
 8006528:	2300      	movs	r3, #0
 800652a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800652e:	e082      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006530:	2302      	movs	r3, #2
 8006532:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006536:	e07e      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006538:	2304      	movs	r3, #4
 800653a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800653e:	e07a      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006540:	2308      	movs	r3, #8
 8006542:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006546:	e076      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006548:	2310      	movs	r3, #16
 800654a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800654e:	e072      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	4a35      	ldr	r2, [pc, #212]	@ (800662c <UART_SetConfig+0x2dc>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d12a      	bne.n	80065b0 <UART_SetConfig+0x260>
 800655a:	4b30      	ldr	r3, [pc, #192]	@ (800661c <UART_SetConfig+0x2cc>)
 800655c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006560:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006564:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006568:	d01a      	beq.n	80065a0 <UART_SetConfig+0x250>
 800656a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800656e:	d81b      	bhi.n	80065a8 <UART_SetConfig+0x258>
 8006570:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006574:	d00c      	beq.n	8006590 <UART_SetConfig+0x240>
 8006576:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800657a:	d815      	bhi.n	80065a8 <UART_SetConfig+0x258>
 800657c:	2b00      	cmp	r3, #0
 800657e:	d003      	beq.n	8006588 <UART_SetConfig+0x238>
 8006580:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006584:	d008      	beq.n	8006598 <UART_SetConfig+0x248>
 8006586:	e00f      	b.n	80065a8 <UART_SetConfig+0x258>
 8006588:	2300      	movs	r3, #0
 800658a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800658e:	e052      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006590:	2302      	movs	r3, #2
 8006592:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006596:	e04e      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006598:	2304      	movs	r3, #4
 800659a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800659e:	e04a      	b.n	8006636 <UART_SetConfig+0x2e6>
 80065a0:	2308      	movs	r3, #8
 80065a2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065a6:	e046      	b.n	8006636 <UART_SetConfig+0x2e6>
 80065a8:	2310      	movs	r3, #16
 80065aa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ae:	e042      	b.n	8006636 <UART_SetConfig+0x2e6>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	4a17      	ldr	r2, [pc, #92]	@ (8006614 <UART_SetConfig+0x2c4>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d13a      	bne.n	8006630 <UART_SetConfig+0x2e0>
 80065ba:	4b18      	ldr	r3, [pc, #96]	@ (800661c <UART_SetConfig+0x2cc>)
 80065bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065c0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80065c4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065c8:	d01a      	beq.n	8006600 <UART_SetConfig+0x2b0>
 80065ca:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80065ce:	d81b      	bhi.n	8006608 <UART_SetConfig+0x2b8>
 80065d0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065d4:	d00c      	beq.n	80065f0 <UART_SetConfig+0x2a0>
 80065d6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065da:	d815      	bhi.n	8006608 <UART_SetConfig+0x2b8>
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d003      	beq.n	80065e8 <UART_SetConfig+0x298>
 80065e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065e4:	d008      	beq.n	80065f8 <UART_SetConfig+0x2a8>
 80065e6:	e00f      	b.n	8006608 <UART_SetConfig+0x2b8>
 80065e8:	2300      	movs	r3, #0
 80065ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065ee:	e022      	b.n	8006636 <UART_SetConfig+0x2e6>
 80065f0:	2302      	movs	r3, #2
 80065f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065f6:	e01e      	b.n	8006636 <UART_SetConfig+0x2e6>
 80065f8:	2304      	movs	r3, #4
 80065fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80065fe:	e01a      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006600:	2308      	movs	r3, #8
 8006602:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8006606:	e016      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006608:	2310      	movs	r3, #16
 800660a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800660e:	e012      	b.n	8006636 <UART_SetConfig+0x2e6>
 8006610:	efff69f3 	.word	0xefff69f3
 8006614:	40008000 	.word	0x40008000
 8006618:	40013800 	.word	0x40013800
 800661c:	40021000 	.word	0x40021000
 8006620:	40004400 	.word	0x40004400
 8006624:	40004800 	.word	0x40004800
 8006628:	40004c00 	.word	0x40004c00
 800662c:	40005000 	.word	0x40005000
 8006630:	2310      	movs	r3, #16
 8006632:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4a9f      	ldr	r2, [pc, #636]	@ (80068b8 <UART_SetConfig+0x568>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d17a      	bne.n	8006736 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006640:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006644:	2b08      	cmp	r3, #8
 8006646:	d824      	bhi.n	8006692 <UART_SetConfig+0x342>
 8006648:	a201      	add	r2, pc, #4	@ (adr r2, 8006650 <UART_SetConfig+0x300>)
 800664a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800664e:	bf00      	nop
 8006650:	08006675 	.word	0x08006675
 8006654:	08006693 	.word	0x08006693
 8006658:	0800667d 	.word	0x0800667d
 800665c:	08006693 	.word	0x08006693
 8006660:	08006683 	.word	0x08006683
 8006664:	08006693 	.word	0x08006693
 8006668:	08006693 	.word	0x08006693
 800666c:	08006693 	.word	0x08006693
 8006670:	0800668b 	.word	0x0800668b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006674:	f7fc fdee 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8006678:	61f8      	str	r0, [r7, #28]
        break;
 800667a:	e010      	b.n	800669e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800667c:	4b8f      	ldr	r3, [pc, #572]	@ (80068bc <UART_SetConfig+0x56c>)
 800667e:	61fb      	str	r3, [r7, #28]
        break;
 8006680:	e00d      	b.n	800669e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006682:	f7fc fd4f 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 8006686:	61f8      	str	r0, [r7, #28]
        break;
 8006688:	e009      	b.n	800669e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800668a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800668e:	61fb      	str	r3, [r7, #28]
        break;
 8006690:	e005      	b.n	800669e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8006692:	2300      	movs	r3, #0
 8006694:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800669c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800669e:	69fb      	ldr	r3, [r7, #28]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80fb 	beq.w	800689c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	685a      	ldr	r2, [r3, #4]
 80066aa:	4613      	mov	r3, r2
 80066ac:	005b      	lsls	r3, r3, #1
 80066ae:	4413      	add	r3, r2
 80066b0:	69fa      	ldr	r2, [r7, #28]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d305      	bcc.n	80066c2 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	685b      	ldr	r3, [r3, #4]
 80066ba:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80066bc:	69fa      	ldr	r2, [r7, #28]
 80066be:	429a      	cmp	r2, r3
 80066c0:	d903      	bls.n	80066ca <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 80066c2:	2301      	movs	r3, #1
 80066c4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80066c8:	e0e8      	b.n	800689c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80066ca:	69fb      	ldr	r3, [r7, #28]
 80066cc:	2200      	movs	r2, #0
 80066ce:	461c      	mov	r4, r3
 80066d0:	4615      	mov	r5, r2
 80066d2:	f04f 0200 	mov.w	r2, #0
 80066d6:	f04f 0300 	mov.w	r3, #0
 80066da:	022b      	lsls	r3, r5, #8
 80066dc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80066e0:	0222      	lsls	r2, r4, #8
 80066e2:	68f9      	ldr	r1, [r7, #12]
 80066e4:	6849      	ldr	r1, [r1, #4]
 80066e6:	0849      	lsrs	r1, r1, #1
 80066e8:	2000      	movs	r0, #0
 80066ea:	4688      	mov	r8, r1
 80066ec:	4681      	mov	r9, r0
 80066ee:	eb12 0a08 	adds.w	sl, r2, r8
 80066f2:	eb43 0b09 	adc.w	fp, r3, r9
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	603b      	str	r3, [r7, #0]
 80066fe:	607a      	str	r2, [r7, #4]
 8006700:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006704:	4650      	mov	r0, sl
 8006706:	4659      	mov	r1, fp
 8006708:	f7f9 fdb2 	bl	8000270 <__aeabi_uldivmod>
 800670c:	4602      	mov	r2, r0
 800670e:	460b      	mov	r3, r1
 8006710:	4613      	mov	r3, r2
 8006712:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006714:	69bb      	ldr	r3, [r7, #24]
 8006716:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800671a:	d308      	bcc.n	800672e <UART_SetConfig+0x3de>
 800671c:	69bb      	ldr	r3, [r7, #24]
 800671e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006722:	d204      	bcs.n	800672e <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	69ba      	ldr	r2, [r7, #24]
 800672a:	60da      	str	r2, [r3, #12]
 800672c:	e0b6      	b.n	800689c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8006734:	e0b2      	b.n	800689c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	69db      	ldr	r3, [r3, #28]
 800673a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800673e:	d15e      	bne.n	80067fe <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8006740:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006744:	2b08      	cmp	r3, #8
 8006746:	d828      	bhi.n	800679a <UART_SetConfig+0x44a>
 8006748:	a201      	add	r2, pc, #4	@ (adr r2, 8006750 <UART_SetConfig+0x400>)
 800674a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800674e:	bf00      	nop
 8006750:	08006775 	.word	0x08006775
 8006754:	0800677d 	.word	0x0800677d
 8006758:	08006785 	.word	0x08006785
 800675c:	0800679b 	.word	0x0800679b
 8006760:	0800678b 	.word	0x0800678b
 8006764:	0800679b 	.word	0x0800679b
 8006768:	0800679b 	.word	0x0800679b
 800676c:	0800679b 	.word	0x0800679b
 8006770:	08006793 	.word	0x08006793
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006774:	f7fc fd6e 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8006778:	61f8      	str	r0, [r7, #28]
        break;
 800677a:	e014      	b.n	80067a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800677c:	f7fc fd80 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 8006780:	61f8      	str	r0, [r7, #28]
        break;
 8006782:	e010      	b.n	80067a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006784:	4b4d      	ldr	r3, [pc, #308]	@ (80068bc <UART_SetConfig+0x56c>)
 8006786:	61fb      	str	r3, [r7, #28]
        break;
 8006788:	e00d      	b.n	80067a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800678a:	f7fc fccb 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800678e:	61f8      	str	r0, [r7, #28]
        break;
 8006790:	e009      	b.n	80067a6 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006792:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006796:	61fb      	str	r3, [r7, #28]
        break;
 8006798:	e005      	b.n	80067a6 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800679a:	2300      	movs	r3, #0
 800679c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800679e:	2301      	movs	r3, #1
 80067a0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 80067a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067a6:	69fb      	ldr	r3, [r7, #28]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d077      	beq.n	800689c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80067ac:	69fb      	ldr	r3, [r7, #28]
 80067ae:	005a      	lsls	r2, r3, #1
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	085b      	lsrs	r3, r3, #1
 80067b6:	441a      	add	r2, r3
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80067c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067c2:	69bb      	ldr	r3, [r7, #24]
 80067c4:	2b0f      	cmp	r3, #15
 80067c6:	d916      	bls.n	80067f6 <UART_SetConfig+0x4a6>
 80067c8:	69bb      	ldr	r3, [r7, #24]
 80067ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067ce:	d212      	bcs.n	80067f6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	b29b      	uxth	r3, r3
 80067d4:	f023 030f 	bic.w	r3, r3, #15
 80067d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	085b      	lsrs	r3, r3, #1
 80067de:	b29b      	uxth	r3, r3
 80067e0:	f003 0307 	and.w	r3, r3, #7
 80067e4:	b29a      	uxth	r2, r3
 80067e6:	8afb      	ldrh	r3, [r7, #22]
 80067e8:	4313      	orrs	r3, r2
 80067ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	8afa      	ldrh	r2, [r7, #22]
 80067f2:	60da      	str	r2, [r3, #12]
 80067f4:	e052      	b.n	800689c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80067f6:	2301      	movs	r3, #1
 80067f8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80067fc:	e04e      	b.n	800689c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80067fe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006802:	2b08      	cmp	r3, #8
 8006804:	d827      	bhi.n	8006856 <UART_SetConfig+0x506>
 8006806:	a201      	add	r2, pc, #4	@ (adr r2, 800680c <UART_SetConfig+0x4bc>)
 8006808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800680c:	08006831 	.word	0x08006831
 8006810:	08006839 	.word	0x08006839
 8006814:	08006841 	.word	0x08006841
 8006818:	08006857 	.word	0x08006857
 800681c:	08006847 	.word	0x08006847
 8006820:	08006857 	.word	0x08006857
 8006824:	08006857 	.word	0x08006857
 8006828:	08006857 	.word	0x08006857
 800682c:	0800684f 	.word	0x0800684f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006830:	f7fc fd10 	bl	8003254 <HAL_RCC_GetPCLK1Freq>
 8006834:	61f8      	str	r0, [r7, #28]
        break;
 8006836:	e014      	b.n	8006862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006838:	f7fc fd22 	bl	8003280 <HAL_RCC_GetPCLK2Freq>
 800683c:	61f8      	str	r0, [r7, #28]
        break;
 800683e:	e010      	b.n	8006862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006840:	4b1e      	ldr	r3, [pc, #120]	@ (80068bc <UART_SetConfig+0x56c>)
 8006842:	61fb      	str	r3, [r7, #28]
        break;
 8006844:	e00d      	b.n	8006862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006846:	f7fc fc6d 	bl	8003124 <HAL_RCC_GetSysClockFreq>
 800684a:	61f8      	str	r0, [r7, #28]
        break;
 800684c:	e009      	b.n	8006862 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800684e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006852:	61fb      	str	r3, [r7, #28]
        break;
 8006854:	e005      	b.n	8006862 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8006856:	2300      	movs	r3, #0
 8006858:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800685a:	2301      	movs	r3, #1
 800685c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8006860:	bf00      	nop
    }

    if (pclk != 0U)
 8006862:	69fb      	ldr	r3, [r7, #28]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d019      	beq.n	800689c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685b      	ldr	r3, [r3, #4]
 800686c:	085a      	lsrs	r2, r3, #1
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	fbb2 f3f3 	udiv	r3, r2, r3
 800687a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800687c:	69bb      	ldr	r3, [r7, #24]
 800687e:	2b0f      	cmp	r3, #15
 8006880:	d909      	bls.n	8006896 <UART_SetConfig+0x546>
 8006882:	69bb      	ldr	r3, [r7, #24]
 8006884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006888:	d205      	bcs.n	8006896 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800688a:	69bb      	ldr	r3, [r7, #24]
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	e002      	b.n	800689c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8006896:	2301      	movs	r3, #1
 8006898:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80068a8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3728      	adds	r7, #40	@ 0x28
 80068b0:	46bd      	mov	sp, r7
 80068b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068b6:	bf00      	nop
 80068b8:	40008000 	.word	0x40008000
 80068bc:	00f42400 	.word	0x00f42400

080068c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b083      	sub	sp, #12
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068cc:	f003 0308 	and.w	r3, r3, #8
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00a      	beq.n	80068ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	685b      	ldr	r3, [r3, #4]
 80068da:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	430a      	orrs	r2, r1
 80068e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ee:	f003 0301 	and.w	r3, r3, #1
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d00a      	beq.n	800690c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	685b      	ldr	r3, [r3, #4]
 80068fc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	430a      	orrs	r2, r1
 800690a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006910:	f003 0302 	and.w	r3, r3, #2
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006932:	f003 0304 	and.w	r3, r3, #4
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006954:	f003 0310 	and.w	r3, r3, #16
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	689b      	ldr	r3, [r3, #8]
 8006962:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006976:	f003 0320 	and.w	r3, r3, #32
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	689b      	ldr	r3, [r3, #8]
 8006984:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006998:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800699c:	2b00      	cmp	r3, #0
 800699e:	d01a      	beq.n	80069d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80069ba:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069be:	d10a      	bne.n	80069d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	685b      	ldr	r3, [r3, #4]
 80069c6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	430a      	orrs	r2, r1
 80069d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00a      	beq.n	80069f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	430a      	orrs	r2, r1
 80069f6:	605a      	str	r2, [r3, #4]
  }
}
 80069f8:	bf00      	nop
 80069fa:	370c      	adds	r7, #12
 80069fc:	46bd      	mov	sp, r7
 80069fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a02:	4770      	bx	lr

08006a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b098      	sub	sp, #96	@ 0x60
 8006a08:	af02      	add	r7, sp, #8
 8006a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a14:	f7fa fca0 	bl	8001358 <HAL_GetTick>
 8006a18:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	f003 0308 	and.w	r3, r3, #8
 8006a24:	2b08      	cmp	r3, #8
 8006a26:	d12e      	bne.n	8006a86 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a28:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a2c:	9300      	str	r3, [sp, #0]
 8006a2e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a30:	2200      	movs	r2, #0
 8006a32:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a36:	6878      	ldr	r0, [r7, #4]
 8006a38:	f000 f88c 	bl	8006b54 <UART_WaitOnFlagUntilTimeout>
 8006a3c:	4603      	mov	r3, r0
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d021      	beq.n	8006a86 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a4a:	e853 3f00 	ldrex	r3, [r3]
 8006a4e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a52:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a56:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	461a      	mov	r2, r3
 8006a5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a60:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a62:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a64:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006a66:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006a68:	e841 2300 	strex	r3, r2, [r1]
 8006a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006a6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d1e6      	bne.n	8006a42 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a82:	2303      	movs	r3, #3
 8006a84:	e062      	b.n	8006b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f003 0304 	and.w	r3, r3, #4
 8006a90:	2b04      	cmp	r3, #4
 8006a92:	d149      	bne.n	8006b28 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a98:	9300      	str	r3, [sp, #0]
 8006a9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006aa2:	6878      	ldr	r0, [r7, #4]
 8006aa4:	f000 f856 	bl	8006b54 <UART_WaitOnFlagUntilTimeout>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d03c      	beq.n	8006b28 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ab6:	e853 3f00 	ldrex	r3, [r3]
 8006aba:	623b      	str	r3, [r7, #32]
   return(result);
 8006abc:	6a3b      	ldr	r3, [r7, #32]
 8006abe:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	461a      	mov	r2, r3
 8006aca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006acc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ad0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006ad2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ad4:	e841 2300 	strex	r3, r2, [r1]
 8006ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006ada:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d1e6      	bne.n	8006aae <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3308      	adds	r3, #8
 8006ae6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	e853 3f00 	ldrex	r3, [r3]
 8006aee:	60fb      	str	r3, [r7, #12]
   return(result);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f023 0301 	bic.w	r3, r3, #1
 8006af6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	3308      	adds	r3, #8
 8006afe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b00:	61fa      	str	r2, [r7, #28]
 8006b02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b04:	69b9      	ldr	r1, [r7, #24]
 8006b06:	69fa      	ldr	r2, [r7, #28]
 8006b08:	e841 2300 	strex	r3, r2, [r1]
 8006b0c:	617b      	str	r3, [r7, #20]
   return(result);
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1e5      	bne.n	8006ae0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	2220      	movs	r2, #32
 8006b18:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2200      	movs	r2, #0
 8006b20:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b24:	2303      	movs	r3, #3
 8006b26:	e011      	b.n	8006b4c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2220      	movs	r2, #32
 8006b2c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2220      	movs	r2, #32
 8006b32:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	2200      	movs	r2, #0
 8006b3a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	2200      	movs	r2, #0
 8006b40:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2200      	movs	r2, #0
 8006b46:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	3758      	adds	r7, #88	@ 0x58
 8006b50:	46bd      	mov	sp, r7
 8006b52:	bd80      	pop	{r7, pc}

08006b54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	60f8      	str	r0, [r7, #12]
 8006b5c:	60b9      	str	r1, [r7, #8]
 8006b5e:	603b      	str	r3, [r7, #0]
 8006b60:	4613      	mov	r3, r2
 8006b62:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b64:	e04f      	b.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d04b      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fa fbf3 	bl	8001358 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	683b      	ldr	r3, [r7, #0]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	69ba      	ldr	r2, [r7, #24]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <UART_WaitOnFlagUntilTimeout+0x30>
 8006b7e:	69bb      	ldr	r3, [r7, #24]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d101      	bne.n	8006b88 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	e04e      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f003 0304 	and.w	r3, r3, #4
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d037      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b96:	68bb      	ldr	r3, [r7, #8]
 8006b98:	2b80      	cmp	r3, #128	@ 0x80
 8006b9a:	d034      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006b9c:	68bb      	ldr	r3, [r7, #8]
 8006b9e:	2b40      	cmp	r3, #64	@ 0x40
 8006ba0:	d031      	beq.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	69db      	ldr	r3, [r3, #28]
 8006ba8:	f003 0308 	and.w	r3, r3, #8
 8006bac:	2b08      	cmp	r3, #8
 8006bae:	d110      	bne.n	8006bd2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2208      	movs	r2, #8
 8006bb6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bb8:	68f8      	ldr	r0, [r7, #12]
 8006bba:	f000 f838 	bl	8006c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	2208      	movs	r2, #8
 8006bc2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e029      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	69db      	ldr	r3, [r3, #28]
 8006bd8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006bdc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006be0:	d111      	bne.n	8006c06 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006bea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bec:	68f8      	ldr	r0, [r7, #12]
 8006bee:	f000 f81e 	bl	8006c2e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2220      	movs	r2, #32
 8006bf6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006c02:	2303      	movs	r3, #3
 8006c04:	e00f      	b.n	8006c26 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	69da      	ldr	r2, [r3, #28]
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	4013      	ands	r3, r2
 8006c10:	68ba      	ldr	r2, [r7, #8]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	bf0c      	ite	eq
 8006c16:	2301      	moveq	r3, #1
 8006c18:	2300      	movne	r3, #0
 8006c1a:	b2db      	uxtb	r3, r3
 8006c1c:	461a      	mov	r2, r3
 8006c1e:	79fb      	ldrb	r3, [r7, #7]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d0a0      	beq.n	8006b66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c24:	2300      	movs	r3, #0
}
 8006c26:	4618      	mov	r0, r3
 8006c28:	3710      	adds	r7, #16
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b095      	sub	sp, #84	@ 0x54
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3e:	e853 3f00 	ldrex	r3, [r3]
 8006c42:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c46:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	461a      	mov	r2, r3
 8006c52:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c54:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c56:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c58:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c5a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c5c:	e841 2300 	strex	r3, r2, [r1]
 8006c60:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006c62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1e6      	bne.n	8006c36 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3308      	adds	r3, #8
 8006c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	6a3b      	ldr	r3, [r7, #32]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	f023 0301 	bic.w	r3, r3, #1
 8006c7e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	3308      	adds	r3, #8
 8006c86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006c88:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006c8a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c8c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c90:	e841 2300 	strex	r3, r2, [r1]
 8006c94:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d1e5      	bne.n	8006c68 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	d118      	bne.n	8006cd6 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	e853 3f00 	ldrex	r3, [r3]
 8006cb0:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	f023 0310 	bic.w	r3, r3, #16
 8006cb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	461a      	mov	r2, r3
 8006cc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006cc2:	61bb      	str	r3, [r7, #24]
 8006cc4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc6:	6979      	ldr	r1, [r7, #20]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	e841 2300 	strex	r3, r2, [r1]
 8006cce:	613b      	str	r3, [r7, #16]
   return(result);
 8006cd0:	693b      	ldr	r3, [r7, #16]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d1e6      	bne.n	8006ca4 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2220      	movs	r2, #32
 8006cda:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006cea:	bf00      	nop
 8006cec:	3754      	adds	r7, #84	@ 0x54
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cf4:	4770      	bx	lr

08006cf6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006cf6:	b580      	push	{r7, lr}
 8006cf8:	b084      	sub	sp, #16
 8006cfa:	af00      	add	r7, sp, #0
 8006cfc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d02:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2200      	movs	r2, #0
 8006d10:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f7ff fb05 	bl	8006324 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d1a:	bf00      	nop
 8006d1c:	3710      	adds	r7, #16
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	bd80      	pop	{r7, pc}

08006d22 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d22:	b580      	push	{r7, lr}
 8006d24:	b088      	sub	sp, #32
 8006d26:	af00      	add	r7, sp, #0
 8006d28:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	e853 3f00 	ldrex	r3, [r3]
 8006d36:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006d3e:	61fb      	str	r3, [r7, #28]
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	461a      	mov	r2, r3
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	61bb      	str	r3, [r7, #24]
 8006d4a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4c:	6979      	ldr	r1, [r7, #20]
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	e841 2300 	strex	r3, r2, [r1]
 8006d54:	613b      	str	r3, [r7, #16]
   return(result);
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1e6      	bne.n	8006d2a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f7ff fad1 	bl	8006310 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d6e:	bf00      	nop
 8006d70:	3720      	adds	r7, #32
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}

08006d76 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006d76:	b480      	push	{r7}
 8006d78:	b083      	sub	sp, #12
 8006d7a:	af00      	add	r7, sp, #0
 8006d7c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006d7e:	bf00      	nop
 8006d80:	370c      	adds	r7, #12
 8006d82:	46bd      	mov	sp, r7
 8006d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d88:	4770      	bx	lr
	...

08006d8c <std>:
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	4604      	mov	r4, r0
 8006d92:	e9c0 3300 	strd	r3, r3, [r0]
 8006d96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d9a:	6083      	str	r3, [r0, #8]
 8006d9c:	8181      	strh	r1, [r0, #12]
 8006d9e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006da0:	81c2      	strh	r2, [r0, #14]
 8006da2:	6183      	str	r3, [r0, #24]
 8006da4:	4619      	mov	r1, r3
 8006da6:	2208      	movs	r2, #8
 8006da8:	305c      	adds	r0, #92	@ 0x5c
 8006daa:	f000 f9f9 	bl	80071a0 <memset>
 8006dae:	4b0d      	ldr	r3, [pc, #52]	@ (8006de4 <std+0x58>)
 8006db0:	6263      	str	r3, [r4, #36]	@ 0x24
 8006db2:	4b0d      	ldr	r3, [pc, #52]	@ (8006de8 <std+0x5c>)
 8006db4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006db6:	4b0d      	ldr	r3, [pc, #52]	@ (8006dec <std+0x60>)
 8006db8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006dba:	4b0d      	ldr	r3, [pc, #52]	@ (8006df0 <std+0x64>)
 8006dbc:	6323      	str	r3, [r4, #48]	@ 0x30
 8006dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8006df4 <std+0x68>)
 8006dc0:	6224      	str	r4, [r4, #32]
 8006dc2:	429c      	cmp	r4, r3
 8006dc4:	d006      	beq.n	8006dd4 <std+0x48>
 8006dc6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006dca:	4294      	cmp	r4, r2
 8006dcc:	d002      	beq.n	8006dd4 <std+0x48>
 8006dce:	33d0      	adds	r3, #208	@ 0xd0
 8006dd0:	429c      	cmp	r4, r3
 8006dd2:	d105      	bne.n	8006de0 <std+0x54>
 8006dd4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006dd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ddc:	f000 ba58 	b.w	8007290 <__retarget_lock_init_recursive>
 8006de0:	bd10      	pop	{r4, pc}
 8006de2:	bf00      	nop
 8006de4:	08006ff1 	.word	0x08006ff1
 8006de8:	08007013 	.word	0x08007013
 8006dec:	0800704b 	.word	0x0800704b
 8006df0:	0800706f 	.word	0x0800706f
 8006df4:	2000036c 	.word	0x2000036c

08006df8 <stdio_exit_handler>:
 8006df8:	4a02      	ldr	r2, [pc, #8]	@ (8006e04 <stdio_exit_handler+0xc>)
 8006dfa:	4903      	ldr	r1, [pc, #12]	@ (8006e08 <stdio_exit_handler+0x10>)
 8006dfc:	4803      	ldr	r0, [pc, #12]	@ (8006e0c <stdio_exit_handler+0x14>)
 8006dfe:	f000 b869 	b.w	8006ed4 <_fwalk_sglue>
 8006e02:	bf00      	nop
 8006e04:	2000000c 	.word	0x2000000c
 8006e08:	08007b31 	.word	0x08007b31
 8006e0c:	2000001c 	.word	0x2000001c

08006e10 <cleanup_stdio>:
 8006e10:	6841      	ldr	r1, [r0, #4]
 8006e12:	4b0c      	ldr	r3, [pc, #48]	@ (8006e44 <cleanup_stdio+0x34>)
 8006e14:	4299      	cmp	r1, r3
 8006e16:	b510      	push	{r4, lr}
 8006e18:	4604      	mov	r4, r0
 8006e1a:	d001      	beq.n	8006e20 <cleanup_stdio+0x10>
 8006e1c:	f000 fe88 	bl	8007b30 <_fflush_r>
 8006e20:	68a1      	ldr	r1, [r4, #8]
 8006e22:	4b09      	ldr	r3, [pc, #36]	@ (8006e48 <cleanup_stdio+0x38>)
 8006e24:	4299      	cmp	r1, r3
 8006e26:	d002      	beq.n	8006e2e <cleanup_stdio+0x1e>
 8006e28:	4620      	mov	r0, r4
 8006e2a:	f000 fe81 	bl	8007b30 <_fflush_r>
 8006e2e:	68e1      	ldr	r1, [r4, #12]
 8006e30:	4b06      	ldr	r3, [pc, #24]	@ (8006e4c <cleanup_stdio+0x3c>)
 8006e32:	4299      	cmp	r1, r3
 8006e34:	d004      	beq.n	8006e40 <cleanup_stdio+0x30>
 8006e36:	4620      	mov	r0, r4
 8006e38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e3c:	f000 be78 	b.w	8007b30 <_fflush_r>
 8006e40:	bd10      	pop	{r4, pc}
 8006e42:	bf00      	nop
 8006e44:	2000036c 	.word	0x2000036c
 8006e48:	200003d4 	.word	0x200003d4
 8006e4c:	2000043c 	.word	0x2000043c

08006e50 <global_stdio_init.part.0>:
 8006e50:	b510      	push	{r4, lr}
 8006e52:	4b0b      	ldr	r3, [pc, #44]	@ (8006e80 <global_stdio_init.part.0+0x30>)
 8006e54:	4c0b      	ldr	r4, [pc, #44]	@ (8006e84 <global_stdio_init.part.0+0x34>)
 8006e56:	4a0c      	ldr	r2, [pc, #48]	@ (8006e88 <global_stdio_init.part.0+0x38>)
 8006e58:	601a      	str	r2, [r3, #0]
 8006e5a:	4620      	mov	r0, r4
 8006e5c:	2200      	movs	r2, #0
 8006e5e:	2104      	movs	r1, #4
 8006e60:	f7ff ff94 	bl	8006d8c <std>
 8006e64:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006e68:	2201      	movs	r2, #1
 8006e6a:	2109      	movs	r1, #9
 8006e6c:	f7ff ff8e 	bl	8006d8c <std>
 8006e70:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e74:	2202      	movs	r2, #2
 8006e76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e7a:	2112      	movs	r1, #18
 8006e7c:	f7ff bf86 	b.w	8006d8c <std>
 8006e80:	200004a4 	.word	0x200004a4
 8006e84:	2000036c 	.word	0x2000036c
 8006e88:	08006df9 	.word	0x08006df9

08006e8c <__sfp_lock_acquire>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	@ (8006e94 <__sfp_lock_acquire+0x8>)
 8006e8e:	f000 ba00 	b.w	8007292 <__retarget_lock_acquire_recursive>
 8006e92:	bf00      	nop
 8006e94:	200004ad 	.word	0x200004ad

08006e98 <__sfp_lock_release>:
 8006e98:	4801      	ldr	r0, [pc, #4]	@ (8006ea0 <__sfp_lock_release+0x8>)
 8006e9a:	f000 b9fb 	b.w	8007294 <__retarget_lock_release_recursive>
 8006e9e:	bf00      	nop
 8006ea0:	200004ad 	.word	0x200004ad

08006ea4 <__sinit>:
 8006ea4:	b510      	push	{r4, lr}
 8006ea6:	4604      	mov	r4, r0
 8006ea8:	f7ff fff0 	bl	8006e8c <__sfp_lock_acquire>
 8006eac:	6a23      	ldr	r3, [r4, #32]
 8006eae:	b11b      	cbz	r3, 8006eb8 <__sinit+0x14>
 8006eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006eb4:	f7ff bff0 	b.w	8006e98 <__sfp_lock_release>
 8006eb8:	4b04      	ldr	r3, [pc, #16]	@ (8006ecc <__sinit+0x28>)
 8006eba:	6223      	str	r3, [r4, #32]
 8006ebc:	4b04      	ldr	r3, [pc, #16]	@ (8006ed0 <__sinit+0x2c>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1f5      	bne.n	8006eb0 <__sinit+0xc>
 8006ec4:	f7ff ffc4 	bl	8006e50 <global_stdio_init.part.0>
 8006ec8:	e7f2      	b.n	8006eb0 <__sinit+0xc>
 8006eca:	bf00      	nop
 8006ecc:	08006e11 	.word	0x08006e11
 8006ed0:	200004a4 	.word	0x200004a4

08006ed4 <_fwalk_sglue>:
 8006ed4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ed8:	4607      	mov	r7, r0
 8006eda:	4688      	mov	r8, r1
 8006edc:	4614      	mov	r4, r2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ee4:	f1b9 0901 	subs.w	r9, r9, #1
 8006ee8:	d505      	bpl.n	8006ef6 <_fwalk_sglue+0x22>
 8006eea:	6824      	ldr	r4, [r4, #0]
 8006eec:	2c00      	cmp	r4, #0
 8006eee:	d1f7      	bne.n	8006ee0 <_fwalk_sglue+0xc>
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d907      	bls.n	8006f0c <_fwalk_sglue+0x38>
 8006efc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f00:	3301      	adds	r3, #1
 8006f02:	d003      	beq.n	8006f0c <_fwalk_sglue+0x38>
 8006f04:	4629      	mov	r1, r5
 8006f06:	4638      	mov	r0, r7
 8006f08:	47c0      	blx	r8
 8006f0a:	4306      	orrs	r6, r0
 8006f0c:	3568      	adds	r5, #104	@ 0x68
 8006f0e:	e7e9      	b.n	8006ee4 <_fwalk_sglue+0x10>

08006f10 <iprintf>:
 8006f10:	b40f      	push	{r0, r1, r2, r3}
 8006f12:	b507      	push	{r0, r1, r2, lr}
 8006f14:	4906      	ldr	r1, [pc, #24]	@ (8006f30 <iprintf+0x20>)
 8006f16:	ab04      	add	r3, sp, #16
 8006f18:	6808      	ldr	r0, [r1, #0]
 8006f1a:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f1e:	6881      	ldr	r1, [r0, #8]
 8006f20:	9301      	str	r3, [sp, #4]
 8006f22:	f000 fadb 	bl	80074dc <_vfiprintf_r>
 8006f26:	b003      	add	sp, #12
 8006f28:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f2c:	b004      	add	sp, #16
 8006f2e:	4770      	bx	lr
 8006f30:	20000018 	.word	0x20000018

08006f34 <_puts_r>:
 8006f34:	6a03      	ldr	r3, [r0, #32]
 8006f36:	b570      	push	{r4, r5, r6, lr}
 8006f38:	6884      	ldr	r4, [r0, #8]
 8006f3a:	4605      	mov	r5, r0
 8006f3c:	460e      	mov	r6, r1
 8006f3e:	b90b      	cbnz	r3, 8006f44 <_puts_r+0x10>
 8006f40:	f7ff ffb0 	bl	8006ea4 <__sinit>
 8006f44:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f46:	07db      	lsls	r3, r3, #31
 8006f48:	d405      	bmi.n	8006f56 <_puts_r+0x22>
 8006f4a:	89a3      	ldrh	r3, [r4, #12]
 8006f4c:	0598      	lsls	r0, r3, #22
 8006f4e:	d402      	bmi.n	8006f56 <_puts_r+0x22>
 8006f50:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f52:	f000 f99e 	bl	8007292 <__retarget_lock_acquire_recursive>
 8006f56:	89a3      	ldrh	r3, [r4, #12]
 8006f58:	0719      	lsls	r1, r3, #28
 8006f5a:	d502      	bpl.n	8006f62 <_puts_r+0x2e>
 8006f5c:	6923      	ldr	r3, [r4, #16]
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d135      	bne.n	8006fce <_puts_r+0x9a>
 8006f62:	4621      	mov	r1, r4
 8006f64:	4628      	mov	r0, r5
 8006f66:	f000 f8c5 	bl	80070f4 <__swsetup_r>
 8006f6a:	b380      	cbz	r0, 8006fce <_puts_r+0x9a>
 8006f6c:	f04f 35ff 	mov.w	r5, #4294967295
 8006f70:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006f72:	07da      	lsls	r2, r3, #31
 8006f74:	d405      	bmi.n	8006f82 <_puts_r+0x4e>
 8006f76:	89a3      	ldrh	r3, [r4, #12]
 8006f78:	059b      	lsls	r3, r3, #22
 8006f7a:	d402      	bmi.n	8006f82 <_puts_r+0x4e>
 8006f7c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006f7e:	f000 f989 	bl	8007294 <__retarget_lock_release_recursive>
 8006f82:	4628      	mov	r0, r5
 8006f84:	bd70      	pop	{r4, r5, r6, pc}
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	da04      	bge.n	8006f94 <_puts_r+0x60>
 8006f8a:	69a2      	ldr	r2, [r4, #24]
 8006f8c:	429a      	cmp	r2, r3
 8006f8e:	dc17      	bgt.n	8006fc0 <_puts_r+0x8c>
 8006f90:	290a      	cmp	r1, #10
 8006f92:	d015      	beq.n	8006fc0 <_puts_r+0x8c>
 8006f94:	6823      	ldr	r3, [r4, #0]
 8006f96:	1c5a      	adds	r2, r3, #1
 8006f98:	6022      	str	r2, [r4, #0]
 8006f9a:	7019      	strb	r1, [r3, #0]
 8006f9c:	68a3      	ldr	r3, [r4, #8]
 8006f9e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006fa2:	3b01      	subs	r3, #1
 8006fa4:	60a3      	str	r3, [r4, #8]
 8006fa6:	2900      	cmp	r1, #0
 8006fa8:	d1ed      	bne.n	8006f86 <_puts_r+0x52>
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	da11      	bge.n	8006fd2 <_puts_r+0x9e>
 8006fae:	4622      	mov	r2, r4
 8006fb0:	210a      	movs	r1, #10
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f000 f85f 	bl	8007076 <__swbuf_r>
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d0d7      	beq.n	8006f6c <_puts_r+0x38>
 8006fbc:	250a      	movs	r5, #10
 8006fbe:	e7d7      	b.n	8006f70 <_puts_r+0x3c>
 8006fc0:	4622      	mov	r2, r4
 8006fc2:	4628      	mov	r0, r5
 8006fc4:	f000 f857 	bl	8007076 <__swbuf_r>
 8006fc8:	3001      	adds	r0, #1
 8006fca:	d1e7      	bne.n	8006f9c <_puts_r+0x68>
 8006fcc:	e7ce      	b.n	8006f6c <_puts_r+0x38>
 8006fce:	3e01      	subs	r6, #1
 8006fd0:	e7e4      	b.n	8006f9c <_puts_r+0x68>
 8006fd2:	6823      	ldr	r3, [r4, #0]
 8006fd4:	1c5a      	adds	r2, r3, #1
 8006fd6:	6022      	str	r2, [r4, #0]
 8006fd8:	220a      	movs	r2, #10
 8006fda:	701a      	strb	r2, [r3, #0]
 8006fdc:	e7ee      	b.n	8006fbc <_puts_r+0x88>
	...

08006fe0 <puts>:
 8006fe0:	4b02      	ldr	r3, [pc, #8]	@ (8006fec <puts+0xc>)
 8006fe2:	4601      	mov	r1, r0
 8006fe4:	6818      	ldr	r0, [r3, #0]
 8006fe6:	f7ff bfa5 	b.w	8006f34 <_puts_r>
 8006fea:	bf00      	nop
 8006fec:	20000018 	.word	0x20000018

08006ff0 <__sread>:
 8006ff0:	b510      	push	{r4, lr}
 8006ff2:	460c      	mov	r4, r1
 8006ff4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ff8:	f000 f8fc 	bl	80071f4 <_read_r>
 8006ffc:	2800      	cmp	r0, #0
 8006ffe:	bfab      	itete	ge
 8007000:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007002:	89a3      	ldrhlt	r3, [r4, #12]
 8007004:	181b      	addge	r3, r3, r0
 8007006:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800700a:	bfac      	ite	ge
 800700c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800700e:	81a3      	strhlt	r3, [r4, #12]
 8007010:	bd10      	pop	{r4, pc}

08007012 <__swrite>:
 8007012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007016:	461f      	mov	r7, r3
 8007018:	898b      	ldrh	r3, [r1, #12]
 800701a:	05db      	lsls	r3, r3, #23
 800701c:	4605      	mov	r5, r0
 800701e:	460c      	mov	r4, r1
 8007020:	4616      	mov	r6, r2
 8007022:	d505      	bpl.n	8007030 <__swrite+0x1e>
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	2302      	movs	r3, #2
 800702a:	2200      	movs	r2, #0
 800702c:	f000 f8d0 	bl	80071d0 <_lseek_r>
 8007030:	89a3      	ldrh	r3, [r4, #12]
 8007032:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007036:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800703a:	81a3      	strh	r3, [r4, #12]
 800703c:	4632      	mov	r2, r6
 800703e:	463b      	mov	r3, r7
 8007040:	4628      	mov	r0, r5
 8007042:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007046:	f000 b8e7 	b.w	8007218 <_write_r>

0800704a <__sseek>:
 800704a:	b510      	push	{r4, lr}
 800704c:	460c      	mov	r4, r1
 800704e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007052:	f000 f8bd 	bl	80071d0 <_lseek_r>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	89a3      	ldrh	r3, [r4, #12]
 800705a:	bf15      	itete	ne
 800705c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800705e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007062:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007066:	81a3      	strheq	r3, [r4, #12]
 8007068:	bf18      	it	ne
 800706a:	81a3      	strhne	r3, [r4, #12]
 800706c:	bd10      	pop	{r4, pc}

0800706e <__sclose>:
 800706e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007072:	f000 b89d 	b.w	80071b0 <_close_r>

08007076 <__swbuf_r>:
 8007076:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007078:	460e      	mov	r6, r1
 800707a:	4614      	mov	r4, r2
 800707c:	4605      	mov	r5, r0
 800707e:	b118      	cbz	r0, 8007088 <__swbuf_r+0x12>
 8007080:	6a03      	ldr	r3, [r0, #32]
 8007082:	b90b      	cbnz	r3, 8007088 <__swbuf_r+0x12>
 8007084:	f7ff ff0e 	bl	8006ea4 <__sinit>
 8007088:	69a3      	ldr	r3, [r4, #24]
 800708a:	60a3      	str	r3, [r4, #8]
 800708c:	89a3      	ldrh	r3, [r4, #12]
 800708e:	071a      	lsls	r2, r3, #28
 8007090:	d501      	bpl.n	8007096 <__swbuf_r+0x20>
 8007092:	6923      	ldr	r3, [r4, #16]
 8007094:	b943      	cbnz	r3, 80070a8 <__swbuf_r+0x32>
 8007096:	4621      	mov	r1, r4
 8007098:	4628      	mov	r0, r5
 800709a:	f000 f82b 	bl	80070f4 <__swsetup_r>
 800709e:	b118      	cbz	r0, 80070a8 <__swbuf_r+0x32>
 80070a0:	f04f 37ff 	mov.w	r7, #4294967295
 80070a4:	4638      	mov	r0, r7
 80070a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070a8:	6823      	ldr	r3, [r4, #0]
 80070aa:	6922      	ldr	r2, [r4, #16]
 80070ac:	1a98      	subs	r0, r3, r2
 80070ae:	6963      	ldr	r3, [r4, #20]
 80070b0:	b2f6      	uxtb	r6, r6
 80070b2:	4283      	cmp	r3, r0
 80070b4:	4637      	mov	r7, r6
 80070b6:	dc05      	bgt.n	80070c4 <__swbuf_r+0x4e>
 80070b8:	4621      	mov	r1, r4
 80070ba:	4628      	mov	r0, r5
 80070bc:	f000 fd38 	bl	8007b30 <_fflush_r>
 80070c0:	2800      	cmp	r0, #0
 80070c2:	d1ed      	bne.n	80070a0 <__swbuf_r+0x2a>
 80070c4:	68a3      	ldr	r3, [r4, #8]
 80070c6:	3b01      	subs	r3, #1
 80070c8:	60a3      	str	r3, [r4, #8]
 80070ca:	6823      	ldr	r3, [r4, #0]
 80070cc:	1c5a      	adds	r2, r3, #1
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	701e      	strb	r6, [r3, #0]
 80070d2:	6962      	ldr	r2, [r4, #20]
 80070d4:	1c43      	adds	r3, r0, #1
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d004      	beq.n	80070e4 <__swbuf_r+0x6e>
 80070da:	89a3      	ldrh	r3, [r4, #12]
 80070dc:	07db      	lsls	r3, r3, #31
 80070de:	d5e1      	bpl.n	80070a4 <__swbuf_r+0x2e>
 80070e0:	2e0a      	cmp	r6, #10
 80070e2:	d1df      	bne.n	80070a4 <__swbuf_r+0x2e>
 80070e4:	4621      	mov	r1, r4
 80070e6:	4628      	mov	r0, r5
 80070e8:	f000 fd22 	bl	8007b30 <_fflush_r>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d0d9      	beq.n	80070a4 <__swbuf_r+0x2e>
 80070f0:	e7d6      	b.n	80070a0 <__swbuf_r+0x2a>
	...

080070f4 <__swsetup_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4b29      	ldr	r3, [pc, #164]	@ (800719c <__swsetup_r+0xa8>)
 80070f8:	4605      	mov	r5, r0
 80070fa:	6818      	ldr	r0, [r3, #0]
 80070fc:	460c      	mov	r4, r1
 80070fe:	b118      	cbz	r0, 8007108 <__swsetup_r+0x14>
 8007100:	6a03      	ldr	r3, [r0, #32]
 8007102:	b90b      	cbnz	r3, 8007108 <__swsetup_r+0x14>
 8007104:	f7ff fece 	bl	8006ea4 <__sinit>
 8007108:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800710c:	0719      	lsls	r1, r3, #28
 800710e:	d422      	bmi.n	8007156 <__swsetup_r+0x62>
 8007110:	06da      	lsls	r2, r3, #27
 8007112:	d407      	bmi.n	8007124 <__swsetup_r+0x30>
 8007114:	2209      	movs	r2, #9
 8007116:	602a      	str	r2, [r5, #0]
 8007118:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800711c:	81a3      	strh	r3, [r4, #12]
 800711e:	f04f 30ff 	mov.w	r0, #4294967295
 8007122:	e033      	b.n	800718c <__swsetup_r+0x98>
 8007124:	0758      	lsls	r0, r3, #29
 8007126:	d512      	bpl.n	800714e <__swsetup_r+0x5a>
 8007128:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800712a:	b141      	cbz	r1, 800713e <__swsetup_r+0x4a>
 800712c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007130:	4299      	cmp	r1, r3
 8007132:	d002      	beq.n	800713a <__swsetup_r+0x46>
 8007134:	4628      	mov	r0, r5
 8007136:	f000 f8af 	bl	8007298 <_free_r>
 800713a:	2300      	movs	r3, #0
 800713c:	6363      	str	r3, [r4, #52]	@ 0x34
 800713e:	89a3      	ldrh	r3, [r4, #12]
 8007140:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007144:	81a3      	strh	r3, [r4, #12]
 8007146:	2300      	movs	r3, #0
 8007148:	6063      	str	r3, [r4, #4]
 800714a:	6923      	ldr	r3, [r4, #16]
 800714c:	6023      	str	r3, [r4, #0]
 800714e:	89a3      	ldrh	r3, [r4, #12]
 8007150:	f043 0308 	orr.w	r3, r3, #8
 8007154:	81a3      	strh	r3, [r4, #12]
 8007156:	6923      	ldr	r3, [r4, #16]
 8007158:	b94b      	cbnz	r3, 800716e <__swsetup_r+0x7a>
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007160:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007164:	d003      	beq.n	800716e <__swsetup_r+0x7a>
 8007166:	4621      	mov	r1, r4
 8007168:	4628      	mov	r0, r5
 800716a:	f000 fd2f 	bl	8007bcc <__smakebuf_r>
 800716e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007172:	f013 0201 	ands.w	r2, r3, #1
 8007176:	d00a      	beq.n	800718e <__swsetup_r+0x9a>
 8007178:	2200      	movs	r2, #0
 800717a:	60a2      	str	r2, [r4, #8]
 800717c:	6962      	ldr	r2, [r4, #20]
 800717e:	4252      	negs	r2, r2
 8007180:	61a2      	str	r2, [r4, #24]
 8007182:	6922      	ldr	r2, [r4, #16]
 8007184:	b942      	cbnz	r2, 8007198 <__swsetup_r+0xa4>
 8007186:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800718a:	d1c5      	bne.n	8007118 <__swsetup_r+0x24>
 800718c:	bd38      	pop	{r3, r4, r5, pc}
 800718e:	0799      	lsls	r1, r3, #30
 8007190:	bf58      	it	pl
 8007192:	6962      	ldrpl	r2, [r4, #20]
 8007194:	60a2      	str	r2, [r4, #8]
 8007196:	e7f4      	b.n	8007182 <__swsetup_r+0x8e>
 8007198:	2000      	movs	r0, #0
 800719a:	e7f7      	b.n	800718c <__swsetup_r+0x98>
 800719c:	20000018 	.word	0x20000018

080071a0 <memset>:
 80071a0:	4402      	add	r2, r0
 80071a2:	4603      	mov	r3, r0
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d100      	bne.n	80071aa <memset+0xa>
 80071a8:	4770      	bx	lr
 80071aa:	f803 1b01 	strb.w	r1, [r3], #1
 80071ae:	e7f9      	b.n	80071a4 <memset+0x4>

080071b0 <_close_r>:
 80071b0:	b538      	push	{r3, r4, r5, lr}
 80071b2:	4d06      	ldr	r5, [pc, #24]	@ (80071cc <_close_r+0x1c>)
 80071b4:	2300      	movs	r3, #0
 80071b6:	4604      	mov	r4, r0
 80071b8:	4608      	mov	r0, r1
 80071ba:	602b      	str	r3, [r5, #0]
 80071bc:	f7f9 ffb5 	bl	800112a <_close>
 80071c0:	1c43      	adds	r3, r0, #1
 80071c2:	d102      	bne.n	80071ca <_close_r+0x1a>
 80071c4:	682b      	ldr	r3, [r5, #0]
 80071c6:	b103      	cbz	r3, 80071ca <_close_r+0x1a>
 80071c8:	6023      	str	r3, [r4, #0]
 80071ca:	bd38      	pop	{r3, r4, r5, pc}
 80071cc:	200004a8 	.word	0x200004a8

080071d0 <_lseek_r>:
 80071d0:	b538      	push	{r3, r4, r5, lr}
 80071d2:	4d07      	ldr	r5, [pc, #28]	@ (80071f0 <_lseek_r+0x20>)
 80071d4:	4604      	mov	r4, r0
 80071d6:	4608      	mov	r0, r1
 80071d8:	4611      	mov	r1, r2
 80071da:	2200      	movs	r2, #0
 80071dc:	602a      	str	r2, [r5, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	f7f9 ffca 	bl	8001178 <_lseek>
 80071e4:	1c43      	adds	r3, r0, #1
 80071e6:	d102      	bne.n	80071ee <_lseek_r+0x1e>
 80071e8:	682b      	ldr	r3, [r5, #0]
 80071ea:	b103      	cbz	r3, 80071ee <_lseek_r+0x1e>
 80071ec:	6023      	str	r3, [r4, #0]
 80071ee:	bd38      	pop	{r3, r4, r5, pc}
 80071f0:	200004a8 	.word	0x200004a8

080071f4 <_read_r>:
 80071f4:	b538      	push	{r3, r4, r5, lr}
 80071f6:	4d07      	ldr	r5, [pc, #28]	@ (8007214 <_read_r+0x20>)
 80071f8:	4604      	mov	r4, r0
 80071fa:	4608      	mov	r0, r1
 80071fc:	4611      	mov	r1, r2
 80071fe:	2200      	movs	r2, #0
 8007200:	602a      	str	r2, [r5, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	f7f9 ff58 	bl	80010b8 <_read>
 8007208:	1c43      	adds	r3, r0, #1
 800720a:	d102      	bne.n	8007212 <_read_r+0x1e>
 800720c:	682b      	ldr	r3, [r5, #0]
 800720e:	b103      	cbz	r3, 8007212 <_read_r+0x1e>
 8007210:	6023      	str	r3, [r4, #0]
 8007212:	bd38      	pop	{r3, r4, r5, pc}
 8007214:	200004a8 	.word	0x200004a8

08007218 <_write_r>:
 8007218:	b538      	push	{r3, r4, r5, lr}
 800721a:	4d07      	ldr	r5, [pc, #28]	@ (8007238 <_write_r+0x20>)
 800721c:	4604      	mov	r4, r0
 800721e:	4608      	mov	r0, r1
 8007220:	4611      	mov	r1, r2
 8007222:	2200      	movs	r2, #0
 8007224:	602a      	str	r2, [r5, #0]
 8007226:	461a      	mov	r2, r3
 8007228:	f7f9 ff63 	bl	80010f2 <_write>
 800722c:	1c43      	adds	r3, r0, #1
 800722e:	d102      	bne.n	8007236 <_write_r+0x1e>
 8007230:	682b      	ldr	r3, [r5, #0]
 8007232:	b103      	cbz	r3, 8007236 <_write_r+0x1e>
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	bd38      	pop	{r3, r4, r5, pc}
 8007238:	200004a8 	.word	0x200004a8

0800723c <__errno>:
 800723c:	4b01      	ldr	r3, [pc, #4]	@ (8007244 <__errno+0x8>)
 800723e:	6818      	ldr	r0, [r3, #0]
 8007240:	4770      	bx	lr
 8007242:	bf00      	nop
 8007244:	20000018 	.word	0x20000018

08007248 <__libc_init_array>:
 8007248:	b570      	push	{r4, r5, r6, lr}
 800724a:	4d0d      	ldr	r5, [pc, #52]	@ (8007280 <__libc_init_array+0x38>)
 800724c:	4c0d      	ldr	r4, [pc, #52]	@ (8007284 <__libc_init_array+0x3c>)
 800724e:	1b64      	subs	r4, r4, r5
 8007250:	10a4      	asrs	r4, r4, #2
 8007252:	2600      	movs	r6, #0
 8007254:	42a6      	cmp	r6, r4
 8007256:	d109      	bne.n	800726c <__libc_init_array+0x24>
 8007258:	4d0b      	ldr	r5, [pc, #44]	@ (8007288 <__libc_init_array+0x40>)
 800725a:	4c0c      	ldr	r4, [pc, #48]	@ (800728c <__libc_init_array+0x44>)
 800725c:	f000 fd24 	bl	8007ca8 <_init>
 8007260:	1b64      	subs	r4, r4, r5
 8007262:	10a4      	asrs	r4, r4, #2
 8007264:	2600      	movs	r6, #0
 8007266:	42a6      	cmp	r6, r4
 8007268:	d105      	bne.n	8007276 <__libc_init_array+0x2e>
 800726a:	bd70      	pop	{r4, r5, r6, pc}
 800726c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007270:	4798      	blx	r3
 8007272:	3601      	adds	r6, #1
 8007274:	e7ee      	b.n	8007254 <__libc_init_array+0xc>
 8007276:	f855 3b04 	ldr.w	r3, [r5], #4
 800727a:	4798      	blx	r3
 800727c:	3601      	adds	r6, #1
 800727e:	e7f2      	b.n	8007266 <__libc_init_array+0x1e>
 8007280:	08007dc0 	.word	0x08007dc0
 8007284:	08007dc0 	.word	0x08007dc0
 8007288:	08007dc0 	.word	0x08007dc0
 800728c:	08007dc4 	.word	0x08007dc4

08007290 <__retarget_lock_init_recursive>:
 8007290:	4770      	bx	lr

08007292 <__retarget_lock_acquire_recursive>:
 8007292:	4770      	bx	lr

08007294 <__retarget_lock_release_recursive>:
 8007294:	4770      	bx	lr
	...

08007298 <_free_r>:
 8007298:	b538      	push	{r3, r4, r5, lr}
 800729a:	4605      	mov	r5, r0
 800729c:	2900      	cmp	r1, #0
 800729e:	d041      	beq.n	8007324 <_free_r+0x8c>
 80072a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072a4:	1f0c      	subs	r4, r1, #4
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	bfb8      	it	lt
 80072aa:	18e4      	addlt	r4, r4, r3
 80072ac:	f000 f8e0 	bl	8007470 <__malloc_lock>
 80072b0:	4a1d      	ldr	r2, [pc, #116]	@ (8007328 <_free_r+0x90>)
 80072b2:	6813      	ldr	r3, [r2, #0]
 80072b4:	b933      	cbnz	r3, 80072c4 <_free_r+0x2c>
 80072b6:	6063      	str	r3, [r4, #4]
 80072b8:	6014      	str	r4, [r2, #0]
 80072ba:	4628      	mov	r0, r5
 80072bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072c0:	f000 b8dc 	b.w	800747c <__malloc_unlock>
 80072c4:	42a3      	cmp	r3, r4
 80072c6:	d908      	bls.n	80072da <_free_r+0x42>
 80072c8:	6820      	ldr	r0, [r4, #0]
 80072ca:	1821      	adds	r1, r4, r0
 80072cc:	428b      	cmp	r3, r1
 80072ce:	bf01      	itttt	eq
 80072d0:	6819      	ldreq	r1, [r3, #0]
 80072d2:	685b      	ldreq	r3, [r3, #4]
 80072d4:	1809      	addeq	r1, r1, r0
 80072d6:	6021      	streq	r1, [r4, #0]
 80072d8:	e7ed      	b.n	80072b6 <_free_r+0x1e>
 80072da:	461a      	mov	r2, r3
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	b10b      	cbz	r3, 80072e4 <_free_r+0x4c>
 80072e0:	42a3      	cmp	r3, r4
 80072e2:	d9fa      	bls.n	80072da <_free_r+0x42>
 80072e4:	6811      	ldr	r1, [r2, #0]
 80072e6:	1850      	adds	r0, r2, r1
 80072e8:	42a0      	cmp	r0, r4
 80072ea:	d10b      	bne.n	8007304 <_free_r+0x6c>
 80072ec:	6820      	ldr	r0, [r4, #0]
 80072ee:	4401      	add	r1, r0
 80072f0:	1850      	adds	r0, r2, r1
 80072f2:	4283      	cmp	r3, r0
 80072f4:	6011      	str	r1, [r2, #0]
 80072f6:	d1e0      	bne.n	80072ba <_free_r+0x22>
 80072f8:	6818      	ldr	r0, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	6053      	str	r3, [r2, #4]
 80072fe:	4408      	add	r0, r1
 8007300:	6010      	str	r0, [r2, #0]
 8007302:	e7da      	b.n	80072ba <_free_r+0x22>
 8007304:	d902      	bls.n	800730c <_free_r+0x74>
 8007306:	230c      	movs	r3, #12
 8007308:	602b      	str	r3, [r5, #0]
 800730a:	e7d6      	b.n	80072ba <_free_r+0x22>
 800730c:	6820      	ldr	r0, [r4, #0]
 800730e:	1821      	adds	r1, r4, r0
 8007310:	428b      	cmp	r3, r1
 8007312:	bf04      	itt	eq
 8007314:	6819      	ldreq	r1, [r3, #0]
 8007316:	685b      	ldreq	r3, [r3, #4]
 8007318:	6063      	str	r3, [r4, #4]
 800731a:	bf04      	itt	eq
 800731c:	1809      	addeq	r1, r1, r0
 800731e:	6021      	streq	r1, [r4, #0]
 8007320:	6054      	str	r4, [r2, #4]
 8007322:	e7ca      	b.n	80072ba <_free_r+0x22>
 8007324:	bd38      	pop	{r3, r4, r5, pc}
 8007326:	bf00      	nop
 8007328:	200004b4 	.word	0x200004b4

0800732c <sbrk_aligned>:
 800732c:	b570      	push	{r4, r5, r6, lr}
 800732e:	4e0f      	ldr	r6, [pc, #60]	@ (800736c <sbrk_aligned+0x40>)
 8007330:	460c      	mov	r4, r1
 8007332:	6831      	ldr	r1, [r6, #0]
 8007334:	4605      	mov	r5, r0
 8007336:	b911      	cbnz	r1, 800733e <sbrk_aligned+0x12>
 8007338:	f000 fca6 	bl	8007c88 <_sbrk_r>
 800733c:	6030      	str	r0, [r6, #0]
 800733e:	4621      	mov	r1, r4
 8007340:	4628      	mov	r0, r5
 8007342:	f000 fca1 	bl	8007c88 <_sbrk_r>
 8007346:	1c43      	adds	r3, r0, #1
 8007348:	d103      	bne.n	8007352 <sbrk_aligned+0x26>
 800734a:	f04f 34ff 	mov.w	r4, #4294967295
 800734e:	4620      	mov	r0, r4
 8007350:	bd70      	pop	{r4, r5, r6, pc}
 8007352:	1cc4      	adds	r4, r0, #3
 8007354:	f024 0403 	bic.w	r4, r4, #3
 8007358:	42a0      	cmp	r0, r4
 800735a:	d0f8      	beq.n	800734e <sbrk_aligned+0x22>
 800735c:	1a21      	subs	r1, r4, r0
 800735e:	4628      	mov	r0, r5
 8007360:	f000 fc92 	bl	8007c88 <_sbrk_r>
 8007364:	3001      	adds	r0, #1
 8007366:	d1f2      	bne.n	800734e <sbrk_aligned+0x22>
 8007368:	e7ef      	b.n	800734a <sbrk_aligned+0x1e>
 800736a:	bf00      	nop
 800736c:	200004b0 	.word	0x200004b0

08007370 <_malloc_r>:
 8007370:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007374:	1ccd      	adds	r5, r1, #3
 8007376:	f025 0503 	bic.w	r5, r5, #3
 800737a:	3508      	adds	r5, #8
 800737c:	2d0c      	cmp	r5, #12
 800737e:	bf38      	it	cc
 8007380:	250c      	movcc	r5, #12
 8007382:	2d00      	cmp	r5, #0
 8007384:	4606      	mov	r6, r0
 8007386:	db01      	blt.n	800738c <_malloc_r+0x1c>
 8007388:	42a9      	cmp	r1, r5
 800738a:	d904      	bls.n	8007396 <_malloc_r+0x26>
 800738c:	230c      	movs	r3, #12
 800738e:	6033      	str	r3, [r6, #0]
 8007390:	2000      	movs	r0, #0
 8007392:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007396:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800746c <_malloc_r+0xfc>
 800739a:	f000 f869 	bl	8007470 <__malloc_lock>
 800739e:	f8d8 3000 	ldr.w	r3, [r8]
 80073a2:	461c      	mov	r4, r3
 80073a4:	bb44      	cbnz	r4, 80073f8 <_malloc_r+0x88>
 80073a6:	4629      	mov	r1, r5
 80073a8:	4630      	mov	r0, r6
 80073aa:	f7ff ffbf 	bl	800732c <sbrk_aligned>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	4604      	mov	r4, r0
 80073b2:	d158      	bne.n	8007466 <_malloc_r+0xf6>
 80073b4:	f8d8 4000 	ldr.w	r4, [r8]
 80073b8:	4627      	mov	r7, r4
 80073ba:	2f00      	cmp	r7, #0
 80073bc:	d143      	bne.n	8007446 <_malloc_r+0xd6>
 80073be:	2c00      	cmp	r4, #0
 80073c0:	d04b      	beq.n	800745a <_malloc_r+0xea>
 80073c2:	6823      	ldr	r3, [r4, #0]
 80073c4:	4639      	mov	r1, r7
 80073c6:	4630      	mov	r0, r6
 80073c8:	eb04 0903 	add.w	r9, r4, r3
 80073cc:	f000 fc5c 	bl	8007c88 <_sbrk_r>
 80073d0:	4581      	cmp	r9, r0
 80073d2:	d142      	bne.n	800745a <_malloc_r+0xea>
 80073d4:	6821      	ldr	r1, [r4, #0]
 80073d6:	1a6d      	subs	r5, r5, r1
 80073d8:	4629      	mov	r1, r5
 80073da:	4630      	mov	r0, r6
 80073dc:	f7ff ffa6 	bl	800732c <sbrk_aligned>
 80073e0:	3001      	adds	r0, #1
 80073e2:	d03a      	beq.n	800745a <_malloc_r+0xea>
 80073e4:	6823      	ldr	r3, [r4, #0]
 80073e6:	442b      	add	r3, r5
 80073e8:	6023      	str	r3, [r4, #0]
 80073ea:	f8d8 3000 	ldr.w	r3, [r8]
 80073ee:	685a      	ldr	r2, [r3, #4]
 80073f0:	bb62      	cbnz	r2, 800744c <_malloc_r+0xdc>
 80073f2:	f8c8 7000 	str.w	r7, [r8]
 80073f6:	e00f      	b.n	8007418 <_malloc_r+0xa8>
 80073f8:	6822      	ldr	r2, [r4, #0]
 80073fa:	1b52      	subs	r2, r2, r5
 80073fc:	d420      	bmi.n	8007440 <_malloc_r+0xd0>
 80073fe:	2a0b      	cmp	r2, #11
 8007400:	d917      	bls.n	8007432 <_malloc_r+0xc2>
 8007402:	1961      	adds	r1, r4, r5
 8007404:	42a3      	cmp	r3, r4
 8007406:	6025      	str	r5, [r4, #0]
 8007408:	bf18      	it	ne
 800740a:	6059      	strne	r1, [r3, #4]
 800740c:	6863      	ldr	r3, [r4, #4]
 800740e:	bf08      	it	eq
 8007410:	f8c8 1000 	streq.w	r1, [r8]
 8007414:	5162      	str	r2, [r4, r5]
 8007416:	604b      	str	r3, [r1, #4]
 8007418:	4630      	mov	r0, r6
 800741a:	f000 f82f 	bl	800747c <__malloc_unlock>
 800741e:	f104 000b 	add.w	r0, r4, #11
 8007422:	1d23      	adds	r3, r4, #4
 8007424:	f020 0007 	bic.w	r0, r0, #7
 8007428:	1ac2      	subs	r2, r0, r3
 800742a:	bf1c      	itt	ne
 800742c:	1a1b      	subne	r3, r3, r0
 800742e:	50a3      	strne	r3, [r4, r2]
 8007430:	e7af      	b.n	8007392 <_malloc_r+0x22>
 8007432:	6862      	ldr	r2, [r4, #4]
 8007434:	42a3      	cmp	r3, r4
 8007436:	bf0c      	ite	eq
 8007438:	f8c8 2000 	streq.w	r2, [r8]
 800743c:	605a      	strne	r2, [r3, #4]
 800743e:	e7eb      	b.n	8007418 <_malloc_r+0xa8>
 8007440:	4623      	mov	r3, r4
 8007442:	6864      	ldr	r4, [r4, #4]
 8007444:	e7ae      	b.n	80073a4 <_malloc_r+0x34>
 8007446:	463c      	mov	r4, r7
 8007448:	687f      	ldr	r7, [r7, #4]
 800744a:	e7b6      	b.n	80073ba <_malloc_r+0x4a>
 800744c:	461a      	mov	r2, r3
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	42a3      	cmp	r3, r4
 8007452:	d1fb      	bne.n	800744c <_malloc_r+0xdc>
 8007454:	2300      	movs	r3, #0
 8007456:	6053      	str	r3, [r2, #4]
 8007458:	e7de      	b.n	8007418 <_malloc_r+0xa8>
 800745a:	230c      	movs	r3, #12
 800745c:	6033      	str	r3, [r6, #0]
 800745e:	4630      	mov	r0, r6
 8007460:	f000 f80c 	bl	800747c <__malloc_unlock>
 8007464:	e794      	b.n	8007390 <_malloc_r+0x20>
 8007466:	6005      	str	r5, [r0, #0]
 8007468:	e7d6      	b.n	8007418 <_malloc_r+0xa8>
 800746a:	bf00      	nop
 800746c:	200004b4 	.word	0x200004b4

08007470 <__malloc_lock>:
 8007470:	4801      	ldr	r0, [pc, #4]	@ (8007478 <__malloc_lock+0x8>)
 8007472:	f7ff bf0e 	b.w	8007292 <__retarget_lock_acquire_recursive>
 8007476:	bf00      	nop
 8007478:	200004ac 	.word	0x200004ac

0800747c <__malloc_unlock>:
 800747c:	4801      	ldr	r0, [pc, #4]	@ (8007484 <__malloc_unlock+0x8>)
 800747e:	f7ff bf09 	b.w	8007294 <__retarget_lock_release_recursive>
 8007482:	bf00      	nop
 8007484:	200004ac 	.word	0x200004ac

08007488 <__sfputc_r>:
 8007488:	6893      	ldr	r3, [r2, #8]
 800748a:	3b01      	subs	r3, #1
 800748c:	2b00      	cmp	r3, #0
 800748e:	b410      	push	{r4}
 8007490:	6093      	str	r3, [r2, #8]
 8007492:	da08      	bge.n	80074a6 <__sfputc_r+0x1e>
 8007494:	6994      	ldr	r4, [r2, #24]
 8007496:	42a3      	cmp	r3, r4
 8007498:	db01      	blt.n	800749e <__sfputc_r+0x16>
 800749a:	290a      	cmp	r1, #10
 800749c:	d103      	bne.n	80074a6 <__sfputc_r+0x1e>
 800749e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074a2:	f7ff bde8 	b.w	8007076 <__swbuf_r>
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	1c58      	adds	r0, r3, #1
 80074aa:	6010      	str	r0, [r2, #0]
 80074ac:	7019      	strb	r1, [r3, #0]
 80074ae:	4608      	mov	r0, r1
 80074b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80074b4:	4770      	bx	lr

080074b6 <__sfputs_r>:
 80074b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074b8:	4606      	mov	r6, r0
 80074ba:	460f      	mov	r7, r1
 80074bc:	4614      	mov	r4, r2
 80074be:	18d5      	adds	r5, r2, r3
 80074c0:	42ac      	cmp	r4, r5
 80074c2:	d101      	bne.n	80074c8 <__sfputs_r+0x12>
 80074c4:	2000      	movs	r0, #0
 80074c6:	e007      	b.n	80074d8 <__sfputs_r+0x22>
 80074c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074cc:	463a      	mov	r2, r7
 80074ce:	4630      	mov	r0, r6
 80074d0:	f7ff ffda 	bl	8007488 <__sfputc_r>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d1f3      	bne.n	80074c0 <__sfputs_r+0xa>
 80074d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080074dc <_vfiprintf_r>:
 80074dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074e0:	460d      	mov	r5, r1
 80074e2:	b09d      	sub	sp, #116	@ 0x74
 80074e4:	4614      	mov	r4, r2
 80074e6:	4698      	mov	r8, r3
 80074e8:	4606      	mov	r6, r0
 80074ea:	b118      	cbz	r0, 80074f4 <_vfiprintf_r+0x18>
 80074ec:	6a03      	ldr	r3, [r0, #32]
 80074ee:	b90b      	cbnz	r3, 80074f4 <_vfiprintf_r+0x18>
 80074f0:	f7ff fcd8 	bl	8006ea4 <__sinit>
 80074f4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80074f6:	07d9      	lsls	r1, r3, #31
 80074f8:	d405      	bmi.n	8007506 <_vfiprintf_r+0x2a>
 80074fa:	89ab      	ldrh	r3, [r5, #12]
 80074fc:	059a      	lsls	r2, r3, #22
 80074fe:	d402      	bmi.n	8007506 <_vfiprintf_r+0x2a>
 8007500:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007502:	f7ff fec6 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007506:	89ab      	ldrh	r3, [r5, #12]
 8007508:	071b      	lsls	r3, r3, #28
 800750a:	d501      	bpl.n	8007510 <_vfiprintf_r+0x34>
 800750c:	692b      	ldr	r3, [r5, #16]
 800750e:	b99b      	cbnz	r3, 8007538 <_vfiprintf_r+0x5c>
 8007510:	4629      	mov	r1, r5
 8007512:	4630      	mov	r0, r6
 8007514:	f7ff fdee 	bl	80070f4 <__swsetup_r>
 8007518:	b170      	cbz	r0, 8007538 <_vfiprintf_r+0x5c>
 800751a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800751c:	07dc      	lsls	r4, r3, #31
 800751e:	d504      	bpl.n	800752a <_vfiprintf_r+0x4e>
 8007520:	f04f 30ff 	mov.w	r0, #4294967295
 8007524:	b01d      	add	sp, #116	@ 0x74
 8007526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800752a:	89ab      	ldrh	r3, [r5, #12]
 800752c:	0598      	lsls	r0, r3, #22
 800752e:	d4f7      	bmi.n	8007520 <_vfiprintf_r+0x44>
 8007530:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007532:	f7ff feaf 	bl	8007294 <__retarget_lock_release_recursive>
 8007536:	e7f3      	b.n	8007520 <_vfiprintf_r+0x44>
 8007538:	2300      	movs	r3, #0
 800753a:	9309      	str	r3, [sp, #36]	@ 0x24
 800753c:	2320      	movs	r3, #32
 800753e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007542:	f8cd 800c 	str.w	r8, [sp, #12]
 8007546:	2330      	movs	r3, #48	@ 0x30
 8007548:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80076f8 <_vfiprintf_r+0x21c>
 800754c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007550:	f04f 0901 	mov.w	r9, #1
 8007554:	4623      	mov	r3, r4
 8007556:	469a      	mov	sl, r3
 8007558:	f813 2b01 	ldrb.w	r2, [r3], #1
 800755c:	b10a      	cbz	r2, 8007562 <_vfiprintf_r+0x86>
 800755e:	2a25      	cmp	r2, #37	@ 0x25
 8007560:	d1f9      	bne.n	8007556 <_vfiprintf_r+0x7a>
 8007562:	ebba 0b04 	subs.w	fp, sl, r4
 8007566:	d00b      	beq.n	8007580 <_vfiprintf_r+0xa4>
 8007568:	465b      	mov	r3, fp
 800756a:	4622      	mov	r2, r4
 800756c:	4629      	mov	r1, r5
 800756e:	4630      	mov	r0, r6
 8007570:	f7ff ffa1 	bl	80074b6 <__sfputs_r>
 8007574:	3001      	adds	r0, #1
 8007576:	f000 80a7 	beq.w	80076c8 <_vfiprintf_r+0x1ec>
 800757a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800757c:	445a      	add	r2, fp
 800757e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007580:	f89a 3000 	ldrb.w	r3, [sl]
 8007584:	2b00      	cmp	r3, #0
 8007586:	f000 809f 	beq.w	80076c8 <_vfiprintf_r+0x1ec>
 800758a:	2300      	movs	r3, #0
 800758c:	f04f 32ff 	mov.w	r2, #4294967295
 8007590:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007594:	f10a 0a01 	add.w	sl, sl, #1
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	9307      	str	r3, [sp, #28]
 800759c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80075a0:	931a      	str	r3, [sp, #104]	@ 0x68
 80075a2:	4654      	mov	r4, sl
 80075a4:	2205      	movs	r2, #5
 80075a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075aa:	4853      	ldr	r0, [pc, #332]	@ (80076f8 <_vfiprintf_r+0x21c>)
 80075ac:	f7f8 fe10 	bl	80001d0 <memchr>
 80075b0:	9a04      	ldr	r2, [sp, #16]
 80075b2:	b9d8      	cbnz	r0, 80075ec <_vfiprintf_r+0x110>
 80075b4:	06d1      	lsls	r1, r2, #27
 80075b6:	bf44      	itt	mi
 80075b8:	2320      	movmi	r3, #32
 80075ba:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075be:	0713      	lsls	r3, r2, #28
 80075c0:	bf44      	itt	mi
 80075c2:	232b      	movmi	r3, #43	@ 0x2b
 80075c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80075c8:	f89a 3000 	ldrb.w	r3, [sl]
 80075cc:	2b2a      	cmp	r3, #42	@ 0x2a
 80075ce:	d015      	beq.n	80075fc <_vfiprintf_r+0x120>
 80075d0:	9a07      	ldr	r2, [sp, #28]
 80075d2:	4654      	mov	r4, sl
 80075d4:	2000      	movs	r0, #0
 80075d6:	f04f 0c0a 	mov.w	ip, #10
 80075da:	4621      	mov	r1, r4
 80075dc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80075e0:	3b30      	subs	r3, #48	@ 0x30
 80075e2:	2b09      	cmp	r3, #9
 80075e4:	d94b      	bls.n	800767e <_vfiprintf_r+0x1a2>
 80075e6:	b1b0      	cbz	r0, 8007616 <_vfiprintf_r+0x13a>
 80075e8:	9207      	str	r2, [sp, #28]
 80075ea:	e014      	b.n	8007616 <_vfiprintf_r+0x13a>
 80075ec:	eba0 0308 	sub.w	r3, r0, r8
 80075f0:	fa09 f303 	lsl.w	r3, r9, r3
 80075f4:	4313      	orrs	r3, r2
 80075f6:	9304      	str	r3, [sp, #16]
 80075f8:	46a2      	mov	sl, r4
 80075fa:	e7d2      	b.n	80075a2 <_vfiprintf_r+0xc6>
 80075fc:	9b03      	ldr	r3, [sp, #12]
 80075fe:	1d19      	adds	r1, r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	9103      	str	r1, [sp, #12]
 8007604:	2b00      	cmp	r3, #0
 8007606:	bfbb      	ittet	lt
 8007608:	425b      	neglt	r3, r3
 800760a:	f042 0202 	orrlt.w	r2, r2, #2
 800760e:	9307      	strge	r3, [sp, #28]
 8007610:	9307      	strlt	r3, [sp, #28]
 8007612:	bfb8      	it	lt
 8007614:	9204      	strlt	r2, [sp, #16]
 8007616:	7823      	ldrb	r3, [r4, #0]
 8007618:	2b2e      	cmp	r3, #46	@ 0x2e
 800761a:	d10a      	bne.n	8007632 <_vfiprintf_r+0x156>
 800761c:	7863      	ldrb	r3, [r4, #1]
 800761e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007620:	d132      	bne.n	8007688 <_vfiprintf_r+0x1ac>
 8007622:	9b03      	ldr	r3, [sp, #12]
 8007624:	1d1a      	adds	r2, r3, #4
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	9203      	str	r2, [sp, #12]
 800762a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800762e:	3402      	adds	r4, #2
 8007630:	9305      	str	r3, [sp, #20]
 8007632:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007708 <_vfiprintf_r+0x22c>
 8007636:	7821      	ldrb	r1, [r4, #0]
 8007638:	2203      	movs	r2, #3
 800763a:	4650      	mov	r0, sl
 800763c:	f7f8 fdc8 	bl	80001d0 <memchr>
 8007640:	b138      	cbz	r0, 8007652 <_vfiprintf_r+0x176>
 8007642:	9b04      	ldr	r3, [sp, #16]
 8007644:	eba0 000a 	sub.w	r0, r0, sl
 8007648:	2240      	movs	r2, #64	@ 0x40
 800764a:	4082      	lsls	r2, r0
 800764c:	4313      	orrs	r3, r2
 800764e:	3401      	adds	r4, #1
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007656:	4829      	ldr	r0, [pc, #164]	@ (80076fc <_vfiprintf_r+0x220>)
 8007658:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800765c:	2206      	movs	r2, #6
 800765e:	f7f8 fdb7 	bl	80001d0 <memchr>
 8007662:	2800      	cmp	r0, #0
 8007664:	d03f      	beq.n	80076e6 <_vfiprintf_r+0x20a>
 8007666:	4b26      	ldr	r3, [pc, #152]	@ (8007700 <_vfiprintf_r+0x224>)
 8007668:	bb1b      	cbnz	r3, 80076b2 <_vfiprintf_r+0x1d6>
 800766a:	9b03      	ldr	r3, [sp, #12]
 800766c:	3307      	adds	r3, #7
 800766e:	f023 0307 	bic.w	r3, r3, #7
 8007672:	3308      	adds	r3, #8
 8007674:	9303      	str	r3, [sp, #12]
 8007676:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007678:	443b      	add	r3, r7
 800767a:	9309      	str	r3, [sp, #36]	@ 0x24
 800767c:	e76a      	b.n	8007554 <_vfiprintf_r+0x78>
 800767e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007682:	460c      	mov	r4, r1
 8007684:	2001      	movs	r0, #1
 8007686:	e7a8      	b.n	80075da <_vfiprintf_r+0xfe>
 8007688:	2300      	movs	r3, #0
 800768a:	3401      	adds	r4, #1
 800768c:	9305      	str	r3, [sp, #20]
 800768e:	4619      	mov	r1, r3
 8007690:	f04f 0c0a 	mov.w	ip, #10
 8007694:	4620      	mov	r0, r4
 8007696:	f810 2b01 	ldrb.w	r2, [r0], #1
 800769a:	3a30      	subs	r2, #48	@ 0x30
 800769c:	2a09      	cmp	r2, #9
 800769e:	d903      	bls.n	80076a8 <_vfiprintf_r+0x1cc>
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d0c6      	beq.n	8007632 <_vfiprintf_r+0x156>
 80076a4:	9105      	str	r1, [sp, #20]
 80076a6:	e7c4      	b.n	8007632 <_vfiprintf_r+0x156>
 80076a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80076ac:	4604      	mov	r4, r0
 80076ae:	2301      	movs	r3, #1
 80076b0:	e7f0      	b.n	8007694 <_vfiprintf_r+0x1b8>
 80076b2:	ab03      	add	r3, sp, #12
 80076b4:	9300      	str	r3, [sp, #0]
 80076b6:	462a      	mov	r2, r5
 80076b8:	4b12      	ldr	r3, [pc, #72]	@ (8007704 <_vfiprintf_r+0x228>)
 80076ba:	a904      	add	r1, sp, #16
 80076bc:	4630      	mov	r0, r6
 80076be:	f3af 8000 	nop.w
 80076c2:	4607      	mov	r7, r0
 80076c4:	1c78      	adds	r0, r7, #1
 80076c6:	d1d6      	bne.n	8007676 <_vfiprintf_r+0x19a>
 80076c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80076ca:	07d9      	lsls	r1, r3, #31
 80076cc:	d405      	bmi.n	80076da <_vfiprintf_r+0x1fe>
 80076ce:	89ab      	ldrh	r3, [r5, #12]
 80076d0:	059a      	lsls	r2, r3, #22
 80076d2:	d402      	bmi.n	80076da <_vfiprintf_r+0x1fe>
 80076d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80076d6:	f7ff fddd 	bl	8007294 <__retarget_lock_release_recursive>
 80076da:	89ab      	ldrh	r3, [r5, #12]
 80076dc:	065b      	lsls	r3, r3, #25
 80076de:	f53f af1f 	bmi.w	8007520 <_vfiprintf_r+0x44>
 80076e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80076e4:	e71e      	b.n	8007524 <_vfiprintf_r+0x48>
 80076e6:	ab03      	add	r3, sp, #12
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	462a      	mov	r2, r5
 80076ec:	4b05      	ldr	r3, [pc, #20]	@ (8007704 <_vfiprintf_r+0x228>)
 80076ee:	a904      	add	r1, sp, #16
 80076f0:	4630      	mov	r0, r6
 80076f2:	f000 f879 	bl	80077e8 <_printf_i>
 80076f6:	e7e4      	b.n	80076c2 <_vfiprintf_r+0x1e6>
 80076f8:	08007d84 	.word	0x08007d84
 80076fc:	08007d8e 	.word	0x08007d8e
 8007700:	00000000 	.word	0x00000000
 8007704:	080074b7 	.word	0x080074b7
 8007708:	08007d8a 	.word	0x08007d8a

0800770c <_printf_common>:
 800770c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007710:	4616      	mov	r6, r2
 8007712:	4698      	mov	r8, r3
 8007714:	688a      	ldr	r2, [r1, #8]
 8007716:	690b      	ldr	r3, [r1, #16]
 8007718:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800771c:	4293      	cmp	r3, r2
 800771e:	bfb8      	it	lt
 8007720:	4613      	movlt	r3, r2
 8007722:	6033      	str	r3, [r6, #0]
 8007724:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007728:	4607      	mov	r7, r0
 800772a:	460c      	mov	r4, r1
 800772c:	b10a      	cbz	r2, 8007732 <_printf_common+0x26>
 800772e:	3301      	adds	r3, #1
 8007730:	6033      	str	r3, [r6, #0]
 8007732:	6823      	ldr	r3, [r4, #0]
 8007734:	0699      	lsls	r1, r3, #26
 8007736:	bf42      	ittt	mi
 8007738:	6833      	ldrmi	r3, [r6, #0]
 800773a:	3302      	addmi	r3, #2
 800773c:	6033      	strmi	r3, [r6, #0]
 800773e:	6825      	ldr	r5, [r4, #0]
 8007740:	f015 0506 	ands.w	r5, r5, #6
 8007744:	d106      	bne.n	8007754 <_printf_common+0x48>
 8007746:	f104 0a19 	add.w	sl, r4, #25
 800774a:	68e3      	ldr	r3, [r4, #12]
 800774c:	6832      	ldr	r2, [r6, #0]
 800774e:	1a9b      	subs	r3, r3, r2
 8007750:	42ab      	cmp	r3, r5
 8007752:	dc26      	bgt.n	80077a2 <_printf_common+0x96>
 8007754:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007758:	6822      	ldr	r2, [r4, #0]
 800775a:	3b00      	subs	r3, #0
 800775c:	bf18      	it	ne
 800775e:	2301      	movne	r3, #1
 8007760:	0692      	lsls	r2, r2, #26
 8007762:	d42b      	bmi.n	80077bc <_printf_common+0xb0>
 8007764:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007768:	4641      	mov	r1, r8
 800776a:	4638      	mov	r0, r7
 800776c:	47c8      	blx	r9
 800776e:	3001      	adds	r0, #1
 8007770:	d01e      	beq.n	80077b0 <_printf_common+0xa4>
 8007772:	6823      	ldr	r3, [r4, #0]
 8007774:	6922      	ldr	r2, [r4, #16]
 8007776:	f003 0306 	and.w	r3, r3, #6
 800777a:	2b04      	cmp	r3, #4
 800777c:	bf02      	ittt	eq
 800777e:	68e5      	ldreq	r5, [r4, #12]
 8007780:	6833      	ldreq	r3, [r6, #0]
 8007782:	1aed      	subeq	r5, r5, r3
 8007784:	68a3      	ldr	r3, [r4, #8]
 8007786:	bf0c      	ite	eq
 8007788:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800778c:	2500      	movne	r5, #0
 800778e:	4293      	cmp	r3, r2
 8007790:	bfc4      	itt	gt
 8007792:	1a9b      	subgt	r3, r3, r2
 8007794:	18ed      	addgt	r5, r5, r3
 8007796:	2600      	movs	r6, #0
 8007798:	341a      	adds	r4, #26
 800779a:	42b5      	cmp	r5, r6
 800779c:	d11a      	bne.n	80077d4 <_printf_common+0xc8>
 800779e:	2000      	movs	r0, #0
 80077a0:	e008      	b.n	80077b4 <_printf_common+0xa8>
 80077a2:	2301      	movs	r3, #1
 80077a4:	4652      	mov	r2, sl
 80077a6:	4641      	mov	r1, r8
 80077a8:	4638      	mov	r0, r7
 80077aa:	47c8      	blx	r9
 80077ac:	3001      	adds	r0, #1
 80077ae:	d103      	bne.n	80077b8 <_printf_common+0xac>
 80077b0:	f04f 30ff 	mov.w	r0, #4294967295
 80077b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077b8:	3501      	adds	r5, #1
 80077ba:	e7c6      	b.n	800774a <_printf_common+0x3e>
 80077bc:	18e1      	adds	r1, r4, r3
 80077be:	1c5a      	adds	r2, r3, #1
 80077c0:	2030      	movs	r0, #48	@ 0x30
 80077c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80077c6:	4422      	add	r2, r4
 80077c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80077cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80077d0:	3302      	adds	r3, #2
 80077d2:	e7c7      	b.n	8007764 <_printf_common+0x58>
 80077d4:	2301      	movs	r3, #1
 80077d6:	4622      	mov	r2, r4
 80077d8:	4641      	mov	r1, r8
 80077da:	4638      	mov	r0, r7
 80077dc:	47c8      	blx	r9
 80077de:	3001      	adds	r0, #1
 80077e0:	d0e6      	beq.n	80077b0 <_printf_common+0xa4>
 80077e2:	3601      	adds	r6, #1
 80077e4:	e7d9      	b.n	800779a <_printf_common+0x8e>
	...

080077e8 <_printf_i>:
 80077e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80077ec:	7e0f      	ldrb	r7, [r1, #24]
 80077ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80077f0:	2f78      	cmp	r7, #120	@ 0x78
 80077f2:	4691      	mov	r9, r2
 80077f4:	4680      	mov	r8, r0
 80077f6:	460c      	mov	r4, r1
 80077f8:	469a      	mov	sl, r3
 80077fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80077fe:	d807      	bhi.n	8007810 <_printf_i+0x28>
 8007800:	2f62      	cmp	r7, #98	@ 0x62
 8007802:	d80a      	bhi.n	800781a <_printf_i+0x32>
 8007804:	2f00      	cmp	r7, #0
 8007806:	f000 80d2 	beq.w	80079ae <_printf_i+0x1c6>
 800780a:	2f58      	cmp	r7, #88	@ 0x58
 800780c:	f000 80b9 	beq.w	8007982 <_printf_i+0x19a>
 8007810:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007814:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007818:	e03a      	b.n	8007890 <_printf_i+0xa8>
 800781a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800781e:	2b15      	cmp	r3, #21
 8007820:	d8f6      	bhi.n	8007810 <_printf_i+0x28>
 8007822:	a101      	add	r1, pc, #4	@ (adr r1, 8007828 <_printf_i+0x40>)
 8007824:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007828:	08007881 	.word	0x08007881
 800782c:	08007895 	.word	0x08007895
 8007830:	08007811 	.word	0x08007811
 8007834:	08007811 	.word	0x08007811
 8007838:	08007811 	.word	0x08007811
 800783c:	08007811 	.word	0x08007811
 8007840:	08007895 	.word	0x08007895
 8007844:	08007811 	.word	0x08007811
 8007848:	08007811 	.word	0x08007811
 800784c:	08007811 	.word	0x08007811
 8007850:	08007811 	.word	0x08007811
 8007854:	08007995 	.word	0x08007995
 8007858:	080078bf 	.word	0x080078bf
 800785c:	0800794f 	.word	0x0800794f
 8007860:	08007811 	.word	0x08007811
 8007864:	08007811 	.word	0x08007811
 8007868:	080079b7 	.word	0x080079b7
 800786c:	08007811 	.word	0x08007811
 8007870:	080078bf 	.word	0x080078bf
 8007874:	08007811 	.word	0x08007811
 8007878:	08007811 	.word	0x08007811
 800787c:	08007957 	.word	0x08007957
 8007880:	6833      	ldr	r3, [r6, #0]
 8007882:	1d1a      	adds	r2, r3, #4
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	6032      	str	r2, [r6, #0]
 8007888:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800788c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007890:	2301      	movs	r3, #1
 8007892:	e09d      	b.n	80079d0 <_printf_i+0x1e8>
 8007894:	6833      	ldr	r3, [r6, #0]
 8007896:	6820      	ldr	r0, [r4, #0]
 8007898:	1d19      	adds	r1, r3, #4
 800789a:	6031      	str	r1, [r6, #0]
 800789c:	0606      	lsls	r6, r0, #24
 800789e:	d501      	bpl.n	80078a4 <_printf_i+0xbc>
 80078a0:	681d      	ldr	r5, [r3, #0]
 80078a2:	e003      	b.n	80078ac <_printf_i+0xc4>
 80078a4:	0645      	lsls	r5, r0, #25
 80078a6:	d5fb      	bpl.n	80078a0 <_printf_i+0xb8>
 80078a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80078ac:	2d00      	cmp	r5, #0
 80078ae:	da03      	bge.n	80078b8 <_printf_i+0xd0>
 80078b0:	232d      	movs	r3, #45	@ 0x2d
 80078b2:	426d      	negs	r5, r5
 80078b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078b8:	4859      	ldr	r0, [pc, #356]	@ (8007a20 <_printf_i+0x238>)
 80078ba:	230a      	movs	r3, #10
 80078bc:	e011      	b.n	80078e2 <_printf_i+0xfa>
 80078be:	6821      	ldr	r1, [r4, #0]
 80078c0:	6833      	ldr	r3, [r6, #0]
 80078c2:	0608      	lsls	r0, r1, #24
 80078c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80078c8:	d402      	bmi.n	80078d0 <_printf_i+0xe8>
 80078ca:	0649      	lsls	r1, r1, #25
 80078cc:	bf48      	it	mi
 80078ce:	b2ad      	uxthmi	r5, r5
 80078d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80078d2:	4853      	ldr	r0, [pc, #332]	@ (8007a20 <_printf_i+0x238>)
 80078d4:	6033      	str	r3, [r6, #0]
 80078d6:	bf14      	ite	ne
 80078d8:	230a      	movne	r3, #10
 80078da:	2308      	moveq	r3, #8
 80078dc:	2100      	movs	r1, #0
 80078de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80078e2:	6866      	ldr	r6, [r4, #4]
 80078e4:	60a6      	str	r6, [r4, #8]
 80078e6:	2e00      	cmp	r6, #0
 80078e8:	bfa2      	ittt	ge
 80078ea:	6821      	ldrge	r1, [r4, #0]
 80078ec:	f021 0104 	bicge.w	r1, r1, #4
 80078f0:	6021      	strge	r1, [r4, #0]
 80078f2:	b90d      	cbnz	r5, 80078f8 <_printf_i+0x110>
 80078f4:	2e00      	cmp	r6, #0
 80078f6:	d04b      	beq.n	8007990 <_printf_i+0x1a8>
 80078f8:	4616      	mov	r6, r2
 80078fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80078fe:	fb03 5711 	mls	r7, r3, r1, r5
 8007902:	5dc7      	ldrb	r7, [r0, r7]
 8007904:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007908:	462f      	mov	r7, r5
 800790a:	42bb      	cmp	r3, r7
 800790c:	460d      	mov	r5, r1
 800790e:	d9f4      	bls.n	80078fa <_printf_i+0x112>
 8007910:	2b08      	cmp	r3, #8
 8007912:	d10b      	bne.n	800792c <_printf_i+0x144>
 8007914:	6823      	ldr	r3, [r4, #0]
 8007916:	07df      	lsls	r7, r3, #31
 8007918:	d508      	bpl.n	800792c <_printf_i+0x144>
 800791a:	6923      	ldr	r3, [r4, #16]
 800791c:	6861      	ldr	r1, [r4, #4]
 800791e:	4299      	cmp	r1, r3
 8007920:	bfde      	ittt	le
 8007922:	2330      	movle	r3, #48	@ 0x30
 8007924:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007928:	f106 36ff 	addle.w	r6, r6, #4294967295
 800792c:	1b92      	subs	r2, r2, r6
 800792e:	6122      	str	r2, [r4, #16]
 8007930:	f8cd a000 	str.w	sl, [sp]
 8007934:	464b      	mov	r3, r9
 8007936:	aa03      	add	r2, sp, #12
 8007938:	4621      	mov	r1, r4
 800793a:	4640      	mov	r0, r8
 800793c:	f7ff fee6 	bl	800770c <_printf_common>
 8007940:	3001      	adds	r0, #1
 8007942:	d14a      	bne.n	80079da <_printf_i+0x1f2>
 8007944:	f04f 30ff 	mov.w	r0, #4294967295
 8007948:	b004      	add	sp, #16
 800794a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	f043 0320 	orr.w	r3, r3, #32
 8007954:	6023      	str	r3, [r4, #0]
 8007956:	4833      	ldr	r0, [pc, #204]	@ (8007a24 <_printf_i+0x23c>)
 8007958:	2778      	movs	r7, #120	@ 0x78
 800795a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800795e:	6823      	ldr	r3, [r4, #0]
 8007960:	6831      	ldr	r1, [r6, #0]
 8007962:	061f      	lsls	r7, r3, #24
 8007964:	f851 5b04 	ldr.w	r5, [r1], #4
 8007968:	d402      	bmi.n	8007970 <_printf_i+0x188>
 800796a:	065f      	lsls	r7, r3, #25
 800796c:	bf48      	it	mi
 800796e:	b2ad      	uxthmi	r5, r5
 8007970:	6031      	str	r1, [r6, #0]
 8007972:	07d9      	lsls	r1, r3, #31
 8007974:	bf44      	itt	mi
 8007976:	f043 0320 	orrmi.w	r3, r3, #32
 800797a:	6023      	strmi	r3, [r4, #0]
 800797c:	b11d      	cbz	r5, 8007986 <_printf_i+0x19e>
 800797e:	2310      	movs	r3, #16
 8007980:	e7ac      	b.n	80078dc <_printf_i+0xf4>
 8007982:	4827      	ldr	r0, [pc, #156]	@ (8007a20 <_printf_i+0x238>)
 8007984:	e7e9      	b.n	800795a <_printf_i+0x172>
 8007986:	6823      	ldr	r3, [r4, #0]
 8007988:	f023 0320 	bic.w	r3, r3, #32
 800798c:	6023      	str	r3, [r4, #0]
 800798e:	e7f6      	b.n	800797e <_printf_i+0x196>
 8007990:	4616      	mov	r6, r2
 8007992:	e7bd      	b.n	8007910 <_printf_i+0x128>
 8007994:	6833      	ldr	r3, [r6, #0]
 8007996:	6825      	ldr	r5, [r4, #0]
 8007998:	6961      	ldr	r1, [r4, #20]
 800799a:	1d18      	adds	r0, r3, #4
 800799c:	6030      	str	r0, [r6, #0]
 800799e:	062e      	lsls	r6, r5, #24
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	d501      	bpl.n	80079a8 <_printf_i+0x1c0>
 80079a4:	6019      	str	r1, [r3, #0]
 80079a6:	e002      	b.n	80079ae <_printf_i+0x1c6>
 80079a8:	0668      	lsls	r0, r5, #25
 80079aa:	d5fb      	bpl.n	80079a4 <_printf_i+0x1bc>
 80079ac:	8019      	strh	r1, [r3, #0]
 80079ae:	2300      	movs	r3, #0
 80079b0:	6123      	str	r3, [r4, #16]
 80079b2:	4616      	mov	r6, r2
 80079b4:	e7bc      	b.n	8007930 <_printf_i+0x148>
 80079b6:	6833      	ldr	r3, [r6, #0]
 80079b8:	1d1a      	adds	r2, r3, #4
 80079ba:	6032      	str	r2, [r6, #0]
 80079bc:	681e      	ldr	r6, [r3, #0]
 80079be:	6862      	ldr	r2, [r4, #4]
 80079c0:	2100      	movs	r1, #0
 80079c2:	4630      	mov	r0, r6
 80079c4:	f7f8 fc04 	bl	80001d0 <memchr>
 80079c8:	b108      	cbz	r0, 80079ce <_printf_i+0x1e6>
 80079ca:	1b80      	subs	r0, r0, r6
 80079cc:	6060      	str	r0, [r4, #4]
 80079ce:	6863      	ldr	r3, [r4, #4]
 80079d0:	6123      	str	r3, [r4, #16]
 80079d2:	2300      	movs	r3, #0
 80079d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80079d8:	e7aa      	b.n	8007930 <_printf_i+0x148>
 80079da:	6923      	ldr	r3, [r4, #16]
 80079dc:	4632      	mov	r2, r6
 80079de:	4649      	mov	r1, r9
 80079e0:	4640      	mov	r0, r8
 80079e2:	47d0      	blx	sl
 80079e4:	3001      	adds	r0, #1
 80079e6:	d0ad      	beq.n	8007944 <_printf_i+0x15c>
 80079e8:	6823      	ldr	r3, [r4, #0]
 80079ea:	079b      	lsls	r3, r3, #30
 80079ec:	d413      	bmi.n	8007a16 <_printf_i+0x22e>
 80079ee:	68e0      	ldr	r0, [r4, #12]
 80079f0:	9b03      	ldr	r3, [sp, #12]
 80079f2:	4298      	cmp	r0, r3
 80079f4:	bfb8      	it	lt
 80079f6:	4618      	movlt	r0, r3
 80079f8:	e7a6      	b.n	8007948 <_printf_i+0x160>
 80079fa:	2301      	movs	r3, #1
 80079fc:	4632      	mov	r2, r6
 80079fe:	4649      	mov	r1, r9
 8007a00:	4640      	mov	r0, r8
 8007a02:	47d0      	blx	sl
 8007a04:	3001      	adds	r0, #1
 8007a06:	d09d      	beq.n	8007944 <_printf_i+0x15c>
 8007a08:	3501      	adds	r5, #1
 8007a0a:	68e3      	ldr	r3, [r4, #12]
 8007a0c:	9903      	ldr	r1, [sp, #12]
 8007a0e:	1a5b      	subs	r3, r3, r1
 8007a10:	42ab      	cmp	r3, r5
 8007a12:	dcf2      	bgt.n	80079fa <_printf_i+0x212>
 8007a14:	e7eb      	b.n	80079ee <_printf_i+0x206>
 8007a16:	2500      	movs	r5, #0
 8007a18:	f104 0619 	add.w	r6, r4, #25
 8007a1c:	e7f5      	b.n	8007a0a <_printf_i+0x222>
 8007a1e:	bf00      	nop
 8007a20:	08007d95 	.word	0x08007d95
 8007a24:	08007da6 	.word	0x08007da6

08007a28 <__sflush_r>:
 8007a28:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a30:	0716      	lsls	r6, r2, #28
 8007a32:	4605      	mov	r5, r0
 8007a34:	460c      	mov	r4, r1
 8007a36:	d454      	bmi.n	8007ae2 <__sflush_r+0xba>
 8007a38:	684b      	ldr	r3, [r1, #4]
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	dc02      	bgt.n	8007a44 <__sflush_r+0x1c>
 8007a3e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	dd48      	ble.n	8007ad6 <__sflush_r+0xae>
 8007a44:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a46:	2e00      	cmp	r6, #0
 8007a48:	d045      	beq.n	8007ad6 <__sflush_r+0xae>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a50:	682f      	ldr	r7, [r5, #0]
 8007a52:	6a21      	ldr	r1, [r4, #32]
 8007a54:	602b      	str	r3, [r5, #0]
 8007a56:	d030      	beq.n	8007aba <__sflush_r+0x92>
 8007a58:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	0759      	lsls	r1, r3, #29
 8007a5e:	d505      	bpl.n	8007a6c <__sflush_r+0x44>
 8007a60:	6863      	ldr	r3, [r4, #4]
 8007a62:	1ad2      	subs	r2, r2, r3
 8007a64:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a66:	b10b      	cbz	r3, 8007a6c <__sflush_r+0x44>
 8007a68:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a6a:	1ad2      	subs	r2, r2, r3
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a70:	6a21      	ldr	r1, [r4, #32]
 8007a72:	4628      	mov	r0, r5
 8007a74:	47b0      	blx	r6
 8007a76:	1c43      	adds	r3, r0, #1
 8007a78:	89a3      	ldrh	r3, [r4, #12]
 8007a7a:	d106      	bne.n	8007a8a <__sflush_r+0x62>
 8007a7c:	6829      	ldr	r1, [r5, #0]
 8007a7e:	291d      	cmp	r1, #29
 8007a80:	d82b      	bhi.n	8007ada <__sflush_r+0xb2>
 8007a82:	4a2a      	ldr	r2, [pc, #168]	@ (8007b2c <__sflush_r+0x104>)
 8007a84:	410a      	asrs	r2, r1
 8007a86:	07d6      	lsls	r6, r2, #31
 8007a88:	d427      	bmi.n	8007ada <__sflush_r+0xb2>
 8007a8a:	2200      	movs	r2, #0
 8007a8c:	6062      	str	r2, [r4, #4]
 8007a8e:	04d9      	lsls	r1, r3, #19
 8007a90:	6922      	ldr	r2, [r4, #16]
 8007a92:	6022      	str	r2, [r4, #0]
 8007a94:	d504      	bpl.n	8007aa0 <__sflush_r+0x78>
 8007a96:	1c42      	adds	r2, r0, #1
 8007a98:	d101      	bne.n	8007a9e <__sflush_r+0x76>
 8007a9a:	682b      	ldr	r3, [r5, #0]
 8007a9c:	b903      	cbnz	r3, 8007aa0 <__sflush_r+0x78>
 8007a9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007aa0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa2:	602f      	str	r7, [r5, #0]
 8007aa4:	b1b9      	cbz	r1, 8007ad6 <__sflush_r+0xae>
 8007aa6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aaa:	4299      	cmp	r1, r3
 8007aac:	d002      	beq.n	8007ab4 <__sflush_r+0x8c>
 8007aae:	4628      	mov	r0, r5
 8007ab0:	f7ff fbf2 	bl	8007298 <_free_r>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	6363      	str	r3, [r4, #52]	@ 0x34
 8007ab8:	e00d      	b.n	8007ad6 <__sflush_r+0xae>
 8007aba:	2301      	movs	r3, #1
 8007abc:	4628      	mov	r0, r5
 8007abe:	47b0      	blx	r6
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	1c50      	adds	r0, r2, #1
 8007ac4:	d1c9      	bne.n	8007a5a <__sflush_r+0x32>
 8007ac6:	682b      	ldr	r3, [r5, #0]
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d0c6      	beq.n	8007a5a <__sflush_r+0x32>
 8007acc:	2b1d      	cmp	r3, #29
 8007ace:	d001      	beq.n	8007ad4 <__sflush_r+0xac>
 8007ad0:	2b16      	cmp	r3, #22
 8007ad2:	d11e      	bne.n	8007b12 <__sflush_r+0xea>
 8007ad4:	602f      	str	r7, [r5, #0]
 8007ad6:	2000      	movs	r0, #0
 8007ad8:	e022      	b.n	8007b20 <__sflush_r+0xf8>
 8007ada:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ade:	b21b      	sxth	r3, r3
 8007ae0:	e01b      	b.n	8007b1a <__sflush_r+0xf2>
 8007ae2:	690f      	ldr	r7, [r1, #16]
 8007ae4:	2f00      	cmp	r7, #0
 8007ae6:	d0f6      	beq.n	8007ad6 <__sflush_r+0xae>
 8007ae8:	0793      	lsls	r3, r2, #30
 8007aea:	680e      	ldr	r6, [r1, #0]
 8007aec:	bf08      	it	eq
 8007aee:	694b      	ldreq	r3, [r1, #20]
 8007af0:	600f      	str	r7, [r1, #0]
 8007af2:	bf18      	it	ne
 8007af4:	2300      	movne	r3, #0
 8007af6:	eba6 0807 	sub.w	r8, r6, r7
 8007afa:	608b      	str	r3, [r1, #8]
 8007afc:	f1b8 0f00 	cmp.w	r8, #0
 8007b00:	dde9      	ble.n	8007ad6 <__sflush_r+0xae>
 8007b02:	6a21      	ldr	r1, [r4, #32]
 8007b04:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b06:	4643      	mov	r3, r8
 8007b08:	463a      	mov	r2, r7
 8007b0a:	4628      	mov	r0, r5
 8007b0c:	47b0      	blx	r6
 8007b0e:	2800      	cmp	r0, #0
 8007b10:	dc08      	bgt.n	8007b24 <__sflush_r+0xfc>
 8007b12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b1a:	81a3      	strh	r3, [r4, #12]
 8007b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b24:	4407      	add	r7, r0
 8007b26:	eba8 0800 	sub.w	r8, r8, r0
 8007b2a:	e7e7      	b.n	8007afc <__sflush_r+0xd4>
 8007b2c:	dfbffffe 	.word	0xdfbffffe

08007b30 <_fflush_r>:
 8007b30:	b538      	push	{r3, r4, r5, lr}
 8007b32:	690b      	ldr	r3, [r1, #16]
 8007b34:	4605      	mov	r5, r0
 8007b36:	460c      	mov	r4, r1
 8007b38:	b913      	cbnz	r3, 8007b40 <_fflush_r+0x10>
 8007b3a:	2500      	movs	r5, #0
 8007b3c:	4628      	mov	r0, r5
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	b118      	cbz	r0, 8007b4a <_fflush_r+0x1a>
 8007b42:	6a03      	ldr	r3, [r0, #32]
 8007b44:	b90b      	cbnz	r3, 8007b4a <_fflush_r+0x1a>
 8007b46:	f7ff f9ad 	bl	8006ea4 <__sinit>
 8007b4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d0f3      	beq.n	8007b3a <_fflush_r+0xa>
 8007b52:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b54:	07d0      	lsls	r0, r2, #31
 8007b56:	d404      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b58:	0599      	lsls	r1, r3, #22
 8007b5a:	d402      	bmi.n	8007b62 <_fflush_r+0x32>
 8007b5c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b5e:	f7ff fb98 	bl	8007292 <__retarget_lock_acquire_recursive>
 8007b62:	4628      	mov	r0, r5
 8007b64:	4621      	mov	r1, r4
 8007b66:	f7ff ff5f 	bl	8007a28 <__sflush_r>
 8007b6a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007b6c:	07da      	lsls	r2, r3, #31
 8007b6e:	4605      	mov	r5, r0
 8007b70:	d4e4      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b72:	89a3      	ldrh	r3, [r4, #12]
 8007b74:	059b      	lsls	r3, r3, #22
 8007b76:	d4e1      	bmi.n	8007b3c <_fflush_r+0xc>
 8007b78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b7a:	f7ff fb8b 	bl	8007294 <__retarget_lock_release_recursive>
 8007b7e:	e7dd      	b.n	8007b3c <_fflush_r+0xc>

08007b80 <__swhatbuf_r>:
 8007b80:	b570      	push	{r4, r5, r6, lr}
 8007b82:	460c      	mov	r4, r1
 8007b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b88:	2900      	cmp	r1, #0
 8007b8a:	b096      	sub	sp, #88	@ 0x58
 8007b8c:	4615      	mov	r5, r2
 8007b8e:	461e      	mov	r6, r3
 8007b90:	da0d      	bge.n	8007bae <__swhatbuf_r+0x2e>
 8007b92:	89a3      	ldrh	r3, [r4, #12]
 8007b94:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007b98:	f04f 0100 	mov.w	r1, #0
 8007b9c:	bf14      	ite	ne
 8007b9e:	2340      	movne	r3, #64	@ 0x40
 8007ba0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007ba4:	2000      	movs	r0, #0
 8007ba6:	6031      	str	r1, [r6, #0]
 8007ba8:	602b      	str	r3, [r5, #0]
 8007baa:	b016      	add	sp, #88	@ 0x58
 8007bac:	bd70      	pop	{r4, r5, r6, pc}
 8007bae:	466a      	mov	r2, sp
 8007bb0:	f000 f848 	bl	8007c44 <_fstat_r>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	dbec      	blt.n	8007b92 <__swhatbuf_r+0x12>
 8007bb8:	9901      	ldr	r1, [sp, #4]
 8007bba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007bbe:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007bc2:	4259      	negs	r1, r3
 8007bc4:	4159      	adcs	r1, r3
 8007bc6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bca:	e7eb      	b.n	8007ba4 <__swhatbuf_r+0x24>

08007bcc <__smakebuf_r>:
 8007bcc:	898b      	ldrh	r3, [r1, #12]
 8007bce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bd0:	079d      	lsls	r5, r3, #30
 8007bd2:	4606      	mov	r6, r0
 8007bd4:	460c      	mov	r4, r1
 8007bd6:	d507      	bpl.n	8007be8 <__smakebuf_r+0x1c>
 8007bd8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007bdc:	6023      	str	r3, [r4, #0]
 8007bde:	6123      	str	r3, [r4, #16]
 8007be0:	2301      	movs	r3, #1
 8007be2:	6163      	str	r3, [r4, #20]
 8007be4:	b003      	add	sp, #12
 8007be6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007be8:	ab01      	add	r3, sp, #4
 8007bea:	466a      	mov	r2, sp
 8007bec:	f7ff ffc8 	bl	8007b80 <__swhatbuf_r>
 8007bf0:	9f00      	ldr	r7, [sp, #0]
 8007bf2:	4605      	mov	r5, r0
 8007bf4:	4639      	mov	r1, r7
 8007bf6:	4630      	mov	r0, r6
 8007bf8:	f7ff fbba 	bl	8007370 <_malloc_r>
 8007bfc:	b948      	cbnz	r0, 8007c12 <__smakebuf_r+0x46>
 8007bfe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c02:	059a      	lsls	r2, r3, #22
 8007c04:	d4ee      	bmi.n	8007be4 <__smakebuf_r+0x18>
 8007c06:	f023 0303 	bic.w	r3, r3, #3
 8007c0a:	f043 0302 	orr.w	r3, r3, #2
 8007c0e:	81a3      	strh	r3, [r4, #12]
 8007c10:	e7e2      	b.n	8007bd8 <__smakebuf_r+0xc>
 8007c12:	89a3      	ldrh	r3, [r4, #12]
 8007c14:	6020      	str	r0, [r4, #0]
 8007c16:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c1a:	81a3      	strh	r3, [r4, #12]
 8007c1c:	9b01      	ldr	r3, [sp, #4]
 8007c1e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c22:	b15b      	cbz	r3, 8007c3c <__smakebuf_r+0x70>
 8007c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c28:	4630      	mov	r0, r6
 8007c2a:	f000 f81d 	bl	8007c68 <_isatty_r>
 8007c2e:	b128      	cbz	r0, 8007c3c <__smakebuf_r+0x70>
 8007c30:	89a3      	ldrh	r3, [r4, #12]
 8007c32:	f023 0303 	bic.w	r3, r3, #3
 8007c36:	f043 0301 	orr.w	r3, r3, #1
 8007c3a:	81a3      	strh	r3, [r4, #12]
 8007c3c:	89a3      	ldrh	r3, [r4, #12]
 8007c3e:	431d      	orrs	r5, r3
 8007c40:	81a5      	strh	r5, [r4, #12]
 8007c42:	e7cf      	b.n	8007be4 <__smakebuf_r+0x18>

08007c44 <_fstat_r>:
 8007c44:	b538      	push	{r3, r4, r5, lr}
 8007c46:	4d07      	ldr	r5, [pc, #28]	@ (8007c64 <_fstat_r+0x20>)
 8007c48:	2300      	movs	r3, #0
 8007c4a:	4604      	mov	r4, r0
 8007c4c:	4608      	mov	r0, r1
 8007c4e:	4611      	mov	r1, r2
 8007c50:	602b      	str	r3, [r5, #0]
 8007c52:	f7f9 fa76 	bl	8001142 <_fstat>
 8007c56:	1c43      	adds	r3, r0, #1
 8007c58:	d102      	bne.n	8007c60 <_fstat_r+0x1c>
 8007c5a:	682b      	ldr	r3, [r5, #0]
 8007c5c:	b103      	cbz	r3, 8007c60 <_fstat_r+0x1c>
 8007c5e:	6023      	str	r3, [r4, #0]
 8007c60:	bd38      	pop	{r3, r4, r5, pc}
 8007c62:	bf00      	nop
 8007c64:	200004a8 	.word	0x200004a8

08007c68 <_isatty_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d06      	ldr	r5, [pc, #24]	@ (8007c84 <_isatty_r+0x1c>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	602b      	str	r3, [r5, #0]
 8007c74:	f7f9 fa75 	bl	8001162 <_isatty>
 8007c78:	1c43      	adds	r3, r0, #1
 8007c7a:	d102      	bne.n	8007c82 <_isatty_r+0x1a>
 8007c7c:	682b      	ldr	r3, [r5, #0]
 8007c7e:	b103      	cbz	r3, 8007c82 <_isatty_r+0x1a>
 8007c80:	6023      	str	r3, [r4, #0]
 8007c82:	bd38      	pop	{r3, r4, r5, pc}
 8007c84:	200004a8 	.word	0x200004a8

08007c88 <_sbrk_r>:
 8007c88:	b538      	push	{r3, r4, r5, lr}
 8007c8a:	4d06      	ldr	r5, [pc, #24]	@ (8007ca4 <_sbrk_r+0x1c>)
 8007c8c:	2300      	movs	r3, #0
 8007c8e:	4604      	mov	r4, r0
 8007c90:	4608      	mov	r0, r1
 8007c92:	602b      	str	r3, [r5, #0]
 8007c94:	f7f9 fa7e 	bl	8001194 <_sbrk>
 8007c98:	1c43      	adds	r3, r0, #1
 8007c9a:	d102      	bne.n	8007ca2 <_sbrk_r+0x1a>
 8007c9c:	682b      	ldr	r3, [r5, #0]
 8007c9e:	b103      	cbz	r3, 8007ca2 <_sbrk_r+0x1a>
 8007ca0:	6023      	str	r3, [r4, #0]
 8007ca2:	bd38      	pop	{r3, r4, r5, pc}
 8007ca4:	200004a8 	.word	0x200004a8

08007ca8 <_init>:
 8007ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007caa:	bf00      	nop
 8007cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cae:	bc08      	pop	{r3}
 8007cb0:	469e      	mov	lr, r3
 8007cb2:	4770      	bx	lr

08007cb4 <_fini>:
 8007cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cb6:	bf00      	nop
 8007cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cba:	bc08      	pop	{r3}
 8007cbc:	469e      	mov	lr, r3
 8007cbe:	4770      	bx	lr
